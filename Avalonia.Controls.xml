<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Avalonia.Controls</name>
    </assembly>
    <members>
        <member name="T:Avalonia.Controls.AppBuilder">
            <summary>
            Initializes up platform-specific services for an <see cref="T:Avalonia.Application"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.AppBuilder.Instance">
            <summary>
            Gets or sets the <see cref="T:Avalonia.Application"/> instance being initialized.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.AppBuilder.WindowingSubsystem">
            <summary>
            Gets or sets a method to call the initialize the windowing subsystem.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.AppBuilder.RenderingSubsystem">
            <summary>
            Gets or sets a method to call the initialize the windowing subsystem.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.AppBuilder.BeforeStartCallback">
            <summary>
            Gets or sets a method to call before <see cref="M:Avalonia.Controls.AppBuilder.Start``1"/> is called on the
            <see cref="T:Avalonia.Application"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.AppBuilder.Configure``1">
            <summary>
            Begin configuring an <see cref="T:Avalonia.Application"/>.
            </summary>
            <typeparam name="TApp">The subclass of <see cref="T:Avalonia.Application"/> to configure.</typeparam>
            <returns>An <see cref="T:Avalonia.Controls.AppBuilder"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Controls.AppBuilder.Configure(Avalonia.Application)">
            <summary>
            Begin configuring an <see cref="T:Avalonia.Application"/>.
            </summary>
            <returns>An <see cref="T:Avalonia.Controls.AppBuilder"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Controls.AppBuilder.BeforeStarting(System.Action{Avalonia.Controls.AppBuilder})">
            <summary>
            Registers a callback to call before <see cref="M:Avalonia.Controls.AppBuilder.Start``1"/> is called on the
            <see cref="T:Avalonia.Application"/>.
            </summary>
            <param name="callback">The callback.</param>
            <returns>An <see cref="T:Avalonia.Controls.AppBuilder"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Controls.AppBuilder.Start``1">
            <summary>
            Starts the application with an instance of <typeparamref name="TMainWindow"/>.
            </summary>
            <typeparam name="TMainWindow">The window type.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.AppBuilder.SetupWithoutStarting">
            <summary>
            Sets up the platform-specific services for the application, but does not run it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalonia.Controls.AppBuilder.UseWindowingSubsystem(System.Action)">
            <summary>
            Specifies a windowing subsystem to use.
            </summary>
            <param name="initializer">The method to call to initialize the windowing subsystem.</param>
            <returns>An <see cref="T:Avalonia.Controls.AppBuilder"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Controls.AppBuilder.UseWindowingSubsystem(System.String)">
            <summary>
            Specifies a windowing subsystem to use.
            </summary>
            <param name="dll">The dll in which to look for subsystem.</param>
            <returns>An <see cref="T:Avalonia.Controls.AppBuilder"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Controls.AppBuilder.UseRenderingSubsystem(System.Action)">
            <summary>
            Specifies a rendering subsystem to use.
            </summary>
            <param name="initializer">The method to call to initialize the rendering subsystem.</param>
            <returns>An <see cref="T:Avalonia.Controls.AppBuilder"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Controls.AppBuilder.UseRenderingSubsystem(System.String)">
            <summary>
            Specifies a rendering subsystem to use.
            </summary>
            <param name="dll">The dll in which to look for subsystem.</param>
            <returns>An <see cref="T:Avalonia.Controls.AppBuilder"/> instance.</returns>
        </member>
        <member name="M:Avalonia.Controls.AppBuilder.Setup">
            <summary>
            Sets up the platform-speciic services for the <see cref="T:Avalonia.Application"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Classes">
            <summary>
            Holds a collection of style classes for an <see cref="T:Avalonia.Controls.IControl"/>.
            </summary>
            <remarks>
            Similar to CSS, each control may have any number of styling classes applied.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Classes"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Classes.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Classes"/> class.
            </summary>
            <param name="items">The initial items.</param>
        </member>
        <member name="M:Avalonia.Controls.Classes.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Classes"/> class.
            </summary>
            <param name="items">The initial items.</param>
        </member>
        <member name="M:Avalonia.Controls.Classes.Add(System.String)">
            <summary>
            Adds a style class to the collection.
            </summary>
            <param name="name">The class name.</param>
            <remarks>
            Only standard classes may be added via this method. To add pseudoclasses (classes
            beginning with a ':' character) use the protected <see cref="P:Avalonia.Controls.Control.PseudoClasses"/>
            property.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a style classes to the collection.
            </summary>
            <param name="names">The class names.</param>
            <remarks>
            Only standard classes may be added via this method. To add pseudoclasses (classes
            beginning with a ':' character) use the protected <see cref="P:Avalonia.Controls.Control.PseudoClasses"/>
            property.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.Insert(System.Int32,System.String)">
            <summary>
            Inserts a style class into the collection.
            </summary>
            <param name="index">The index to insert the class at.</param>
            <param name="name">The class name.</param>
            <remarks>
            Only standard classes may be added via this method. To add pseudoclasses (classes
            beginning with a ':' character) use the protected <see cref="P:Avalonia.Controls.Control.PseudoClasses"/>
            property.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Inserts style classes into the collection.
            </summary>
            <param name="index">The index to insert the class at.</param>
            <param name="names">The class names.</param>
            <remarks>
            Only standard classes may be added via this method. To add pseudoclasses (classes
            beginning with a ':' character) use the protected <see cref="P:Avalonia.Controls.Control.PseudoClasses"/>
            property.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.Remove(System.String)">
            <summary>
            Removes a style class from the collection.
            </summary>
            <param name="name">The class name.</param>
            <remarks>
            Only standard classes may be removed via this method. To remove pseudoclasses (classes
            beginning with a ':' character) use the protected <see cref="P:Avalonia.Controls.Control.PseudoClasses"/>
            property.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.RemoveAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes style classes from the collection.
            </summary>
            <param name="names">The class name.</param>
            <remarks>
            Only standard classes may be removed via this method. To remove pseudoclasses (classes
            beginning with a ':' character) use the protected <see cref="P:Avalonia.Controls.Control.PseudoClasses"/>
            property.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.RemoveAt(System.Int32)">
            <summary>
            Removes a style class from the collection.
            </summary>
            <param name="index">The index of the class in the collection.</param>
            <remarks>
            Only standard classes may be removed via this method. To remove pseudoclasses (classes
            beginning with a ':' character) use the protected <see cref="P:Avalonia.Controls.Control.PseudoClasses"/>
            property.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Classes.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes style classes from the collection.
            </summary>
            <param name="index">The first index to remove.</param>
            <param name="count">The number of items to remove.</param>
        </member>
        <member name="M:Avalonia.Controls.Classes.Replace(System.Collections.Generic.IList{System.String})">
            <summary>
            Removes all non-pseudoclasses in the collection and adds a new set.
            </summary>
            <param name="source">The new contents of the collection.</param>
        </member>
        <member name="M:Avalonia.Controls.Classes.Avalonia#Controls#IPseudoClasses#Add(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Classes.Avalonia#Controls#IPseudoClasses#Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ContextMenu.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ContextMenu"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ContextMenu.ContextMenuChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Control.ContextMenu"/> property changes on a control.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.ContextMenu.OnContextMenuClick(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when a submenu is clicked somewhere in the menu.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.ContextMenu.Hide">
            <summary>
            Closes the menu.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ContextMenu.Show(Avalonia.Controls.Control)">
            <summary>
            Shows a context menu for the specified control.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="T:Avalonia.Controls.Dock">
            <summary>
            Defines the available docking modes for a control in a <see cref="T:Avalonia.Controls.DockPanel"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.DockPanel">
            <summary>
            A panel which arranges its children at the top, bottom, left, right or center.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DockPanel.DockProperty">
            <summary>
            Defines the Dock attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DockPanel.LastChildFillProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DockPanel.LastChildFill"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DockPanel.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.DockPanel"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DockPanel.GetDock(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the Dock attached property on the specified control.
            </summary>
            <param name="control">The control.</param>
            <returns>The Dock attached property.</returns>
        </member>
        <member name="M:Avalonia.Controls.DockPanel.SetDock(Avalonia.Controls.Control,Avalonia.Controls.Dock)">
            <summary>
            Sets the value of the Dock attached property on the specified control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The value of the Dock property.</param>
        </member>
        <member name="P:Avalonia.Controls.DockPanel.LastChildFill">
            <summary>
            Gets or sets a value which indicates whether the last child of the 
            <see cref="T:Avalonia.Controls.DockPanel"/> fills the remaining space in the panel.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DockPanel.MeasureOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.DockPanel.ArrangeOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Generators.ItemContainerInfo">
            <summary>
            Holds information about an item container generated by an 
            <see cref="T:Avalonia.Controls.Generators.IItemContainerGenerator"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerInfo.#ctor(Avalonia.Controls.IControl,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Generators.ItemContainerInfo"/> class.
            </summary>
            <param name="container">The container control.</param>
            <param name="item">The item that the container represents.</param>
            <param name="index">
            The index of the item in the <see cref="P:Avalonia.Controls.ItemsControl.Items"/> collection.
            </param>
        </member>
        <member name="P:Avalonia.Controls.Generators.ItemContainerInfo.ContainerControl">
            <summary>
            Gets the container control.
            </summary>
            <remarks>
            This will be null if <see cref="P:Avalonia.Controls.Generators.ItemContainerInfo.Item"/> is null.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Generators.ItemContainerInfo.Item">
            <summary>
            Gets the item that the container represents.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.ItemContainerInfo.Index">
            <summary>
            Gets the index of the item in the <see cref="P:Avalonia.Controls.ItemsControl.Items"/> collection.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Generators.MenuItemContainerGenerator.#ctor(Avalonia.Controls.IControl)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Generators.ItemContainerGenerator`1"/> class.
            </summary>
            <param name="owner">The owner control.</param>
        </member>
        <member name="M:Avalonia.Controls.Generators.MenuItemContainerGenerator.CreateContainer(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Generators.TreeContainerIndex">
            <summary>
            Maintains an index of all item containers currently materialized by a <see cref="T:Avalonia.Controls.TreeView"/>.
            </summary>
            <remarks>
            Each <see cref="T:Avalonia.Controls.TreeViewItem"/> has its own <see cref="T:Avalonia.Controls.Generators.TreeItemContainerGenerator`1"/> 
            that maintains the list of its direct children, but they also share an instance of this
            class in their <see cref="P:Avalonia.Controls.Generators.TreeItemContainerGenerator`1.Index"/> property which tracks 
            the containers materialized for the entire tree.
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.Generators.TreeContainerIndex.Materialized">
            <summary>
            Signalled whenever new containers are materialized.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Generators.TreeContainerIndex.Dematerialized">
            <summary>
            Event raised whenever containers are dematerialized.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.TreeContainerIndex.Items">
            <summary>
            Gets the currently materialized containers.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Generators.TreeContainerIndex.Add(System.Object,Avalonia.Controls.IControl)">
            <summary>
            Adds an entry to the index.
            </summary>
            <param name="item">The item.</param>
            <param name="container">The item container.</param>
        </member>
        <member name="M:Avalonia.Controls.Generators.TreeContainerIndex.Remove(Avalonia.Controls.IControl)">
            <summary>
            Removes a container from the index.
            </summary>
            <param name="container">The item container.</param>
        </member>
        <member name="M:Avalonia.Controls.Generators.TreeContainerIndex.Remove(System.Int32,System.Collections.Generic.IEnumerable{Avalonia.Controls.Generators.ItemContainerInfo})">
            <summary>
            Removes a set of containers from the index.
            </summary>
            <param name="startingIndex">The index of the first item.</param>
            <param name="containers">The item containers.</param>
        </member>
        <member name="M:Avalonia.Controls.Generators.TreeContainerIndex.ContainerFromItem(System.Object)">
            <summary>
            Gets the container for an item.
            </summary>
            <param name="item">The item.</param>
            <returns>The container, or null of not found.</returns>
        </member>
        <member name="M:Avalonia.Controls.Generators.TreeContainerIndex.ItemFromContainer(Avalonia.Controls.IControl)">
            <summary>
            Gets the item for a container.
            </summary>
            <param name="container">The container.</param>
            <returns>The item, or null of not found.</returns>
        </member>
        <member name="T:Avalonia.Controls.Generators.ITreeItemContainerGenerator">
            <summary>
            Creates containers for tree items and maintains a list of created containers.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.ITreeItemContainerGenerator.Index">
            <summary>
            Gets the container index for the tree.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Generators.ItemContainerEventArgs">
            <summary>
            Provides details for the <see cref="E:Avalonia.Controls.Generators.IItemContainerGenerator.Materialized"/>
            and <see cref="E:Avalonia.Controls.Generators.IItemContainerGenerator.Dematerialized"/> events.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerEventArgs.#ctor(Avalonia.Controls.Generators.ItemContainerInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Generators.ItemContainerEventArgs"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerEventArgs.#ctor(System.Int32,System.Collections.Generic.IList{Avalonia.Controls.Generators.ItemContainerInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Generators.ItemContainerEventArgs"/> class.
            </summary>
            <param name="startingIndex">The index of the first container in the source items.</param>
            <param name="containers">The containers.</param>
            <remarks>
            TODO: Do we really need to pass in StartingIndex here? The ItemContainerInfo objects
            have an index, and what happens if the contains passed in aren't sequential?
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Generators.ItemContainerEventArgs.Containers">
            <summary>
            Gets the containers.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.ItemContainerEventArgs.StartingIndex">
            <summary>
            Gets the index of the first container in the source items.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Generators.TreeItemContainerGenerator`1">
            <summary>
            Creates containers for tree items and maintains a list of created containers.
            </summary>
            <typeparam name="T">The type of the container.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.Generators.TreeItemContainerGenerator`1.#ctor(Avalonia.Controls.IControl,Avalonia.AvaloniaProperty,Avalonia.AvaloniaProperty,Avalonia.AvaloniaProperty,Avalonia.AvaloniaProperty,Avalonia.Controls.Generators.TreeContainerIndex)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Generators.TreeItemContainerGenerator`1"/> class.
            </summary>
            <param name="owner">The owner control.</param>
            <param name="contentProperty">The container's Content property.</param>
            <param name="contentTemplateProperty">The container's ContentTemplate property.</param>
            <param name="itemsProperty">The container's Items property.</param>
            <param name="isExpandedProperty">The container's IsExpanded property.</param>
            <param name="index">The container index for the tree</param>
        </member>
        <member name="P:Avalonia.Controls.Generators.TreeItemContainerGenerator`1.Index">
            <summary>
            Gets the container index for the tree.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.TreeItemContainerGenerator`1.ItemsProperty">
            <summary>
            Gets the item container's Items property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.TreeItemContainerGenerator`1.IsExpandedProperty">
            <summary>
            Gets the item container's IsExpanded property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Generators.TreeItemContainerGenerator`1.CreateContainer(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Generators.TreeItemContainerGenerator`1.GetTreeDataTemplate(System.Object,Avalonia.Controls.Templates.IDataTemplate)">
            <summary>
            Gets the data template for the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>The template.</returns>
        </member>
        <member name="T:Avalonia.Controls.Generators.ItemContainerGenerator`1">
            <summary>
            Creates containers for items and maintains a list of created containers.
            </summary>
            <typeparam name="T">The type of the container.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator`1.#ctor(Avalonia.Controls.IControl,Avalonia.AvaloniaProperty,Avalonia.AvaloniaProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Generators.ItemContainerGenerator`1"/> class.
            </summary>
            <param name="owner">The owner control.</param>
            <param name="contentProperty">The container's Content property.</param>
            <param name="contentTemplateProperty">The container's ContentTemplate property.</param>
        </member>
        <member name="P:Avalonia.Controls.Generators.ItemContainerGenerator`1.ContentProperty">
            <summary>
            Gets the container's Content property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.ItemContainerGenerator`1.ContentTemplateProperty">
            <summary>
            Gets the container's ContentTemplate property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator`1.CreateContainer(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator`1.TryRecycle(System.Int32,System.Int32,System.Object,Avalonia.Controls.Templates.IMemberSelector)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Generators.ItemContainerGenerator">
            <summary>
            Creates containers for items and maintains a list of created containers.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.#ctor(Avalonia.Controls.IControl)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Generators.ItemContainerGenerator"/> class.
            </summary>
            <param name="owner">The owner control.</param>
        </member>
        <member name="P:Avalonia.Controls.Generators.ItemContainerGenerator.Containers">
            <inheritdoc/>
        </member>
        <member name="E:Avalonia.Controls.Generators.ItemContainerGenerator.Materialized">
            <inheritdoc/>
        </member>
        <member name="E:Avalonia.Controls.Generators.ItemContainerGenerator.Dematerialized">
            <inheritdoc/>
        </member>
        <member name="E:Avalonia.Controls.Generators.ItemContainerGenerator.Recycled">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Generators.ItemContainerGenerator.ItemTemplate">
            <summary>
            Gets or sets the data template used to display the items in the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.ItemContainerGenerator.Owner">
            <summary>
            Gets the owner control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.Materialize(System.Int32,System.Object,Avalonia.Controls.Templates.IMemberSelector)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.Dematerialize(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.InsertSpace(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.TryRecycle(System.Int32,System.Int32,System.Object,Avalonia.Controls.Templates.IMemberSelector)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.ContainerFromIndex(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.IndexFromContainer(Avalonia.Controls.IControl)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.CreateContainer(System.Object)">
            <summary>
            Creates the container for an item.
            </summary>
            <param name="item">The item.</param>
            <returns>The created container control.</returns>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.MoveContainer(System.Int32,System.Int32,System.Object)">
            <summary>
            Moves a container.
            </summary>
            <param name="oldIndex">The old index.</param>
            <param name="newIndex">The new index.</param>
            <param name="item">The new item.</param>
            <returns>The container info.</returns>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.GetContainerRange(System.Int32,System.Int32)">
            <summary>
            Gets all containers with an index that fall within a range.
            </summary>
            <param name="index">The first index.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>The containers.</returns>
        </member>
        <member name="M:Avalonia.Controls.Generators.ItemContainerGenerator.RaiseRecycled(Avalonia.Controls.Generators.ItemContainerEventArgs)">
            <summary>
            Raises the <see cref="E:Avalonia.Controls.Generators.ItemContainerGenerator.Recycled"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.Generators.IItemContainerGenerator">
            <summary>
            Creates containers for items and maintains a list of created containers.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.IItemContainerGenerator.Containers">
            <summary>
            Gets the currently realized containers.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Generators.IItemContainerGenerator.ItemTemplate">
            <summary>
            Gets or sets the data template used to display the items in the control.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Generators.IItemContainerGenerator.Materialized">
            <summary>
            Signalled whenever new containers are materialized.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Generators.IItemContainerGenerator.Dematerialized">
            <summary>
            Event raised whenever containers are dematerialized.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Generators.IItemContainerGenerator.Recycled">
            <summary>
            Event raised whenever containers are recycled.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Generators.IItemContainerGenerator.Materialize(System.Int32,System.Object,Avalonia.Controls.Templates.IMemberSelector)">
            <summary>
            Creates a container control for an item.
            </summary>
            <param name="index">
            The index of the item of data in the control's items.
            </param>
            <param name="item">The item.</param>
            <param name="selector">An optional member selector.</param>
            <returns>The created controls.</returns>
        </member>
        <member name="M:Avalonia.Controls.Generators.IItemContainerGenerator.Dematerialize(System.Int32,System.Int32)">
            <summary>
            Removes a set of created containers.
            </summary>
            <param name="startingIndex">
            The index of the first item in the control's items.
            </param>
            <param name="count">The the number of items to remove.</param>
            <returns>The removed containers.</returns>
        </member>
        <member name="M:Avalonia.Controls.Generators.IItemContainerGenerator.InsertSpace(System.Int32,System.Int32)">
            <summary>
            Inserts space for newly inserted containers in the index.
            </summary>
            <param name="index">The index at which space should be inserted.</param>
            <param name="count">The number of blank spaces to create.</param>
        </member>
        <member name="M:Avalonia.Controls.Generators.IItemContainerGenerator.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a set of created containers and updates the index of later containers to fill
            the gap.
            </summary>
            <param name="startingIndex">
            The index of the first item in the control's items.
            </param>
            <param name="count">The the number of items to remove.</param>
            <returns>The removed containers.</returns>
        </member>
        <member name="M:Avalonia.Controls.Generators.IItemContainerGenerator.Clear">
            <summary>
            Clears all created containers and returns the removed controls.
            </summary>
            <returns>The removed controls.</returns>
        </member>
        <member name="M:Avalonia.Controls.Generators.IItemContainerGenerator.ContainerFromIndex(System.Int32)">
            <summary>
            Gets the container control representing the item with the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The container, or null if no container created.</returns>
        </member>
        <member name="M:Avalonia.Controls.Generators.IItemContainerGenerator.IndexFromContainer(Avalonia.Controls.IControl)">
            <summary>
            Gets the index of the specified container control.
            </summary>
            <param name="container">The container.</param>
            <returns>The index of the container, or -1 if not found.</returns>
        </member>
        <member name="T:Avalonia.Controls.IApplicationLifecycle">
            <summary>
            Sends events about the application lifecycle.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.IApplicationLifecycle.OnExit">
            <summary>
            Sent when the application is exiting.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IApplicationLifecycle.Exit">
            <summary>
            Exits the application.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.IScrollable">
            <summary>
            Interface implemented by scrollable controls.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.IScrollable.Extent">
            <summary>
            Gets the extent of the scrollable content, in logical units
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.IScrollable.Offset">
            <summary>
            Gets or sets the current scroll offset, in logical units.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.IScrollable.Viewport">
            <summary>
            Gets the size of the viewport, in logical units.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl">
            <summary>
            Represents a <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl"/> with a related header.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.HeaderProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.Header"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ContentControl"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.Header">
            <summary>
            Gets or sets the content of the control's header.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.HeaderPresenter">
            <summary>
            Gets the header presenter from the control's template.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.HeaderedSelectingItemsControl.OnTemplateApplied(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Primitives.ILogicalScrollable">
            <summary>
            Interface implemented by controls that handle their own scrolling when placed inside a 
            <see cref="T:Avalonia.Controls.ScrollViewer"/>.
            </summary>
            <remarks>
            Controls that implement this interface, when placed inside a <see cref="T:Avalonia.Controls.ScrollViewer"/>
            can override the physical scrolling behavior of the scroll viewer with logical scrolling.
            Physical scrolling means that the scroll viewer is a simple viewport onto a larger canvas
            whereas logical scrolling means that the scrolling is handled by the child control itself
            and it can choose to do handle the scroll information as it sees fit.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ILogicalScrollable.IsLogicalScrollEnabled">
            <summary>
            Gets a value indicating whether logical scrolling is enabled on the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ILogicalScrollable.InvalidateScroll">
            <summary>
            Gets or sets the scroll invalidation method.
            </summary>
            <remarks>
            <para>
            This method notifies the attached <see cref="T:Avalonia.Controls.ScrollViewer"/> of a change in 
            the <see cref="P:Avalonia.Controls.Primitives.IScrollable.Extent"/>, <see cref="P:Avalonia.Controls.Primitives.IScrollable.Offset"/> or 
            <see cref="P:Avalonia.Controls.Primitives.IScrollable.Viewport"/> properties.
            </para>
            <para>
            This property is set by the parent <see cref="T:Avalonia.Controls.ScrollViewer"/> when the 
            <see cref="T:Avalonia.Controls.Primitives.ILogicalScrollable"/> is placed inside it.
            </para>
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ILogicalScrollable.ScrollSize">
            <summary>
            Gets the size to scroll by, in logical units.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ILogicalScrollable.PageScrollSize">
            <summary>
            Gets the size to page by, in logical units.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ILogicalScrollable.BringIntoView(Avalonia.Controls.IControl,Avalonia.Rect)">
            <summary>
            Attempts to bring a portion of the target visual into view by scrolling the content.
            </summary>
            <param name="target">The target visual.</param>
            <param name="targetRect">The portion of the target visual to bring into view.</param>
            <returns>True if the scroll offset was changed; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ILogicalScrollable.GetControlInDirection(Avalonia.Input.NavigationDirection,Avalonia.Controls.IControl)">
            <summary>
            Gets the next control in the specified direction.
            </summary>
            <param name="direction">The movement direction.</param>
            <param name="from">The control from which movement begins.</param>
            <returns>The control.</returns>
        </member>
        <member name="T:Avalonia.Controls.Primitives.TabStripItem">
            <summary>
            Represents a tab in a <see cref="T:Avalonia.Controls.Primitives.TabStrip"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.TemplateAppliedEventArgs">
            <summary>
            Holds the details of the <see cref="E:Avalonia.Controls.Primitives.TemplatedControl.TemplateApplied"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplateAppliedEventArgs.#ctor(Avalonia.Controls.INameScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Primitives.TemplateAppliedEventArgs"/> class.
            </summary>
            <param name="nameScope">The applied template's name scope.</param>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplateAppliedEventArgs.NameScope">
            <summary>
            Gets the name scope of the applied template.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.AccessText">
            <summary>
            A text block that displays a character prefixed with an underscore as an access key.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.AccessText.ShowAccessKeyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.AccessText.ShowAccessKey"/> attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.AccessText._accessKeys">
            <summary>
            The access key handler for the current window.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Primitives.AccessText"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Primitives.AccessText"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.AccessText.AccessKey">
            <summary>
            Gets the access key.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.AccessText.ShowAccessKey">
            <summary>
            Gets or sets a value indicating whether the access key should be underlined.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.Render(Avalonia.Media.DrawingContext)">
            <summary>
            Renders the <see cref="T:Avalonia.Controls.Primitives.AccessText"/> to a drawing context.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.CreateFormattedText(Avalonia.Size)">
            <summary>
            Creates the <see cref="T:Avalonia.Media.FormattedText"/> used to render the text.
            </summary>
            <param name="constraint">The constraint of the text.</param>
            <returns>A <see cref="T:Avalonia.Media.FormattedText"/> object.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the control.
            </summary>
            <param name="availableSize">The available size for the control.</param>
            <returns>The desired size.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.StripAccessKey(System.String)">
            <summary>
            Returns a string with the first underscore stripped.
            </summary>
            <param name="text">The text.</param>
            <returns>The text with the first underscore stripped.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.AccessText.TextChanged(System.String)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.TextBlock.Text"/> property changes.
            </summary>
            <param name="text">The new text.</param>
        </member>
        <member name="T:Avalonia.Controls.Primitives.Popup">
            <summary>
            Displays a popup window.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.ChildProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.Child"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.IsOpenProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.IsOpen"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.PlacementModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementMode"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.HorizontalOffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.HorizontalOffset"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.VerticalOffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.VerticalOffset"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.PlacementTargetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementTarget"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.Popup.StaysOpenProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.Popup.StaysOpen"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Primitives.Popup"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.Popup.Closed">
            <summary>
            Raised when the popup closes.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.Popup.Opened">
            <summary>
            Raised when the popup opens.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.Popup.PopupRootCreated">
            <summary>
            Raised when the popup root has been created, but before it has been shown.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.Child">
            <summary>
            Gets or sets the control to display in the popup.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.DependencyResolver">
            <summary>
            Gets or sets a dependency resolver for the <see cref="P:Avalonia.Controls.Primitives.Popup.PopupRoot"/>.
            </summary>
            <remarks>
            This property allows a client to customize the behaviour of the popup by injecting
            a specialized dependency resolver into the <see cref="P:Avalonia.Controls.Primitives.Popup.PopupRoot"/>'s constructor.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.IsOpen">
            <summary>
            Gets or sets a value indicating whether the popup is currently open.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.PlacementMode">
            <summary>
            Gets or sets the placement mode of the popup in relation to the <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementTarget"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.HorizontalOffset">
            <summary>
            Gets or sets the Horizontal offset of the popup in relation to the <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementTarget"/>
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.VerticalOffset">
            <summary>
            Gets or sets the Vertical offset of the popup in relation to the <see cref="P:Avalonia.Controls.Primitives.Popup.PlacementTarget"/>
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.PlacementTarget">
            <summary>
            Gets or sets the control that is used to determine the popup's position.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.PopupRoot">
            <summary>
            Gets the root of the popup window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.StaysOpen">
            <summary>
            Gets or sets a value indicating whether the popup should stay open when the popup is
            pressed or loses focus.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.Popup.Avalonia#VisualTree#IVisualTreeHost#Root">
            <summary>
            Gets the root of the popup window.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.Open">
            <summary>
            Opens the popup.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.Close">
            <summary>
            Closes the popup.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.MeasureCore(Avalonia.Size)">
            <summary>
            Measures the control.
            </summary>
            <param name="availableSize">The available size for the control.</param>
            <returns>A size of 0,0 as Popup itself takes up no space.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.OnDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.IsOpenChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Primitives.Popup.IsOpen"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.ChildChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Primitives.Popup.Child"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.Popup.GetPosition">
            <summary>
            Gets the position for the popup based on the placement properties.
            </summary>
            <returns>The popup's position in screen coordinates.</returns>
        </member>
        <member name="T:Avalonia.Controls.Primitives.RangeBase">
            <summary>
            Base class for controls that display a value within a range.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.RangeBase.MinimumProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.RangeBase.Minimum"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.RangeBase.MaximumProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.RangeBase.Maximum"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.RangeBase.ValueProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.RangeBase.Value"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.RangeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Primitives.RangeBase"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.RangeBase.Minimum">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.RangeBase.Maximum">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.RangeBase.Value">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.RangeBase.ValidateDouble(System.Double,System.String)">
            <summary>
            Throws an exception if the double valus is NaN or Inf.
            </summary>
            <param name="value">The value.</param>
            <param name="property">The name of the property being set.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.RangeBase.ValidateMinimum(System.Double)">
            <summary>
            Validates the <see cref="P:Avalonia.Controls.Primitives.RangeBase.Minimum"/> property.
            </summary>
            <param name="value">The value.</param>
            <returns>The coerced value.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.RangeBase.ValidateMaximum(System.Double)">
            <summary>
            Validates/coerces the <see cref="P:Avalonia.Controls.Primitives.RangeBase.Maximum"/> property.
            </summary>
            <param name="value">The value.</param>
            <returns>The coerced value.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.RangeBase.ValidateValue(System.Double)">
            <summary>
            Validates/coerces the <see cref="P:Avalonia.Controls.Primitives.RangeBase.Value"/> property.
            </summary>
            <param name="value">The value.</param>
            <returns>The coerced value.</returns>
        </member>
        <member name="T:Avalonia.Controls.Primitives.HeaderedContentControl">
            <summary>
            A <see cref="T:Avalonia.Controls.ContentControl"/> with a header.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.HeaderedContentControl.HeaderProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.HeaderedContentControl.Header"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedContentControl.Header">
            <summary>
            Gets or sets the header content.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.HeaderedItemsControl">
            <summary>
            Represents an <see cref="T:Avalonia.Controls.ItemsControl"/> with a related header.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.HeaderedItemsControl.HeaderProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.HeaderedItemsControl.Header"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.HeaderedItemsControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ContentControl"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedItemsControl.Header">
            <summary>
            Gets or sets the content of the control's header.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.HeaderedItemsControl.HeaderPresenter">
            <summary>
            Gets the header presenter from the control's template.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.HeaderedItemsControl.OnTemplateApplied(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Primitives.PopupRoot">
            <summary>
            The root window of a <see cref="T:Avalonia.Controls.Primitives.Popup"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupRoot.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Primitives.PopupRoot"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupRoot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Primitives.PopupRoot"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupRoot.#ctor(Avalonia.IAvaloniaDependencyResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Primitives.PopupRoot"/> class.
            </summary>
            <param name="dependencyResolver">
            The dependency resolver to use. If null the default dependency resolver will be used.
            </param>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupRoot.PlatformImpl">
            <summary>
            Gets the platform-specific window implementation.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupRoot.Avalonia#Interactivity#IInteractive#InteractiveParent">
            <summary>
            Gets the parent control in the event route.
            </summary>
            <remarks>
            Popup events are passed to their parent window. This facilitates this.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Primitives.PopupRoot.Avalonia#VisualTree#IHostedVisualTreeRoot#Host">
            <summary>
            Gets the control that is hosting the popup root.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupRoot.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupRoot.Hide">
            <summary>
            Hides the popup.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupRoot.Show">
            <summary>
            Shows the popup.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.PopupRoot.OnTemplateApplied(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Primitives.SelectingItemsControl">
            <summary>
            An <see cref="T:Avalonia.Controls.ItemsControl"/> that maintains a selection.
            </summary>
            <remarks>
            <para>
            <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl"/> provides a base class for <see cref="T:Avalonia.Controls.ItemsControl"/>s
            that maintain a selection (single or multiple). By default only its 
            <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedIndex"/> and <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItem"/> properties are visible; the
            current multiple selection <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItems"/> together with the 
            <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionMode"/> properties are protected, however a derived  class can expose 
            these if it wishes to support multiple selection.
            </para>
            <para>
            <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl"/> maintains a selection respecting the current 
            <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionMode"/> but it does not react to user input; this must be handled in a
            derived class. It does, however, respond to <see cref="F:Avalonia.Controls.Primitives.SelectingItemsControl.IsSelectedChangedEvent"/> events
            from items and updates the selection accordingly.
            </para>
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.AutoScrollToSelectedItemProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.AutoScrollToSelectedItem"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedIndexProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedIndex"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItemProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItem"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItemsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItems"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionMode"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.IsSelectedChangedEvent">
            <summary>
            Event that should be raised by items that implement <see cref="T:Avalonia.Controls.ISelectable"/> to
            notify the parent <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl"/> that their selection state
            has changed.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionChangedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionChanged">
            <summary>
            Occurs when the control's selection changes.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.AutoScrollToSelectedItem">
            <summary>
            Gets or sets a value indicating whether to automatically scroll to newly selected items.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItems">
            <summary>
            Gets the selected items.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionMode">
            <summary>
            Gets or sets the selection mode.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.SelectingItemsControl.AlwaysSelected">
            <summary>
            Gets a value indicating whether <see cref="F:Avalonia.Controls.SelectionMode.AlwaysSelected"/> is set.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.BeginInit">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.EndInit">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the specified item into view.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.GetContainerFromEventSource(Avalonia.Interactivity.IInteractive)">
            <summary>
            Tries to get the container that was the source of an event.
            </summary>
            <param name="eventSource">The control that raised the event.</param>
            <returns>The container or null if the event did not originate in a container.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.ItemsChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.ItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.OnContainersMaterialized(Avalonia.Controls.Generators.ItemContainerEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.OnContainersDematerialized(Avalonia.Controls.Generators.ItemContainerEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.OnDataContextChanging">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.OnDataContextChanged">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.UpdateSelection(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the selection for an item based on user interaction.
            </summary>
            <param name="index">The index of the item.</param>
            <param name="select">Whether the item should be selected or unselected.</param>
            <param name="rangeModifier">Whether the range modifier is enabled (i.e. shift key).</param>
            <param name="toggleModifier">Whether the toggle modifier is enabled (i.e. ctrl key).</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.UpdateSelection(Avalonia.Controls.IControl,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the selection for a container based on user interaction.
            </summary>
            <param name="container">The container.</param>
            <param name="select">Whether the container should be selected or unselected.</param>
            <param name="rangeModifier">Whether the range modifier is enabled (i.e. shift key).</param>
            <param name="toggleModifier">Whether the toggle modifier is enabled (i.e. ctrl key).</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.UpdateSelectionFromEventSource(Avalonia.Interactivity.IInteractive,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the selection based on an event that may have originated in a container that 
            belongs to the control.
            </summary>
            <param name="eventSource">The control that raised the event.</param>
            <param name="select">Whether the container should be selected or unselected.</param>
            <param name="rangeModifier">Whether the range modifier is enabled (i.e. shift key).</param>
            <param name="toggleModifier">Whether the toggle modifier is enabled (i.e. ctrl key).</param>
            <returns>
            True if the event originated from a container that belongs to the control; otherwise
            false.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.GetRange(System.Collections.IEnumerable,System.Int32,System.Int32)">
            <summary>
            Gets a range of items from an IEnumerable.
            </summary>
            <param name="items">The items.</param>
            <param name="first">The index of the first item.</param>
            <param name="last">The index of the last item.</param>
            <returns>The items.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.SynchronizeItems(System.Collections.IList,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Makes a list of objects equal another.
            </summary>
            <param name="items">The items collection.</param>
            <param name="desired">The desired items.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.ContainerSelectionChanged(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when a container raises the <see cref="F:Avalonia.Controls.Primitives.SelectingItemsControl.IsSelectedChangedEvent"/>.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.LostSelection">
            <summary>
            Called when the currently selected item is lost and the selection must be changed
            depending on the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionMode"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.MarkContainerSelected(Avalonia.Controls.IControl,System.Boolean)">
            <summary>
            Sets a container's 'selected' class or <see cref="P:Avalonia.Controls.ISelectable.IsSelected"/>.
            </summary>
            <param name="container">The container.</param>
            <param name="selected">Whether the control is selected</param>
            <returns>The previous selection state.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.MarkItemSelected(System.Int32,System.Boolean)">
            <summary>
            Sets an item container's 'selected' class or <see cref="P:Avalonia.Controls.ISelectable.IsSelected"/>.
            </summary>
            <param name="index">The index of the item.</param>
            <param name="selected">Whether the item should be selected or deselected.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.MarkItemSelected(System.Object,System.Boolean)">
            <summary>
            Sets an item container's 'selected' class or <see cref="P:Avalonia.Controls.ISelectable.IsSelected"/>.
            </summary>
            <param name="item">The item.</param>
            <param name="selected">Whether the item should be selected or deselected.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItems"/> CollectionChanged event is raised.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItemsAdded(System.Collections.IList)">
            <summary>
            Called when items are added to the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItems"/> collection.
            </summary>
            <param name="items">The added items.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.SubscribeToSelectedItems">
            <summary>
            Subscribes to the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItems"/> CollectionChanged event, if any.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.SelectingItemsControl.UnsubscribeFromSelectedItems">
            <summary>
            Unsubscribes from the <see cref="P:Avalonia.Controls.Primitives.SelectingItemsControl.SelectedItems"/> CollectionChanged event, if any.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Primitives.ScrollBar">
            <summary>
            A scrollbar control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollBar.ViewportSizeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.ScrollBar.ViewportSize"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollBar.VisibilityProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.ScrollBar.Visibility"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.ScrollBar.OrientationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.ScrollBar.Orientation"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ScrollBar.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Primitives.ScrollBar"/> class. 
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ScrollBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Primitives.ScrollBar"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ScrollBar.ViewportSize">
            <summary>
            Gets or sets the amount of the scrollable content that is currently visible.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ScrollBar.Visibility">
            <summary>
            Gets or sets a value that indicates whether the scrollbar should hide itself when it
            is not needed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.ScrollBar.Orientation">
            <summary>
            Gets or sets the orientation of the scrollbar.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.ScrollBar.CalculateIsVisible">
            <summary>
            Calculates whether the scrollbar should be visible.
            </summary>
            <returns>The scrollbar's visibility.</returns>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TabStrip.OnGotFocus(Avalonia.Input.GotFocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TabStrip.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Primitives.TemplatedControl">
            <summary>
            A lookless control whose visual appearance is defined by its <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.Template"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.BackgroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.Background"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.BorderBrushProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.BorderBrush"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.BorderThicknessProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.BorderThickness"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.FontFamilyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.FontFamily"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.FontSizeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.FontSize"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.FontStyleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.FontStyle"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.FontWeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.FontWeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.ForegroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.Foreground"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.PaddingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.Padding"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.TemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.Template"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.IsTemplateFocusTargetProperty">
            <summary>
            Defines the IsTemplateFocusTarget attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Primitives.TemplatedControl.TemplateAppliedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Primitives.TemplatedControl.TemplateApplied"/> routed event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Primitives.TemplatedControl"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Primitives.TemplatedControl.TemplateApplied">
            <summary>
            Raised when the control's template is applied.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.Background">
            <summary>
            Gets or sets the brush used to draw the control's background.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.BorderBrush">
            <summary>
            Gets or sets the brush used to draw the control's border.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.BorderThickness">
            <summary>
            Gets or sets the thickness of the control's border.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.FontFamily">
            <summary>
            Gets or sets the font family used to draw the control's text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.FontSize">
            <summary>
            Gets or sets the size of the control's text in points.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.FontStyle">
            <summary>
            Gets or sets the font style used to draw the control's text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.FontWeight">
            <summary>
            Gets or sets the font weight used to draw the control's text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.Foreground">
            <summary>
            Gets or sets the brush used to draw the control's text and other foreground elements.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.Padding">
            <summary>
            Gets or sets the padding placed between the border of the control and its content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Primitives.TemplatedControl.Template">
            <summary>
            Gets or sets the template that defines the control's appearance.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.GetIsTemplateFocusTarget(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the IsTemplateFocusTargetProperty attached property on a control.
            </summary>
            <param name="control">The control.</param>
            <returns>The property value.</returns>
            <see cref="M:Avalonia.Controls.Primitives.TemplatedControl.SetIsTemplateFocusTarget(Avalonia.Controls.Control,System.Boolean)"/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.SetIsTemplateFocusTarget(Avalonia.Controls.Control,System.Boolean)">
            <summary>
            Sets the value of the IsTemplateFocusTargetProperty attached property on a control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The property value.</param>
            <remarks>
            When a control is navigated to using the keyboard, a focus adorner is shown - usually
            around the control itself. However if the TemplatedControl.IsTemplateFocusTarget 
            attached property is set to true on an element in the control template, then the focus
            adorner will be shown around that control instead.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.ApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.GetTemplateFocusTarget">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.OnDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.OnTemplateApplied(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <summary>
            Called when the control's template is applied.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.OnTemplateChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.Template"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Primitives.TemplatedControl.RegisterNames(Avalonia.Controls.IControl,Avalonia.Controls.INameScope)">
            <summary>
            Registers each control with its name scope.
            </summary>
            <param name="control">The control.</param>
            <param name="nameScope">The name scope.</param>
        </member>
        <member name="T:Avalonia.Controls.WindowIcon">
            <summary>
            Represents an icon for a window.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.IPseudoClasses">
            <summary>
            Exposes an interface for setting pseudoclasses on a <see cref="T:Avalonia.Controls.Classes"/> collection.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IPseudoClasses.Add(System.String)">
            <summary>
            Adds a pseudoclass to the collection.
            </summary>
            <param name="name">The pseudoclass name.</param>
        </member>
        <member name="M:Avalonia.Controls.IPseudoClasses.Remove(System.String)">
            <summary>
            Removes a pseudoclass from the collection.
            </summary>
            <param name="name">The pseudoclass name.</param>
        </member>
        <member name="T:Avalonia.Controls.DropDownItem">
            <summary>
            A selectable item in a <see cref="T:Avalonia.Controls.DropDown"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ISetInheritanceParent">
            <summary>
            Defines an interface through which a <see cref="T:Avalonia.Controls.Control"/>'s inheritance parent can be set.
            </summary>
            <remarks>
            You should not usually need to use this interface - it is for advanced scenarios only.
            Additionally, <see cref="T:Avalonia.Controls.ISetLogicalParent"/> also sets the inheritance parent; this
            interface is only needed where the logical and inheritance parents differ.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.ISetInheritanceParent.SetParent(Avalonia.IAvaloniaObject)">
            <summary>
            Sets the control's inheritance parent.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="T:Avalonia.Controls.ItemVirtualizationMode">
            <summary>
            Describes the item virtualization method to use for a list.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemVirtualizationMode.None">
            <summary>
            Do not virtualize items.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemVirtualizationMode.Simple">
            <summary>
            Virtualize items without smooth scrolling.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.IVirtualizingController">
            <summary>
            Interface implemented by controls that act as controllers for an
            <see cref="T:Avalonia.Controls.IVirtualizingPanel"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.IVirtualizingController.UpdateControls">
            <summary>
            Called when the <see cref="T:Avalonia.Controls.IVirtualizingPanel"/>'s controls should be updated.
            </summary>
            <remarks>
            The controller should respond to this method being called by either adding
            children up until <see cref="P:Avalonia.Controls.IVirtualizingPanel.IsFull"/> becomes true or
            removing <see cref="P:Avalonia.Controls.IVirtualizingPanel.OverflowCount"/> controls.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.IVirtualizingPanel">
            <summary>
            A panel that can be used to virtualize items.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IVirtualizingPanel.Controller">
            <summary>
            Gets or sets the controller for the virtualizing panel.
            </summary>
            <remarks>
            A virtualizing controller is responsible for maintaing the controls in the virtualizing
            panel. This property will be set by the controller when virtualization is initialized.
            Note that this property may remain null if the panel is added to a control that does
            not act as a virtualizing controller.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.IVirtualizingPanel.IsFull">
            <summary>
            Gets a value indicating whether the panel is full.
            </summary>
            <remarks>
            This property should return false until enough children are added to fill the space
            passed into the last measure in the direction of scroll. It should be updated
            immediately after a child is added or removed.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.IVirtualizingPanel.OverflowCount">
            <summary>
            Gets the number of items that can be removed while keeping the panel full.
            </summary>
            <remarks>
            This property should return the number of children that are completely out of the
            panel's current bounds in the direction of scroll. It should be updated after an
            arrange.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.IVirtualizingPanel.ScrollDirection">
            <summary>
            Gets the direction of scroll.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IVirtualizingPanel.AverageItemSize">
            <summary>
            Gets the average size of the materialized items in the direction of scroll.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IVirtualizingPanel.PixelOverflow">
            <summary>
            Gets or sets a size in pixels by which the content is overflowing the panel, in the
            direction of scroll.
            </summary>
            <remarks>
            This may be non-zero even when <see cref="P:Avalonia.Controls.IVirtualizingPanel.OverflowCount"/> is zero if the last item
            overflows the panel bounds.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.IVirtualizingPanel.PixelOffset">
            <summary>
            Gets or sets the current pixel offset of the items in the direction of scroll.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.LayoutTransformControl.ArrangeOverride(Avalonia.Size)">
            <summary>
            Provides the behavior for the "Arrange" pass of layout.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Avalonia.Controls.LayoutTransformControl.MeasureOverride(Avalonia.Size)">
            <summary>
            Provides the behavior for the "Measure" pass of layout.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:Avalonia.Controls.LayoutTransformControl.OnTemplateApplied(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <summary>
            Builds the visual tree for the LayoutTransformerControl when a new
            template is applied.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.LayoutTransformControl.AcceptableDelta">
            <summary>
            Acceptable difference between two doubles.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.LayoutTransformControl.DecimalsAfterRound">
            <summary>
            Number of decimals to round the Matrix to.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.LayoutTransformControl._childActualSize">
            <summary>
            Actual DesiredSize of Child element (the value it returned from its MeasureOverride method).
            </summary>
        </member>
        <member name="F:Avalonia.Controls.LayoutTransformControl._matrixTransform">
            <summary>
            RenderTransform/MatrixTransform applied to TransformRoot.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.LayoutTransformControl._transformation">
            <summary>
            Transformation matrix corresponding to _matrixTransform.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.LayoutTransformControl.IsSizeSmaller(Avalonia.Size,Avalonia.Size)">
            <summary>
            Returns true if Size a is smaller than Size b in either dimension.
            </summary>
            <param name="a">Second Size.</param>
            <param name="b">First Size.</param>
            <returns>True if Size a is smaller than Size b in either dimension.</returns>
        </member>
        <member name="M:Avalonia.Controls.LayoutTransformControl.RoundMatrix(Avalonia.Matrix,System.Int32)">
            <summary>
            Rounds the non-offset elements of a Matrix to avoid issues due to floating point imprecision.
            </summary>
            <param name="matrix">Matrix to round.</param>
            <param name="decimals">Number of decimal places to round to.</param>
            <returns>Rounded Matrix.</returns>
        </member>
        <member name="M:Avalonia.Controls.LayoutTransformControl.ApplyLayoutTransform">
            <summary>
            Applies the layout transform on the LayoutTransformerControl content.
            </summary>
            <remarks>
            Only used in advanced scenarios (like animating the LayoutTransform).
            Should be used to notify the LayoutTransformer control that some aspect
            of its Transform property has changed.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.LayoutTransformControl.ComputeLargestTransformedSize(Avalonia.Size)">
            <summary>
            Compute the largest usable size (greatest area) after applying the transformation to the specified bounds.
            </summary>
            <param name="arrangeBounds">Arrange bounds.</param>
            <returns>Largest Size possible.</returns>
        </member>
        <member name="T:Avalonia.Controls.Mixins.ContentControlMixin">
            <summary>
            Adds content control functionality to control classes.
            </summary>
            <para>
            The <see cref="T:Avalonia.Controls.Mixins.ContentControlMixin"/> adds behavior to a control which acts as a content
            control such as <see cref="T:Avalonia.Controls.ContentControl"/> and <see cref="T:Avalonia.Controls.Primitives.HeaderedItemsControl"/>. It
            updates keeps the control's logical children in sync with the content being displayed by
            the control.
            </para>
        </member>
        <member name="M:Avalonia.Controls.Mixins.ContentControlMixin.Attach``1(Avalonia.AvaloniaProperty,System.Func{``0,Avalonia.Collections.IAvaloniaList{Avalonia.LogicalTree.ILogical}},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Mixins.SelectableMixin"/> class.
            </summary>
            <typeparam name="TControl">The control type.</typeparam>
            <param name="content">The content property.</param>
            <param name="logicalChildrenSelector">
            Given an control of <typeparamref name="TControl"/> should return the control's
            logical children collection.
            </param>
            <param name="presenterName">
            The name of the content presenter in the control's template.
            </param>
        </member>
        <member name="T:Avalonia.Controls.Mixins.SelectableMixin">
            <summary>
            Adds selectable functionality to control classes.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Avalonia.Controls.Mixins.SelectableMixin"/> adds behavior to a control which can be
            selected. It adds the following behavior:
            </para>
            <list type="bullet">
            <item>
            Raises an <see cref="F:Avalonia.Controls.Primitives.SelectingItemsControl.IsSelectedChangedEvent"/> when the value if
            the IsSelected property changes.
            </item>
            <item>
            Adds a 'selected' class to selected controls.
            </item>
            <item>
            Requests that the control is scrolled into view when focused.
            </item>
            </list>
            <para>
            Mixins apply themselves to classes and not instances, and as such should be created in
            a static constructor.
            </para>
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Mixins.SelectableMixin.Attach``1(Avalonia.AvaloniaProperty{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Mixins.SelectableMixin"/> class.
            </summary>
            <typeparam name="TControl">The control type.</typeparam>
            <param name="isSelected">The IsSelected property.</param>
        </member>
        <member name="T:Avalonia.Controls.Platform.ISystemDialogImpl">
            <summary>
            Defines a platform-specific system dialog implementation.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Platform.ISystemDialogImpl.ShowFileDialogAsync(Avalonia.Controls.FileDialog,Avalonia.Platform.IWindowImpl)">
            <summary>
            Shows a file dialog.
            </summary>
            <param name="dialog">The details of the file dialog to show.</param>
            <param name="parent">The parent window.</param>
            <returns>A task returning the selected filenames.</returns>
        </member>
        <member name="T:Avalonia.Controls.Presenters.IContentPresenterHost">
            <summary>
            Represents a control which hosts a content presenter.
            </summary>
            <remarks>
            This interface is implemented by <see cref="T:Avalonia.Controls.ContentControl"/> which usually contains a
            <see cref="T:Avalonia.Controls.Presenters.ContentPresenter"/> and exposes it through its 
            <see cref="P:Avalonia.Controls.ContentControl.Presenter"/> property. ContentPresenters can be within
            nested templates or in popups and so are not necessarily created immediately when the
            parent control's template is instantiated so they register themselves using this 
            interface.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Presenters.IContentPresenterHost.RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter)">
            <summary>
            Registers an <see cref="T:Avalonia.Controls.Presenters.IContentPresenter"/> with a host control.
            </summary>
            <param name="presenter">The content presenter.</param>
        </member>
        <member name="T:Avalonia.Controls.Presenters.IItemsPresenterHost">
            <summary>
            Represents a control which hosts an items presenter.
            </summary>
            <remarks>
            This interface is implemented by <see cref="T:Avalonia.Controls.ItemsControl"/> which usually contains an
            <see cref="T:Avalonia.Controls.Presenters.ItemsPresenter"/> and exposes it through its 
            <see cref="P:Avalonia.Controls.ItemsControl.Presenter"/> property. ItemsPresenters can be within
            nested templates or in popups and so are not necessarily created immediately when the
            parent control's template is instantiated so they register themselves using this 
            interface.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Presenters.IItemsPresenterHost.RegisterItemsPresenter(Avalonia.Controls.Presenters.IItemsPresenter)">
            <summary>
            Registers an <see cref="T:Avalonia.Controls.Presenters.IItemsPresenter"/> with a host control.
            </summary>
            <param name="presenter">The items presenter.</param>
        </member>
        <member name="T:Avalonia.Controls.Presenters.ItemsPresenterBase">
            <summary>
            Base class for controls that present items inside an <see cref="T:Avalonia.Controls.ItemsControl"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ItemsPresenterBase.ItemsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.Items"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ItemsPresenterBase.ItemsPanelProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.ItemsPanel"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ItemsPresenterBase.ItemTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.ItemTemplate"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ItemsPresenterBase.MemberSelectorProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.MemberSelector"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenterBase.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Presenters.ItemsPresenter"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenterBase.Items">
            <summary>
            Gets or sets the items to be displayed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenterBase.ItemContainerGenerator">
            <summary>
            Gets the item container generator.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenterBase.ItemsPanel">
            <summary>
            Gets or sets a template which creates the <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.Panel"/> used to display the items.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenterBase.ItemTemplate">
            <summary>
            Gets or sets the data template used to display the items in the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenterBase.MemberSelector">
            <summary>
            Selects a member from <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.Items"/> to use as the list item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenterBase.Panel">
            <summary>
            Gets the panel used to display the items.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenterBase.ApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenterBase.ScrollIntoView(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenterBase.CreateItemContainerGenerator">
            <summary>
            Creates the <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.ItemContainerGenerator"/> for the control.
            </summary>
            <returns>
            An <see cref="T:Avalonia.Controls.Generators.IItemContainerGenerator"/> or null.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenterBase.MeasureOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenterBase.ArrangeOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenterBase.PanelCreated(Avalonia.Controls.IPanel)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.Panel"/> is created.
            </summary>
            <param name="panel">The panel.</param>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenterBase.ItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the items for the presenter change, either because <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.Items"/>
            has been set, the items collection has been modified, or the panel has been created.
            </summary>
            <param name="e">A description of the change.</param>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenterBase.CreatePanel">
            <summary>
            Creates the <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.Panel"/> when <see cref="M:Avalonia.Controls.Presenters.ItemsPresenterBase.ApplyTemplate"/> is called for the first
            time.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenterBase.ItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.Items"/> collection changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.Presenters.ItemVirtualizerNone">
            <summary>
            Represents an item virtualizer for an <see cref="T:Avalonia.Controls.Presenters.ItemsPresenter"/> that doesn't actually
            virtualize items - it just creates a container for every item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizerNone.IsLogicalScrollEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizerNone.ExtentValue">
            <summary>
            This property should never be accessed because <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizerNone.IsLogicalScrollEnabled"/> is
            false.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizerNone.OffsetValue">
            <summary>
            This property should never be accessed because <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizerNone.IsLogicalScrollEnabled"/> is
            false.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizerNone.ViewportValue">
            <summary>
            This property should never be accessed because <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizerNone.IsLogicalScrollEnabled"/> is
            false.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerNone.ItemsChanged(System.Collections.IEnumerable,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerNone.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the specified item into view.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:Avalonia.Controls.Presenters.ItemVirtualizerSimple">
            <summary>
            Handles virtualization in an <see cref="T:Avalonia.Controls.Presenters.ItemsPresenter"/> for
            <see cref="F:Avalonia.Controls.ItemVirtualizationMode.Simple"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.#ctor(Avalonia.Controls.Presenters.ItemsPresenter)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Presenters.ItemVirtualizerSimple"/> class.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizerSimple.IsLogicalScrollEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizerSimple.ExtentValue">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizerSimple.OffsetValue">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizerSimple.ViewportValue">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.UpdateControls">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.ItemsChanged(System.Collections.IEnumerable,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.ScrollIntoView(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.CreateAndRemoveContainers">
            <summary>
            Creates and removes containers such that we have at most enough containers to fill
            the panel.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.RecycleContainers">
            <summary>
            Updates the containers in the panel to make sure they are displaying the correct item
            based on <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizer.FirstIndex"/>.
            </summary>
            <remarks>
            This method requires that <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizer.FirstIndex"/> + the number of
            materialized containers is not more than <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizer.ItemCount"/>.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.RecycleContainersForMove(System.Int32)">
            <summary>
            Recycles containers when a move occurs.
            </summary>
            <param name="delta">The delta of the move.</param>
            <remarks>
            If the move is less than a page, then this method moves the containers for the items
            that are still visible to the correct place, and recyles and moves the others. For
            example: if there are 20 items and 10 containers visible and the user scrolls 5
            items down, then the bottom 5 containers will be moved to the top and the top 5 will
            be moved to the bottom and recycled to display the newly visible item. Updates 
            <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizer.FirstIndex"/> and <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizer.NextIndex"/>
            with their new values.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.RecycleContainersOnRemove">
            <summary>
            Recycles containers due to items being removed.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.RemoveContainers(System.Int32)">
            <summary>
            Removes the specified number of containers from the end of the panel and updates
            <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizer.NextIndex"/>.
            </summary>
            <param name="count">The number of containers to remove.</param>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.ScrollIntoView(System.Int32)">
            <summary>
            Scrolls the item with the specified index into view.
            </summary>
            <param name="index">The item index.</param>
            <returns>The container that was brought into view.</returns>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizerSimple.CoerceOffset(System.Double)">
            <summary>
            Ensures an offset value is within the value range.
            </summary>
            <param name="value">The value.</param>
            <returns>The coerced value.</returns>
        </member>
        <member name="T:Avalonia.Controls.Presenters.ItemVirtualizer">
            <summary>
            Base class for classes which handle virtualization for an <see cref="T:Avalonia.Controls.Presenters.ItemsPresenter"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizer.#ctor(Avalonia.Controls.Presenters.ItemsPresenter)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Presenters.ItemVirtualizer"/> class.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.Owner">
            <summary>
            Gets the <see cref="T:Avalonia.Controls.Presenters.ItemsPresenter"/> which owns the virtualizer.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.VirtualizingPanel">
            <summary>
            Gets the <see cref="T:Avalonia.Controls.IVirtualizingPanel"/> which will host the items.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.Items">
            <summary>
            Gets the items to display.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.ItemCount">
            <summary>
            Gets the number of items in <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizer.Items"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.FirstIndex">
            <summary>
            Gets or sets the index of the first item displayed in the panel.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.NextIndex">
            <summary>
            Gets or sets the index of the first item beyond those displayed in the panel.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.Vertical">
            <summary>
            Gets a value indicating whether the items should be scroll horizontally or vertically.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.IsLogicalScrollEnabled">
            <summary>
            Gets a value indicating whether logical scrolling is enabled.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.ExtentValue">
            <summary>
            Gets the value of the scroll extent.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.OffsetValue">
            <summary>
            Gets or sets the value of the current scroll offset.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.ViewportValue">
            <summary>
            Gets the value of the scrollable viewport.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.Extent">
            <summary>
            Gets the <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizer.ExtentValue"/> as a <see cref="T:Avalonia.Size"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.Viewport">
            <summary>
            Gets the <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizer.ViewportValue"/> as a <see cref="T:Avalonia.Size"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemVirtualizer.Offset">
            <summary>
            Gets or sets the <see cref="P:Avalonia.Controls.Presenters.ItemVirtualizer.OffsetValue"/> as a <see cref="T:Avalonia.Vector"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizer.Create(Avalonia.Controls.Presenters.ItemsPresenter)">
            <summary>
            Creates an <see cref="T:Avalonia.Controls.Presenters.ItemVirtualizer"/> based on an item presenter's 
            <see cref="T:Avalonia.Controls.ItemVirtualizationMode"/>.
            </summary>
            <param name="owner">The items presenter.</param>
            <returns>An <see cref="T:Avalonia.Controls.Presenters.ItemVirtualizer"/>.</returns>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizer.UpdateControls">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizer.GetControlInDirection(Avalonia.Input.NavigationDirection,Avalonia.Controls.IControl)">
            <summary>
            Gets the next control in the specified direction.
            </summary>
            <param name="direction">The movement direction.</param>
            <param name="from">The control from which movement begins.</param>
            <returns>The control.</returns>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizer.ItemsChanged(System.Collections.IEnumerable,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the items for the presenter change, either because 
            <see cref="P:Avalonia.Controls.Presenters.ItemsPresenterBase.Items"/> has been set, the items collection has been
            modified, or the panel has been created.
            </summary>
            <param name="items">The items.</param>
            <param name="e">A description of the change.</param>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizer.ScrollIntoView(System.Object)">
            <summary>
            Scrolls the specified item into view.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizer.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemVirtualizer.InvalidateScroll">
            <summary>
            Invalidates the current scroll.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Presenters.IContentPresenter">
            <summary>
            Interface for controls that present a single item of data inside a
            <see cref="T:Avalonia.Controls.Primitives.TemplatedControl"/> template.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.IContentPresenter.Child">
            <summary>
            Gets the control displayed by the presenter.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.IContentPresenter.Content">
            <summary>
            Gets or sets the content to be displayed by the presenter.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Presenters.IPresenter">
            <summary>
            Interface for presenters such as <see cref="T:Avalonia.Controls.Presenters.ContentPresenter"/> and
            <see cref="T:Avalonia.Controls.Presenters.ItemsPresenter"/>.
            </summary>
            <remarks>
            A presenter is the gateway between a templated control and its content. When
            a control which implements <see cref="T:Avalonia.Controls.Presenters.IPresenter"/> is found in the template
            of a <see cref="T:Avalonia.Controls.Primitives.TemplatedControl"/> then that signals that the visual child
            of the presenter is not a part of the template.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.Presenters.CarouselPresenter">
            <summary>
            Displays pages inside an <see cref="T:Avalonia.Controls.ItemsControl"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.CarouselPresenter.IsVirtualizedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.CarouselPresenter.IsVirtualized"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.CarouselPresenter.SelectedIndexProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.CarouselPresenter.SelectedIndex"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.CarouselPresenter.TransitionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.CarouselPresenter.Transition"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.CarouselPresenter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Presenters.CarouselPresenter"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.CarouselPresenter.IsVirtualized">
            <summary>
            Gets or sets a value indicating whether the items in the carousel are virtualized.
            </summary>
            <remarks>
            When the carousel is virtualized, only the active page is held in memory.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Presenters.CarouselPresenter.SelectedIndex">
            <summary>
            Gets or sets the index of the selected page.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.CarouselPresenter.Transition">
            <summary>
            Gets or sets a transition to use when switching pages.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.CarouselPresenter.PanelCreated(Avalonia.Controls.IPanel)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.CarouselPresenter.ItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.CarouselPresenter.MoveToPage(System.Int32,System.Int32)">
            <summary>
            Moves to the selected page, animating if a <see cref="P:Avalonia.Controls.Presenters.CarouselPresenter.Transition"/> is set.
            </summary>
            <param name="fromIndex">The index of the old page.</param>
            <param name="toIndex">The index of the new page.</param>
            <returns>A task tracking the animation.</returns>
        </member>
        <member name="M:Avalonia.Controls.Presenters.CarouselPresenter.SelectedIndexChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Presenters.CarouselPresenter.SelectedIndex"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.Presenters.ScrollContentPresenter">
            <summary>
            Presents a scrolling view of content inside a <see cref="T:Avalonia.Controls.ScrollViewer"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ScrollContentPresenter.ExtentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ScrollContentPresenter.Extent"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ScrollContentPresenter.OffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ScrollContentPresenter.Offset"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ScrollContentPresenter.ViewportProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ScrollContentPresenter.Viewport"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ScrollContentPresenter.CanScrollHorizontallyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ScrollContentPresenter.CanScrollHorizontally"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ScrollContentPresenter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Presenters.ScrollContentPresenter"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ScrollContentPresenter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Presenters.ScrollContentPresenter"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ScrollContentPresenter.Extent">
            <summary>
            Gets the extent of the scrollable content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ScrollContentPresenter.Offset">
            <summary>
            Gets or sets the current scroll offset.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ScrollContentPresenter.Viewport">
            <summary>
            Gets the size of the viewport on the scrollable content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ScrollContentPresenter.CanScrollHorizontally">
            <summary>
            Gets a value indicating whether the content can be scrolled horizontally.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ScrollContentPresenter.BringDescendentIntoView(Avalonia.VisualTree.IVisual,Avalonia.Rect)">
            <summary>
            Attempts to bring a portion of the target visual into view by scrolling the content.
            </summary>
            <param name="target">The target visual.</param>
            <param name="targetRect">The portion of the target visual to bring into view.</param>
            <returns>True if the scroll offset was changed; otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ScrollContentPresenter.MeasureOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ScrollContentPresenter.ArrangeOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ScrollContentPresenter.OnPointerWheelChanged(Avalonia.Input.PointerWheelEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Presenters.ContentPresenter">
            <summary>
            Presents a single item of data inside a <see cref="T:Avalonia.Controls.Primitives.TemplatedControl"/> template.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.BackgroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Background"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.BorderBrushProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.BorderBrush"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.BorderThicknessProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.BorderThickness"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.ChildProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Child"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.ContentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Content"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.ContentTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.ContentTemplate"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.CornerRadiusProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.CornerRadius"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ContentPresenter.PaddingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Padding"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Presenters.ContentPresenter"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Presenters.ContentPresenter"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.Background">
            <summary>
            Gets or sets a brush with which to paint the background.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.BorderBrush">
            <summary>
            Gets or sets a brush with which to paint the border.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.BorderThickness">
            <summary>
            Gets or sets the thickness of the border.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.Child">
            <summary>
            Gets the control displayed by the presenter.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.Content">
            <summary>
            Gets or sets the content to be displayed by the presenter.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.ContentTemplate">
            <summary>
            Gets or sets the data template used to display the content of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.CornerRadius">
            <summary>
            Gets or sets the radius of the border rounded corners.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.HorizontalContentAlignment">
            <summary>
            Gets or sets the horizontal alignment of the content within the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.VerticalContentAlignment">
            <summary>
            Gets or sets the vertical alignment of the content within the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ContentPresenter.Padding">
            <summary>
            Gets or sets the padding to place around the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Child"/> control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.ApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.UpdateChild">
            <summary>
            Updates the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Child"/> control based on the control's <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Content"/>.
            </summary>
            <remarks>
            Usually the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Child"/> control is created automatically when 
            <see cref="M:Avalonia.Controls.Presenters.ContentPresenter.ApplyTemplate"/> is called; however for this to happen, the control needs to
            be attached to a logical tree (if the control is not attached to the logical tree, it
            is reasonable to expect that the DataTemplates needed for the child are not yet 
            available). This method forces the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Child"/> control's creation at any point, 
            and is particularly useful in unit tests.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.Render(Avalonia.Media.DrawingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.CreateChild">
            <summary>
            Creates the child control.
            </summary>
            <returns>The child control or null.</returns>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.MeasureOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.ArrangeOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ContentPresenter.ContentChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Presenters.ContentPresenter.Content"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.Presenters.ItemsPresenter">
            <summary>
            Displays items inside an <see cref="T:Avalonia.Controls.ItemsControl"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Presenters.ItemsPresenter.VirtualizationModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Presenters.ItemsPresenter.VirtualizationMode"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Presenters.ItemsPresenter"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenter.VirtualizationMode">
            <summary>
            Gets or sets the virtualization mode for the items.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenter.Avalonia#Controls#Primitives#ILogicalScrollable#IsLogicalScrollEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenter.Avalonia#Controls#Primitives#IScrollable#Extent">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenter.Avalonia#Controls#Primitives#IScrollable#Offset">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenter.Avalonia#Controls#Primitives#IScrollable#Viewport">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenter.Avalonia#Controls#Primitives#ILogicalScrollable#InvalidateScroll">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenter.Avalonia#Controls#Primitives#ILogicalScrollable#ScrollSize">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Presenters.ItemsPresenter.Avalonia#Controls#Primitives#ILogicalScrollable#PageScrollSize">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenter.Avalonia#Controls#Primitives#ILogicalScrollable#BringIntoView(Avalonia.Controls.IControl,Avalonia.Rect)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenter.Avalonia#Controls#Primitives#ILogicalScrollable#GetControlInDirection(Avalonia.Input.NavigationDirection,Avalonia.Controls.IControl)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Presenters.ItemsPresenter.PanelCreated(Avalonia.Controls.IPanel)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.SelectionChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Avalonia.Controls.Primitives.SelectingItemsControl.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.SelectionChangedEventArgs.#ctor(Avalonia.Interactivity.RoutedEvent,System.Collections.IList,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.SelectionChangedEventArgs"/> class.
            </summary>
            <param name="routedEvent">The event being raised.</param>
            <param name="addedItems">The items added to the selection.</param>
            <param name="removedItems">The items removed from the selection.</param>
        </member>
        <member name="P:Avalonia.Controls.SelectionChangedEventArgs.AddedItems">
            <summary>
            Gets the items that were added to the selection.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.SelectionChangedEventArgs.RemovedItems">
            <summary>
            Gets the items that were removed from the selection.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.SelectionMode">
            <summary>
            Defines the selection mode for a control which can select multiple items.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SelectionMode.Single">
            <summary>
            One item can be selected.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SelectionMode.Multiple">
            <summary>
            Multiple items can be selected.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SelectionMode.Toggle">
            <summary>
            Item selection can be toggled by tapping/spacebar.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SelectionMode.AlwaysSelected">
            <summary>
            An item will always be selected as long as there are items to select.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Separator">
            <summary>
            A separator control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Shapes.Shape.AffectsGeometry``1(Avalonia.AvaloniaProperty[])">
            <summary>
            Marks a property as affecting the shape's geometry.
            </summary>
            <param name="properties">The properties.</param>
            <remarks>
            After a call to this method in a control's static constructor, any change to the
            property will cause <see cref="M:Avalonia.Controls.Shapes.Shape.InvalidateGeometry"/> to be called on the element.
            </remarks>
        </member>
        <member name="T:Avalonia.Controls.Slider">
            <summary>
            A control that lets the user select from a range of values by moving a Thumb control along a Track.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Slider.OrientationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Slider.Orientation"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Slider.IsSnapToTickEnabledProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Slider.IsSnapToTickEnabled"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Slider.TickFrequencyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Slider.TickFrequency"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Slider.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Slider"/> class. 
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Slider.#ctor">
            <summary>
            Instantiates a new instance of the <see cref="T:Avalonia.Controls.Slider"/> class. 
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Slider.Orientation">
            <summary>
            Gets or sets the orientation of a <see cref="T:Avalonia.Controls.Slider"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Slider.IsSnapToTickEnabled">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:Avalonia.Controls.Slider"/> automatically moves the <see cref="T:Avalonia.Controls.Primitives.Thumb"/> to the closest tick mark.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Slider.TickFrequency">
            <summary>
            Gets or sets the interval between tick marks.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Slider.OnTemplateApplied(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Slider.OnThumbDragStarted(Avalonia.Input.VectorEventArgs)">
            <summary>
            Called when user start dragging the <see cref="T:Avalonia.Controls.Primitives.Thumb"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Avalonia.Controls.Slider.OnThumbDragDelta(Avalonia.Input.VectorEventArgs)">
            <summary>
            Called when user dragging the <see cref="T:Avalonia.Controls.Primitives.Thumb"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Avalonia.Controls.Slider.OnThumbDragCompleted(Avalonia.Input.VectorEventArgs)">
            <summary>
            Called when user stop dragging the <see cref="T:Avalonia.Controls.Primitives.Thumb"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Avalonia.Controls.Slider.MoveToNextTick(System.Double)">
            <summary>
            Searches for the closest tick and sets Value to that tick.
            </summary>
            <param name="value">Value that want to snap to closest Tick.</param>
        </member>
        <member name="M:Avalonia.Controls.Slider.SnapToTick(System.Double)">
            <summary>
            Snap the input 'value' to the closest tick.
            </summary>
            <param name="value">Value that want to snap to closest Tick.</param>
        </member>
        <member name="T:Avalonia.Controls.IContentControl">
            <summary>
            Defines a control that displays <see cref="P:Avalonia.Controls.IContentControl.Content"/> according to a
            <see cref="T:Avalonia.Controls.Templates.FuncDataTemplate"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IContentControl.Content">
            <summary>
            Gets or sets the content to display.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IContentControl.ContentTemplate">
            <summary>
            Gets or sets the data template used to display the content of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IContentControl.HorizontalContentAlignment">
            <summary>
            Gets or sets the horizontal alignment of the content within the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IContentControl.VerticalContentAlignment">
            <summary>
            Gets or sets the vertical alignment of the content within the control.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.IControl">
            <summary>
            Interface for Avalonia controls.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.IControl.Initialized">
            <summary>
            Occurs when the control has finished initialization.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IControl.Classes">
            <summary>
            Gets or sets the control's styling classes.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IControl.DataContext">
            <summary>
            Gets or sets the control's data context.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IControl.DataTemplates">
            <summary>
            Gets the data templates for the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IControl.IsInitialized">
            <summary>
            Gets a value that indicates whether the element has finished initialization.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IControl.Parent">
            <summary>
            Gets the control's logical parent.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.IPanel">
            <summary>
            Interface for controls that can contain multiple children.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IPanel.Children">
            <summary>
            Gets or sets the children of the <see cref="T:Avalonia.Controls.Panel"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ISetLogicalParent">
            <summary>
            Defines an interface through which a <see cref="T:Avalonia.Controls.Control"/>'s logical parent can be set.
            </summary>
            <remarks>
            You should not usually need to use this interface - it is for advanced scenarios only.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.ISetLogicalParent.SetParent(Avalonia.LogicalTree.ILogical)">
            <summary>
            Sets the control's parent.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="T:Avalonia.Controls.MenuItemAccessKeyHandler">
            <summary>
            Handles access keys within a <see cref="T:Avalonia.Controls.MenuItem"/>
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItemAccessKeyHandler._registered">
            <summary>
            The registered access keys.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItemAccessKeyHandler._owner">
            <summary>
            The window to which the handler belongs.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItemAccessKeyHandler.MainMenu">
            <summary>
            Gets or sets the window's main menu.
            </summary>
            <remarks>
            This property is ignored as a menu item cannot have a main menu.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.MenuItemAccessKeyHandler.SetOwner(Avalonia.Input.IInputRoot)">
            <summary>
            Sets the owner of the access key handler.
            </summary>
            <param name="owner">The owner.</param>
            <remarks>
            This method can only be called once, typically by the owner itself on creation.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.MenuItemAccessKeyHandler.Register(System.Char,Avalonia.Input.IInputElement)">
            <summary>
            Registers an input element to be associated with an access key.
            </summary>
            <param name="accessKey">The access key.</param>
            <param name="element">The input element.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItemAccessKeyHandler.Unregister(Avalonia.Input.IInputElement)">
            <summary>
            Unregisters the access keys associated with the input element.
            </summary>
            <param name="element">The input element.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItemAccessKeyHandler.OnTextInput(System.Object,Avalonia.Input.TextInputEventArgs)">
            <summary>
            Handles a key being pressed in the menu.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.Border">
            <summary>
            A control which decorates a child with a border and background.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Border.BackgroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Border.Background"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Border.BorderBrushProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Border.BorderBrush"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Border.BorderThicknessProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Border.BorderThickness"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Border.CornerRadiusProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Border.CornerRadius"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Border.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Border"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Border.Background">
            <summary>
            Gets or sets a brush with which to paint the background.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Border.BorderBrush">
            <summary>
            Gets or sets a brush with which to paint the border.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Border.BorderThickness">
            <summary>
            Gets or sets the thickness of the border.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Border.CornerRadius">
            <summary>
            Gets or sets the radius of the border rounded corners.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Border.Render(Avalonia.Media.DrawingContext)">
            <summary>
            Renders the control.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Controls.Border.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the control.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The desired size of the control.</returns>
        </member>
        <member name="M:Avalonia.Controls.Border.ArrangeOverride(Avalonia.Size)">
            <summary>
            Arranges the control's child.
            </summary>
            <param name="finalSize">The size allocated to the control.</param>
            <returns>The space taken.</returns>
        </member>
        <member name="T:Avalonia.Controls.MenuItem">
            <summary>
            A menu item control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.CommandProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuItem.Command"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.HotKeyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuItem.HotKey"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.CommandParameterProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuItem.CommandParameter"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.IconProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuItem.Icon"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.IsSelectedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuItem.IsSelected"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.IsSubMenuOpenProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.MenuItem.IsSubMenuOpen"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.ClickEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.MenuItem.Click"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.SubmenuOpenedEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.MenuItem.SubmenuOpened"/> event.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.DefaultPanel">
            <summary>
            The default value for the <see cref="P:Avalonia.Controls.ItemsControl.ItemsPanel"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem._submenuTimer">
            <summary>
            The timer used to display submenus.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem._popup">
            <summary>
            The submenu popup.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.MenuItem"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.MenuItem.Click">
            <summary>
            Occurs when a <see cref="T:Avalonia.Controls.MenuItem"/> without a submenu is clicked.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.MenuItem.SubmenuOpened">
            <summary>
            Occurs when a <see cref="T:Avalonia.Controls.MenuItem"/>'s submenu is opened.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.Command">
            <summary>
            Gets or sets the command associated with the menu item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.HotKey">
            <summary>
            Gets or sets an <see cref="T:Avalonia.Input.KeyGesture"/> associated with this control
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.CommandParameter">
            <summary>
            Gets or sets the parameter to pass to the <see cref="P:Avalonia.Controls.MenuItem.Command"/> property of a
            <see cref="T:Avalonia.Controls.MenuItem"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.Icon">
            <summary>
            Gets or sets the icon that appears in a <see cref="T:Avalonia.Controls.MenuItem"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.IsSelected">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Avalonia.Controls.MenuItem"/> is currently selected.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.IsSubMenuOpen">
            <summary>
            Gets or sets a value that indicates whether the submenu of the <see cref="T:Avalonia.Controls.MenuItem"/> is
            open.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.HasSubMenu">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:Avalonia.Controls.MenuItem"/> has a submenu.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.MenuItem.IsTopLevel">
            <summary>
            Gets a value that indicates whether the <see cref="T:Avalonia.Controls.MenuItem"/> is a top-level menu item.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnClick(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when the <see cref="T:Avalonia.Controls.MenuItem"/> is clicked.
            </summary>
            <param name="e">The click event args.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnGotFocus(Avalonia.Input.GotFocusEventArgs)">
            <summary>
            Called when the <see cref="T:Avalonia.Controls.MenuItem"/> recieves focus.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.CreateItemContainerGenerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <summary>
            Called when a key is pressed in the <see cref="T:Avalonia.Controls.MenuItem"/>.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnPointerEnter(Avalonia.Input.PointerEventArgs)">
            <summary>
            Called when the pointer enters the <see cref="T:Avalonia.Controls.MenuItem"/>.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnPointerLeave(Avalonia.Input.PointerEventArgs)">
            <summary>
            Called when the pointer leaves the <see cref="T:Avalonia.Controls.MenuItem"/>.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <summary>
            Called when the pointer is pressed over the <see cref="T:Avalonia.Controls.MenuItem"/>.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnSubmenuOpened(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when a submenu is opened on this MenuItem or a child MenuItem.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.OnTemplateApplied(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.AccessKeyPressed(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when the menu item's access key is pressed.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.CloseSubmenus">
            <summary>
            Closes all submenus of the menu item.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.IconChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.MenuItem.Icon"/> property changes.
            </summary>
            <param name="e">The property change event.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.SubMenuOpenChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.MenuItem.IsSubMenuOpen"/> property changes.
            </summary>
            <param name="e">The property change event.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.PopupOpened(System.Object,System.EventArgs)">
            <summary>
            Called when the submenu's <see cref="T:Avalonia.Controls.Primitives.Popup"/> is opened.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.PopupClosed(System.Object,System.EventArgs)">
            <summary>
            Called when the submenu's <see cref="T:Avalonia.Controls.Primitives.Popup"/> is closed.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.MenuItem.DependencyResolver">
            <summary>
            A dependency resolver which returns a <see cref="T:Avalonia.Controls.MenuItemAccessKeyHandler"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.MenuItem.DependencyResolver.Instance">
            <summary>
            Gets the default instance of <see cref="T:Avalonia.Controls.MenuItem.DependencyResolver"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.MenuItem.DependencyResolver.GetService(System.Type)">
            <summary>
            Gets a service of the specified type.
            </summary>
            <param name="serviceType">The service type.</param>
            <returns>A service of the requested type.</returns>
        </member>
        <member name="T:Avalonia.Controls.Menu">
            <summary>
            A top-level menu control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Menu.DefaultPanel">
            <summary>
            Defines the default items panel used by a <see cref="T:Avalonia.Controls.Menu"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Menu.IsOpenProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Menu.IsOpen"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Menu._subscription">
            <summary>
            Tracks event handlers added to the root of the visual tree.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Menu.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Menu"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Menu.IsOpen">
            <summary>
            Gets a value indicating whether the menu is open.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Menu.SelectedMenuItem">
            <summary>
            Gets the selected <see cref="T:Avalonia.Controls.MenuItem"/> container.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Menu.Close">
            <summary>
            Closes the menu.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Menu.Open">
            <summary>
            Opens the menu in response to the Alt/F10 key.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Menu.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Menu.OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Menu.CreateItemContainerGenerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Menu.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <summary>
            Called when a key is pressed within the menu.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Menu.OnLostFocus(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when the menu loses focus.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Menu.OnSubmenuOpened(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when a submenu opens somewhere in the menu.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Menu.Deactivated(System.Object,System.EventArgs)">
            <summary>
            Called when the top-level window is deactivated.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Menu.ListenForNonClientClick(Avalonia.Input.Raw.RawInputEventArgs)">
            <summary>
            Listens for non-client clicks and closes the menu when one is detected.
            </summary>
            <param name="e">The raw event.</param>
        </member>
        <member name="M:Avalonia.Controls.Menu.OnMenuClick(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Called when a submenu is clicked somewhere in the menu.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Menu.TopLevelPreviewPointerPress(System.Object,Avalonia.Input.PointerPressedEventArgs)">
            <summary>
            Called when the pointer is pressed anywhere on the window.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.ClickMode">
            <summary>
            Defines how a <see cref="T:Avalonia.Controls.Button"/> reacts to clicks.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ClickMode.Release">
            <summary>
            The <see cref="E:Avalonia.Controls.Button.Click"/> event is raised when the pointer is released.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ClickMode.Press">
            <summary>
            The <see cref="E:Avalonia.Controls.Button.Click"/> event is raised when the pointer is pressed.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Button">
            <summary>
            A button control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Button.ClickModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Button.ClickMode"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Button.CommandProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Button.Command"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Button.HotKeyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Button.HotKey"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Button.CommandParameterProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Button.CommandParameter"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Button.IsDefaultProperty">
            <summary>
            Defines the <see cref="F:Avalonia.Controls.Button.IsDefaultProperty"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Button.ClickEvent">
            <summary>
            Defines the <see cref="E:Avalonia.Controls.Button.Click"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Button.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Button"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Button.Click">
            <summary>
            Raised when the user clicks the button.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Button.ClickMode">
            <summary>
            Gets or sets a value indicating how the <see cref="T:Avalonia.Controls.Button"/> should react to clicks.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Button.Command">
            <summary>
            Gets or sets an <see cref="T:System.Windows.Input.ICommand"/> to be invoked when the button is clicked.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Button.HotKey">
            <summary>
            Gets or sets an <see cref="T:Avalonia.Input.KeyGesture"/> associated with this control
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Button.CommandParameter">
            <summary>
            Gets or sets a parameter to be passed to the <see cref="P:Avalonia.Controls.Button.Command"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Button.IsDefault">
            <summary>
            Gets or sets a value indicating whether the button is the default button for the
            window.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Button.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.OnKeyUp(Avalonia.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.OnClick(Avalonia.Interactivity.RoutedEventArgs)">
            <summary>
            Invokes the <see cref="E:Avalonia.Controls.Button.Click"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Button.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.OnPointerReleased(Avalonia.Input.PointerEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Button.CommandChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Button.Command"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Button.IsDefaultChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Button.IsDefault"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Button.CanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event fires.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Button.ListenForDefault(Avalonia.Input.IInputElement)">
            <summary>
            Starts listening for the Enter key when the button <see cref="P:Avalonia.Controls.Button.IsDefault"/>.
            </summary>
            <param name="root">The input root.</param>
        </member>
        <member name="M:Avalonia.Controls.Button.StopListeningForDefault(Avalonia.Input.IInputElement)">
            <summary>
            Stops listening for the Enter key when the button is no longer <see cref="P:Avalonia.Controls.Button.IsDefault"/>.
            </summary>
            <param name="root">The input root.</param>
        </member>
        <member name="M:Avalonia.Controls.Button.RaiseClickEvent">
            <summary>
            Raises the <see cref="E:Avalonia.Controls.Button.Click"/> event.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Button.RootKeyDown(System.Object,Avalonia.Input.KeyEventArgs)">
            <summary>
            Called when a key is pressed on the input root and the button <see cref="P:Avalonia.Controls.Button.IsDefault"/>.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.DropDown">
            <summary>
            A drop-down list control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DropDown.IsDropDownOpenProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DropDown.IsDropDownOpen"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DropDown.MaxDropDownHeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DropDown.MaxDropDownHeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DropDown.SelectionBoxItemProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DropDown.SelectionBoxItem"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DropDown.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.DropDown"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DropDown.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether the dropdown is currently open.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DropDown.MaxDropDownHeight">
            <summary>
            Gets or sets the maximum height for the dropdown list.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DropDown.SelectionBoxItem">
            <summary>
            Gets or sets the item to display as the control's content.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.DropDown.CreateItemContainerGenerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.DropDown.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.DropDown.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.DropDown.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.DropDown.OnTemplateApplied(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Carousel">
            <summary>
            An items control that displays its items as pages that fill the control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Carousel.IsVirtualizedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Carousel.IsVirtualized"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Carousel.TransitionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Carousel.Transition"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Carousel.PanelTemplate">
            <summary>
            The default value of <see cref="F:Avalonia.Controls.ItemsControl.ItemsPanelProperty"/> for 
            <see cref="T:Avalonia.Controls.Carousel"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Carousel.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Carousel"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Carousel.IsVirtualized">
            <summary>
            Gets or sets a value indicating whether the items in the carousel are virtualized.
            </summary>
            <remarks>
            When the carousel is virtualized, only the active page is held in memory.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Carousel.Transition">
            <summary>
            Gets or sets the transition to use when moving between pages.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Carousel.Next">
            <summary>
            Moves to the next item in the carousel.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Carousel.Previous">
            <summary>
            Moves to the previous item in the carousel.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Carousel.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Carousel.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.PlacementMode">
            <summary>
            Defines the placement for a <see cref="T:Avalonia.Controls.Primitives.Popup"/> control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PlacementMode.Pointer">
            <summary>
            The popup is placed at the pointer position.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PlacementMode.Bottom">
            <summary>
            The popup is placed at the bottom left of its target.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.PlacementMode.Right">
            <summary>
            The popup is placed at the top right of its target.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Canvas">
            <summary>
            A panel that displays child controls at arbitrary locations.
            </summary>
            <remarks>
            Unlike other <see cref="T:Avalonia.Controls.Panel"/> implementations, the <see cref="T:Avalonia.Controls.Canvas"/> doesn't lay out
            its children in any particular layout. Instead, the positioning of each child control is
            defined by the <code>Canvas.Left</code>, <code>Canvas.Top</code>, <code>Canvas.Right</code>
            and <code>Canvas.Bottom</code> attached properties.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.Canvas.LeftProperty">
            <summary>
            Defines the Left attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Canvas.TopProperty">
            <summary>
            Defines the Top attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Canvas.RightProperty">
            <summary>
            Defines the Right attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Canvas.BottomProperty">
            <summary>
            Defines the Bottom attached property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Canvas.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Canvas"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Canvas.GetLeft(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the Left attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <returns>The control's left coordinate.</returns>
        </member>
        <member name="M:Avalonia.Controls.Canvas.SetLeft(Avalonia.AvaloniaObject,System.Double)">
            <summary>
            Sets the value of the Left attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <param name="value">The left value.</param>
        </member>
        <member name="M:Avalonia.Controls.Canvas.GetTop(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the Top attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <returns>The control's top coordinate.</returns>
        </member>
        <member name="M:Avalonia.Controls.Canvas.SetTop(Avalonia.AvaloniaObject,System.Double)">
            <summary>
            Sets the value of the Top attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <param name="value">The top value.</param>
        </member>
        <member name="M:Avalonia.Controls.Canvas.GetRight(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the Right attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <returns>The control's right coordinate.</returns>
        </member>
        <member name="M:Avalonia.Controls.Canvas.SetRight(Avalonia.AvaloniaObject,System.Double)">
            <summary>
            Sets the value of the Right attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <param name="value">The right value.</param>
        </member>
        <member name="M:Avalonia.Controls.Canvas.GetBottom(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the Bottom attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <returns>The control's bottom coordinate.</returns>
        </member>
        <member name="M:Avalonia.Controls.Canvas.SetBottom(Avalonia.AvaloniaObject,System.Double)">
            <summary>
            Sets the value of the Bottom attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <param name="value">The bottom value.</param>
        </member>
        <member name="M:Avalonia.Controls.Canvas.Avalonia#Input#INavigableContainer#GetControl(Avalonia.Input.NavigationDirection,Avalonia.Input.IInputElement)">
            <summary>
            Gets the next control in the specified direction.
            </summary>
            <param name="direction">The movement direction.</param>
            <param name="from">The control from which movement begins.</param>
            <returns>The control.</returns>
        </member>
        <member name="M:Avalonia.Controls.Canvas.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the control.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The desired size of the control.</returns>
        </member>
        <member name="M:Avalonia.Controls.Canvas.ArrangeOverride(Avalonia.Size)">
            <summary>
            Arranges the control's children.
            </summary>
            <param name="finalSize">The size allocated to the control.</param>
            <returns>The space taken.</returns>
        </member>
        <member name="M:Avalonia.Controls.Canvas.AffectsCanvasArrange(Avalonia.AvaloniaProperty[])">
            <summary>
            Marks a property on a child as affecting the canvas' arrangement.
            </summary>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:Avalonia.Controls.Canvas.AffectsCanvasArrangeInvalidate(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Calls <see cref="M:Avalonia.Layout.Layoutable.InvalidateArrange"/> on the parent of the control whose
            property changed, if that parent is a canvas.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncControlTemplate`1">
            <summary>
            A template for a <see cref="T:Avalonia.Controls.Primitives.TemplatedControl"/>.
            </summary>
            <typeparam name="T">The type of the lookless control.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncControlTemplate`1.#ctor(System.Func{`0,Avalonia.Controls.IControl})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncControlTemplate`1"/> class.
            </summary>
            <param name="build">The build function.</param>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncDataTemplate`1">
            <summary>
            Builds a control for a piece of data of specified type.
            </summary>
            <typeparam name="T">The type of the template's data.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate`1.#ctor(System.Func{`0,Avalonia.Controls.IControl},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncDataTemplate`1"/> class.
            </summary>
            <param name="build">
            A function which when passed an object of <typeparamref name="T"/> returns a control.
            </param>
            <param name="supportsRecycling">Whether the control can be recycled.</param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate`1.#ctor(System.Func{`0,System.Boolean},System.Func{`0,Avalonia.Controls.IControl},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncDataTemplate`1"/> class.
            </summary>
            <param name="match">
            A function which determines whether the data template matches the specified data.
            </param>
            <param name="build">
            A function which when passed an object of <typeparamref name="T"/> returns a control.
            </param>
            <param name="supportsRecycling">Whether the control can be recycled.</param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate`1.CastMatch(System.Func{`0,System.Boolean})">
            <summary>
            Casts a stongly typed match function to a weakly typed one.
            </summary>
            <param name="f">The strongly typed function.</param>
            <returns>The weakly typed function.</returns>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate`1.CastBuild``1(System.Func{`0,``0})">
            <summary>
            Casts a stongly typed build function to a weakly typed one.
            </summary>
            <typeparam name="TResult">The strong data type.</typeparam>
            <param name="f">The strongly typed function.</param>
            <returns>The weakly typed function.</returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncMemberSelector`2">
            <summary>
            Selects a member of an object using a <see cref="T:System.Func`2"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncMemberSelector`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncMemberSelector`2"/>
            class.
            </summary>
            <param name="selector">The selector.</param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncMemberSelector`2.Select(System.Object)">
            <summary>
            Selects a member of an object.
            </summary>
            <param name="o">The obeject.</param>
            <returns>The selected member.</returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.IControlTemplate">
            <summary>
            Interface representing a template used to build a <see cref="T:Avalonia.Controls.Primitives.TemplatedControl"/>.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncTemplate`2">
            <summary>
            Creates a control from a <see cref="T:System.Func`2"/>.
            </summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <typeparam name="TControl">The type of control.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTemplate`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncTemplate`2"/> class.
            </summary>
            <param name="func">The function used to create the control.</param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTemplate`2.Build(`0)">
            <summary>
            Creates the control.
            </summary>
            <param name="param">The parameter.</param>
            <returns>
            The created control.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncTemplate`1">
            <summary>
            Creates a control from a <see cref="T:System.Func`1"/>.
            </summary>
            <typeparam name="TControl">The type of control.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTemplate`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncTemplate`1"/> class.
            </summary>
            <param name="func">The function used to create the control.</param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTemplate`1.Build">
            <summary>
            Creates the control.
            </summary>
            <returns>
            The created control.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.IDataTemplate">
            <summary>
            Interface representing a template used to build a control for a piece of data.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Templates.IDataTemplate.SupportsRecycling">
            <summary>
            Gets a value indicating whether the data template supports recycling of the generated
            control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.IDataTemplate.Match(System.Object)">
            <summary>
            Checks to see if this data template matches the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns>
            True if the data template can build a control for the data, otherwise false.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncControlTemplate">
            <summary>
            A template for a <see cref="T:Avalonia.Controls.Primitives.TemplatedControl"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncControlTemplate.#ctor(System.Func{Avalonia.Styling.ITemplatedControl,Avalonia.Controls.IControl})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncControlTemplate"/> class.
            </summary>
            <param name="build">The build function.</param>
        </member>
        <member name="T:Avalonia.Controls.Templates.DataTemplateExtensions">
            <summary>
            Defines extension methods for working with <see cref="T:Avalonia.Controls.Templates.IDataTemplate"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.DataTemplateExtensions.FindDataTemplate(Avalonia.Controls.IControl,System.Object,Avalonia.Controls.Templates.IDataTemplate)">
            <summary>
            Find a data template that matches a piece of data.
            </summary>
            <param name="control">The control searching for the data template.</param>
            <param name="data">The data.</param>
            <param name="primary">
            An optional primary template that can will be tried before the
            <see cref="P:Avalonia.Controls.IControl.DataTemplates"/> in the tree are searched.
            </param>
            <returns>The data template or null if no matching data template was found.</returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncDataTemplate">
            <summary>
            Builds a control for a piece of data.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Templates.FuncDataTemplate.Default">
            <summary>
            The default data template used in the case where no matching data template is found.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Templates.FuncDataTemplate._match">
            <summary>
            The implementation of the <see cref="M:Avalonia.Controls.Templates.FuncDataTemplate.Match(System.Object)"/> method.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate.#ctor(System.Type,System.Func{System.Object,Avalonia.Controls.IControl},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncDataTemplate"/> class.
            </summary>
            <param name="type">The type of data which the data template matches.</param>
            <param name="build">
            A function which when passed an object of <paramref name="type"/> returns a control.
            </param>
            <param name="supportsRecycling">Whether the control can be recycled.</param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate.#ctor(System.Func{System.Object,System.Boolean},System.Func{System.Object,Avalonia.Controls.IControl},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncDataTemplate"/> class.
            </summary>
            <param name="match">
            A function which determines whether the data template matches the specified data.
            </param>
            <param name="build">
            A function which returns a control for matching data.
            </param>
            <param name="supportsRecycling">Whether the control can be recycled.</param>
        </member>
        <member name="P:Avalonia.Controls.Templates.FuncDataTemplate.SupportsRecycling">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate.Match(System.Object)">
            <summary>
            Checks to see if this data template matches the specified data.
            </summary>
            <param name="data">The data.</param>
            <returns>
            True if the data template can build a control for the data, otherwise false.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncDataTemplate.IsInstance(System.Object,System.Type)">
            <summary>
            Determines of an object is of the specified type.
            </summary>
            <param name="o">The object.</param>
            <param name="t">The type.</param>
            <returns>
            True if <paramref name="o"/> is of type <paramref name="t"/>, otherwise false.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.DataTemplates">
            <summary>
            A collection of <see cref="T:Avalonia.Controls.Templates.IDataTemplate"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.DataTemplates.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.DataTemplates"/> class.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Templates.IMemberSelector">
            <summary>
            Selects a member of an object.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.IMemberSelector.Select(System.Object)">
            <summary>
            Selects a member of an object.
            </summary>
            <param name="o">The obeject.</param>
            <returns>The selected member.</returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.ITemplate`2">
            <summary>
            Creates a control based on a parameter.
            </summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <typeparam name="TControl">The type of control.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.Templates.ITemplate`2.Build(`0)">
            <summary>
            Creates the control.
            </summary>
            <param name="param">The parameter.</param>
            <returns>
            The created control.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.ITreeDataTemplate">
            <summary>
            Interface representing a template used to build hierachical data.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.ITreeDataTemplate.ItemsSelector(System.Object)">
            <summary>
            Selects the child items of an item.
            </summary>
            <param name="item">The item.</param>
            <returns>
            An <see cref="T:Avalonia.Data.InstancedBinding"/> holding the items, or an observable that tracks the
            items. May return null if no child items.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncTreeDataTemplate">
            <summary>
            A template used to build hierachical data.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate.#ctor(System.Type,System.Func{System.Object,Avalonia.Controls.IControl},System.Func{System.Object,System.Collections.IEnumerable})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncTreeDataTemplate"/> class.
            </summary>
            <param name="type">The type of data which the data template matches.</param>
            <param name="build">
            A function which when passed an object of <paramref name="type"/> returns a control.
            </param>
            <param name="itemsSelector">
            A function which when passed an object of <paramref name="type"/> returns the child
            items.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate.#ctor(System.Func{System.Object,System.Boolean},System.Func{System.Object,Avalonia.Controls.IControl},System.Func{System.Object,System.Collections.IEnumerable})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncTreeDataTemplate"/> class.
            </summary>
            <param name="match">
            A function which determines whether the data template matches the specified data.
            </param>
            <param name="build">
            A function which when passed a matching object returns a control.
            </param>
            <param name="itemsSelector">
            A function which when passed a matching object returns the child items.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate.ItemsSelector(System.Object)">
            <summary>
            Selects the child items of an item.
            </summary>
            <param name="item">The item.</param>
            <returns>The child items, or null if no child items.</returns>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate.IsInstance(System.Object,System.Type)">
            <summary>
            Determines of an object is of the specified type.
            </summary>
            <param name="o">The object.</param>
            <param name="t">The type.</param>
            <returns>
            True if <paramref name="o"/> is of type <paramref name="t"/>, otherwise false.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.Templates.FuncTreeDataTemplate`1">
            <summary>
            A template used to build hierachical data.
            </summary>
            <typeparam name="T">The type of the template's data.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate`1.#ctor(System.Func{`0,Avalonia.Controls.Control},System.Func{`0,System.Collections.IEnumerable})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncTreeDataTemplate`1"/> class.
            </summary>
            <param name="build">
            A function which when passed an object of <typeparamref name="T"/> returns a control.
            </param>
            <param name="itemsSelector">
            A function which when passed an object of <typeparamref name="T"/> returns the child
            items.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate`1.#ctor(System.Func{`0,System.Boolean},System.Func{`0,Avalonia.Controls.Control},System.Func{`0,System.Collections.IEnumerable})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Templates.FuncTreeDataTemplate`1"/> class.
            </summary>
            <param name="match">
            A function which determines whether the data template matches the specified data.
            </param>
            <param name="build">
            A function which when passed a matching object returns a control.
            </param>
            <param name="itemsSelector">
            A function which when passed a matching object returns the child items.
            </param>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate`1.CastMatch(System.Func{`0,System.Boolean})">
            <summary>
            Casts a typed match function to an untyped match function.
            </summary>
            <param name="f">The typed function.</param>
            <returns>The untyped function.</returns>
        </member>
        <member name="M:Avalonia.Controls.Templates.FuncTreeDataTemplate`1.Cast``1(System.Func{`0,``0})">
            <summary>
            Casts a function with a typed parameter to an untyped function.
            </summary>
            <typeparam name="TResult">The result.</typeparam>
            <param name="f">The typed function.</param>
            <returns>The untyped function.</returns>
        </member>
        <member name="T:Avalonia.Controls.ProgressBar">
            <summary>
            A control used to indicate the progress of an operation.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ProgressBar.ArrangeOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ProgressBar.OnTemplateApplied(Avalonia.Controls.Primitives.TemplateAppliedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.CheckBox">
            <summary>
            A check box control.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ColumnDefinition">
            <summary>
            Holds a column definitions for a <see cref="T:Avalonia.Controls.Grid"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ColumnDefinition.MaxWidthProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ColumnDefinition.MaxWidth"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ColumnDefinition.MinWidthProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ColumnDefinition.MinWidth"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ColumnDefinition.WidthProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ColumnDefinition.Width"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ColumnDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ColumnDefinition"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ColumnDefinition.#ctor(System.Double,Avalonia.Controls.GridUnitType)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ColumnDefinition"/> class.
            </summary>
            <param name="value">The width of the column.</param>
            <param name="type">The width unit of the column.</param>
        </member>
        <member name="M:Avalonia.Controls.ColumnDefinition.#ctor(Avalonia.Controls.GridLength)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ColumnDefinition"/> class.
            </summary>
            <param name="width">The width of the column.</param>
        </member>
        <member name="P:Avalonia.Controls.ColumnDefinition.ActualWidth">
            <summary>
            Gets the actual calculated width of the column.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ColumnDefinition.MaxWidth">
            <summary>
            Gets or sets the maximum width of the column in DIPs.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ColumnDefinition.MinWidth">
            <summary>
            Gets or sets the minimum width of the column in DIPs.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ColumnDefinition.Width">
            <summary>
            Gets or sets the width of the column.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ColumnDefinitions">
            <summary>
            A collection of <see cref="T:Avalonia.Controls.ColumnDefinition"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ColumnDefinitions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ColumnDefinitions"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ColumnDefinitions.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ColumnDefinitions"/> class.
            </summary>
            <param name="s">A string representation of the column definitions.</param>
        </member>
        <member name="T:Avalonia.Controls.ContentControl">
            <summary>
            Displays <see cref="P:Avalonia.Controls.ContentControl.Content"/> according to a <see cref="T:Avalonia.Controls.Templates.FuncDataTemplate"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ContentControl.ContentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ContentControl.Content"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ContentControl.ContentTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ContentControl.ContentTemplate"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ContentControl.HorizontalContentAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ContentControl.HorizontalContentAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ContentControl.VerticalContentAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ContentControl.VerticalContentAlignment"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ContentControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ContentControl"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContentControl.Content">
            <summary>
            Gets or sets the content to display.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContentControl.ContentTemplate">
            <summary>
            Gets or sets the data template used to display the content of the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContentControl.Presenter">
            <summary>
            Gets the presenter from the control's template.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContentControl.HorizontalContentAlignment">
            <summary>
            Gets or sets the horizontal alignment of the content within the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ContentControl.VerticalContentAlignment">
            <summary>
            Gets or sets the vertical alignment of the content within the control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ContentControl.Avalonia#Controls#Presenters#IContentPresenterHost#RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.GridSplitter">
            <summary>
            Represents the control that redistributes space between columns or rows of a Grid control.
            </summary>
            <remarks>
            Unlike WPF GridSplitter, Avalonia GridSplitter has only one Behavior, GridResizeBehavior.PreviousAndNext.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.GridSplitter.OrientationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.GridSplitter.Orientation"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridSplitter.Orientation">
            <summary>
            Gets or sets the orientation of the GridsSlitter.
            </summary>
            <remarks>
            if null, it's inferred from column/row definition (should be auto).
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.GridSplitter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.GridSplitter"/> class. 
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ISelectable">
            <summary>
            Interface for objects that are selectable.
            </summary>
            <remarks>
            Controls such as <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl"/> use this interface to indicate the
            selected control in a list. If changing the control's <see cref="P:Avalonia.Controls.ISelectable.IsSelected"/> property
            should update the selection in a <see cref="T:Avalonia.Controls.Primitives.SelectingItemsControl"/> or equivalent, then
            the control should raise the <see cref="F:Avalonia.Controls.Primitives.SelectingItemsControl.IsSelectedChangedEvent"/>.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.ISelectable.IsSelected">
            <summary>
            Gets or sets the selected state of the object.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ListBoxItem">
            <summary>
            A selectable item in a <see cref="T:Avalonia.Controls.ListBox"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ListBoxItem.IsSelectedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ListBoxItem.IsSelected"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ListBoxItem.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ListBoxItem"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ListBoxItem.IsSelected">
            <summary>
            Gets or sets the selection state of the item.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.ListBox">
            <summary>
            An <see cref="T:Avalonia.Controls.ItemsControl"/> in which individual items can be selected.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ListBox.DefaultPanel">
            <summary>
            The default value for the <see cref="P:Avalonia.Controls.ItemsControl.ItemsPanel"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ListBox.ScrollProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ListBox.Scroll"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ListBox.SelectedItemsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ListBox.SelectedItems"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ListBox.SelectionModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ListBox.SelectionMode"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ListBox.VirtualizationModeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ListBox.VirtualizationMode"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ListBox.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ItemsControl"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ListBox.Scroll">
            <summary>
            Gets the scroll information for the <see cref="T:Avalonia.Controls.ListBox"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ListBox.SelectedItems">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.ListBox.SelectionMode">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.ListBox.VirtualizationMode">
            <summary>
            Gets or sets the virtualization mode for the items.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ListBox.CreateItemContainerGenerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ListBox.OnGotFocus(Avalonia.Input.GotFocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ListBox.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.Control">
             <summary>
             Base class for Avalonia controls.
             </summary>
             <remarks>
             The control class extends <see cref="T:Avalonia.Input.InputElement"/> and adds the following features:
            
             - An inherited <see cref="P:Avalonia.Controls.Control.DataContext"/>.
             - A <see cref="P:Avalonia.Controls.Control.Tag"/> property to allow user-defined data to be attached to the control.
             - A collection of class strings for custom styling.
             - Implements <see cref="T:Avalonia.Styling.IStyleable"/> to allow styling to work on the control.
             - Implements <see cref="T:Avalonia.LogicalTree.ILogical"/> to form part of a logical tree.
             </remarks>
        </member>
        <member name="F:Avalonia.Controls.Control.DataContextProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Control.DataContext"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Control.FocusAdornerProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Control.FocusAdorner"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Control.NameProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Control.Name"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Control.ParentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Control.Parent"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Control.TagProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Control.Tag"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Control.TemplatedParentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Control.TemplatedParent"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Control.ContextMenuProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Control.ContextMenu"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Control.RequestBringIntoViewEvent">
            <summary>
            Event raised when an element wishes to be scrolled into view.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Control.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Control"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Control.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Control"/> class.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Control.AttachedToLogicalTree">
            <summary>
            Raised when the control is attached to a rooted logical tree.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Control.DetachedFromLogicalTree">
            <summary>
            Raised when the control is detached from a rooted logical tree.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.Control.DataContextChanged">
            <summary>
            Occurs when the <see cref="P:Avalonia.Controls.Control.DataContext"/> property changes.
            </summary>
            <remarks>
            This event will be raised when the <see cref="P:Avalonia.Controls.Control.DataContext"/> property has changed and
            all subscribers to that change have been notified.
            </remarks>
        </member>
        <member name="E:Avalonia.Controls.Control.Initialized">
            <summary>
            Occurs when the control has finished initialization.
            </summary>
            <remarks>
            The Initialized event indicates that all property values on the control have been set.
            When loading the control from markup, it occurs when 
            <see cref="M:Avalonia.ISupportInitialize.EndInit"/> is called *and* the control
            is attached to a rooted logical tree. When the control is created by code and
            <see cref="T:Avalonia.ISupportInitialize"/> is not used, it is called when the control is attached
            to the visual tree.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Control.Name">
            <summary>
            Gets or sets the name of the control.
            </summary>
            <remarks>
            An element's name is used to uniquely identify a control within the control's name
            scope. Once the element is added to a logical tree, its name cannot be changed.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Control.Classes">
            <summary>
            Gets or sets the control's classes.
            </summary>
            <remarks>
            <para>
            Classes can be used to apply user-defined styling to controls, or to allow controls
            that share a common purpose to be easily selected.
            </para>
            <para>
            Even though this property can be set, the setter is only intended for use in object
            initializers. Assigning to this property does not change the underlying collection,
            it simply clears the existing collection and addds the contents of the assigned
            collection.
            </para>
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Control.DataContext">
            <summary>
            Gets or sets the control's data context.
            </summary>
            <remarks>
            The data context is an inherited property that specifies the default object that will
            be used for data binding.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Control.FocusAdorner">
            <summary>
            Gets or sets the control's focus adorner.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Control.DataTemplates">
            <summary>
            Gets or sets the data templates for the control.
            </summary>
            <remarks>
            Each control may define data templates which are applied to the control itself and its
            children.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Control.IsInitialized">
            <summary>
            Gets a value that indicates whether the element has finished initialization.
            </summary>
            <remarks>
            For more information about when IsInitialized is set, see the <see cref="E:Avalonia.Controls.Control.Initialized"/>
            event.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Control.Styles">
            <summary>
            Gets or sets the styles for the control.
            </summary>
            <remarks>
            Styles for the entire application are added to the Application.Styles collection, but
            each control may in addition define its own styles which are applied to the control
            itself and its children.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Control.Parent">
            <summary>
            Gets the control's logical parent.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Control.ContextMenu">
            <summary>
            Gets or sets a context menu to the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Control.Tag">
            <summary>
            Gets or sets a user-defined object attached to the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Control.TemplatedParent">
            <summary>
            Gets the control whose lookless template this control is part of.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Control.Avalonia#LogicalTree#ILogical#IsAttachedToLogicalTree">
            <summary>
            Gets a value indicating whether the element is attached to a rooted logical tree.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Control.Avalonia#LogicalTree#ILogical#LogicalParent">
            <summary>
            Gets the control's logical parent.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Control.Avalonia#LogicalTree#ILogical#LogicalChildren">
            <summary>
            Gets the control's logical children.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Control.Avalonia#Styling#IStyleable#Classes">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Control.Avalonia#Styling#IStyleable#StyleKey">
            <summary>
            Gets the type by which the control is styled.
            </summary>
            <remarks>
            Usually controls are styled by their own type, but there are instances where you want
            a control to be styled by its base type, e.g. creating SpecialButton that
            derives from Button and adds extra functionality but is still styled as a regular
            Button.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Control.Avalonia#Styling#IStyleable#StyleDetach">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Control.Avalonia#Styling#IStyleHost#StylingParent">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Control.BeginInit">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Control.EndInit">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Control.Avalonia#LogicalTree#ILogical#NotifyDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Control.LogicalChildren">
            <summary>
            Gets the control's logical children.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Control.PseudoClasses">
            <summary>
            Gets the <see cref="P:Avalonia.Controls.Control.Classes"/> collection in a form that allows adding and removing
            pseudoclasses.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Control.DataValidationChanged(Avalonia.AvaloniaProperty,Avalonia.Data.IValidationStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Control.Avalonia#Controls#ISetLogicalParent#SetParent(Avalonia.LogicalTree.ILogical)">
            <summary>
            Sets the control's logical parent.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Avalonia.Controls.Control.Avalonia#Controls#ISetInheritanceParent#SetParent(Avalonia.IAvaloniaObject)">
            <summary>
            Sets the control's inheritance parent.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Avalonia.Controls.Control.PseudoClass(Avalonia.AvaloniaProperty{System.Boolean},System.String)">
            <summary>
            Adds a pseudo-class to be set when a property is true.
            </summary>
            <param name="property">The property.</param>
            <param name="className">The pseudo-class.</param>
        </member>
        <member name="M:Avalonia.Controls.Control.PseudoClass``1(Avalonia.AvaloniaProperty{``0},System.Func{``0,System.Boolean},System.String)">
            <summary>
            Adds a pseudo-class to be set when a property equals a certain value.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="property">The property.</param>
            <param name="selector">Returns a boolean value based on the property value.</param>
            <param name="className">The pseudo-class.</param>
        </member>
        <member name="M:Avalonia.Controls.Control.GetTemplateFocusTarget">
            <summary>
            Gets the element that recieves the focus adorner.
            </summary>
            <returns>The control that recieves the focus adorner.</returns>
        </member>
        <member name="M:Avalonia.Controls.Control.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <summary>
            Called when the control is added to a rooted logical tree.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Control.OnDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <summary>
            Called when the control is removed from a rooted logical tree.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.Control.OnAttachedToVisualTreeCore(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Control.OnDetachedFromVisualTreeCore(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Control.OnDataContextChanging">
            <summary>
            Called before the <see cref="P:Avalonia.Controls.Control.DataContext"/> property changes.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Control.OnDataContextChanged">
            <summary>
            Called after the <see cref="P:Avalonia.Controls.Control.DataContext"/> property changes.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Control.OnGotFocus(Avalonia.Input.GotFocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Control.OnLostFocus(Avalonia.Interactivity.RoutedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Control.DataContextNotifying(Avalonia.IAvaloniaObject,System.Boolean)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Control.DataContext"/> property begins and ends being notified.
            </summary>
            <param name="o">The object on which the DataContext is changing.</param>
            <param name="notifying">Whether the notifcation is beginning or ending.</param>
        </member>
        <member name="T:Avalonia.Controls.ControlExtensions">
            <summary>
            Adds common functionality to <see cref="T:Avalonia.Controls.IControl"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ControlExtensions.BringIntoView(Avalonia.Controls.IControl)">
            <summary>
            Tries to being the control into view.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:Avalonia.Controls.ControlExtensions.BringIntoView(Avalonia.Controls.IControl,Avalonia.Rect)">
            <summary>
            Tries to being the control into view.
            </summary>
            <param name="control">The control.</param>
            <param name="rect">The area of the control to being into view.</param>
        </member>
        <member name="M:Avalonia.Controls.ControlExtensions.FindControl``1(Avalonia.Controls.IControl,System.String)">
            <summary>
            Finds the named control in the scope of the specified control.
            </summary>
            <typeparam name="T">The type of the control to find.</typeparam>
            <param name="control">The control to look in.</param>
            <param name="name">The name of the control to find.</param>
            <returns>The control or null if not found.</returns>
        </member>
        <member name="M:Avalonia.Controls.ControlExtensions.FindNameScope(Avalonia.Controls.IControl)">
            <summary>
            Finds the name scope for a control by searching up the logical tree.
            </summary>
            <param name="control">The control.</param>
            <returns>The control's name scope, or null if not found.</returns>
        </member>
        <member name="M:Avalonia.Controls.ControlExtensions.Set(Avalonia.Controls.IPseudoClasses,System.String,System.Boolean)">
            <summary>
            Adds or removes a pseudoclass depending on a boolean value.
            </summary>
            <param name="classes">The pseudoclasses collection.</param>
            <param name="name">The name of the pseudoclass to set.</param>
            <param name="value">True to add the pseudoclass or false to remove.</param>
        </member>
        <member name="M:Avalonia.Controls.ControlExtensions.Set(Avalonia.Controls.IPseudoClasses,System.String,System.IObservable{System.Boolean})">
            <summary>
            Sets a pseudoclass depending on an observable trigger.
            </summary>
            <param name="classes">The pseudoclasses collection.</param>
            <param name="name">The name of the pseudoclass to set.</param>
            <param name="trigger">The trigger: true adds the pseudoclass, false removes.</param>
            <returns>A disposable used to cancel the subscription.</returns>
        </member>
        <member name="T:Avalonia.Controls.Controls">
            <summary>
            A collection of <see cref="T:Avalonia.Controls.Control"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Controls.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Controls"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Controls.#ctor(System.Collections.Generic.IEnumerable{Avalonia.Controls.IControl})">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Controls"/> class.
            </summary>
            <param name="items">The initial items in the collection.</param>
        </member>
        <member name="T:Avalonia.Controls.IGlobalDataTemplates">
            <summary>
            Defines the application-global data templates.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IGlobalDataTemplates.DataTemplates">
            <summary>
            Gets the application-global data templates.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Decorator">
            <summary>
            Base class for controls which decorate a single child control.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Decorator.ChildProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Decorator.Child"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Decorator.PaddingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Decorator.Padding"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Decorator.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Decorator"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Decorator.Child">
            <summary>
            Gets or sets the decorated control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Decorator.Padding">
            <summary>
            Gets or sets the padding to place around the <see cref="P:Avalonia.Controls.Decorator.Child"/> control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Decorator.MeasureOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Decorator.ArrangeOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Decorator.ChildChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Decorator.Child"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.DefinitionBase">
            <summary>
            Base class for <see cref="T:Avalonia.Controls.ColumnDefinition"/> and <see cref="T:Avalonia.Controls.RowDefinition"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.DefinitionBase.SharedSizeGroupProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.DefinitionBase.SharedSizeGroup"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.DefinitionBase.SharedSizeGroup">
            <summary>
            Gets or sets the name of the shared size group of the column or row.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Grid">
            <summary>
            Lays out child controls according to a grid.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Grid.ColumnProperty">
            <summary>
            Defines the Column attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Grid.ColumnSpanProperty">
            <summary>
            Defines the ColumnSpan attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Grid.RowProperty">
            <summary>
            Defines the Row attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Grid.RowSpanProperty">
            <summary>
            Defines the RowSpan attached property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.ColumnDefinitions">
            <summary>
            Gets or sets the columns definitions for the grid.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Grid.RowDefinitions">
            <summary>
            Gets or sets the row definitions for the grid.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Grid.GetColumn(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the Column attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <returns>The control's column.</returns>
        </member>
        <member name="M:Avalonia.Controls.Grid.GetColumnSpan(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the ColumnSpan attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <returns>The control's column span.</returns>
        </member>
        <member name="M:Avalonia.Controls.Grid.GetRow(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the Row attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <returns>The control's row.</returns>
        </member>
        <member name="M:Avalonia.Controls.Grid.GetRowSpan(Avalonia.AvaloniaObject)">
            <summary>
            Gets the value of the RowSpan attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <returns>The control's row span.</returns>
        </member>
        <member name="M:Avalonia.Controls.Grid.SetColumn(Avalonia.AvaloniaObject,System.Int32)">
            <summary>
            Sets the value of the Column attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <param name="value">The column value.</param>
        </member>
        <member name="M:Avalonia.Controls.Grid.SetColumnSpan(Avalonia.AvaloniaObject,System.Int32)">
            <summary>
            Sets the value of the ColumnSpan attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <param name="value">The column span value.</param>
        </member>
        <member name="M:Avalonia.Controls.Grid.SetRow(Avalonia.AvaloniaObject,System.Int32)">
            <summary>
            Sets the value of the Row attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <param name="value">The row value.</param>
        </member>
        <member name="M:Avalonia.Controls.Grid.SetRowSpan(Avalonia.AvaloniaObject,System.Int32)">
            <summary>
            Sets the value of the RowSpan attached property for a control.
            </summary>
            <param name="element">The control.</param>
            <param name="value">The row span value.</param>
        </member>
        <member name="M:Avalonia.Controls.Grid.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the grid.
            </summary>
            <param name="constraint">The available size.</param>
            <returns>The desired size of the control.</returns>
        </member>
        <member name="M:Avalonia.Controls.Grid.ArrangeOverride(Avalonia.Size)">
            <summary>
            Arranges the grid's children.
            </summary>
            <param name="finalSize">The size allocated to the control.</param>
            <returns>The space taken.</returns>
        </member>
        <member name="T:Avalonia.Controls.GridUnitType">
            <summary>
            Defines the valid units for a <see cref="T:Avalonia.Controls.GridLength"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridUnitType.Auto">
            <summary>
            The row or column is auto-sized to fit its content.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridUnitType.Pixel">
            <summary>
            The row or column is sized in device independent pixels.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.GridUnitType.Star">
            <summary>
            The row or column is sized as a weighted proportion of available space.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.GridLength">
            <summary>
            Holds the width or height of a <see cref="T:Avalonia.Controls.Grid"/>'s column and row definitions.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.GridLength.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.GridLength"/> struct.
            </summary>
            <param name="value">The size of the GridLength in device independent pixels.</param>
        </member>
        <member name="M:Avalonia.Controls.GridLength.#ctor(System.Double,Avalonia.Controls.GridUnitType)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.GridLength"/> struct.
            </summary>
            <param name="value">The size of the GridLength.</param>
            <param name="type">The unit of the GridLength.</param>
        </member>
        <member name="P:Avalonia.Controls.GridLength.Auto">
            <summary>
            Gets an instance of <see cref="T:Avalonia.Controls.GridLength"/> that indicates that a row or column should
            auto-size to fit its content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridLength.GridUnitType">
            <summary>
            Gets the unit of the <see cref="T:Avalonia.Controls.GridLength"/>.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridLength.IsAbsolute">
            <summary>
            Gets a value that indicates whether the <see cref="T:Avalonia.Controls.GridLength"/> has a <see cref="P:Avalonia.Controls.GridLength.GridUnitType"/> of Pixel.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridLength.IsAuto">
            <summary>
            Gets a value that indicates whether the <see cref="T:Avalonia.Controls.GridLength"/> has a <see cref="P:Avalonia.Controls.GridLength.GridUnitType"/> of Auto.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridLength.IsStar">
            <summary>
            Gets a value that indicates whether the <see cref="T:Avalonia.Controls.GridLength"/> has a <see cref="P:Avalonia.Controls.GridLength.GridUnitType"/> of Star.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.GridLength.Value">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.GridLength.op_Equality(Avalonia.Controls.GridLength,Avalonia.Controls.GridLength)">
            <summary>
            Compares two GridLength structures for equality.
            </summary>
            <param name="a">The first GridLength.</param>
            <param name="b">The second GridLength.</param>
            <returns>True if the structures are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.GridLength.op_Inequality(Avalonia.Controls.GridLength,Avalonia.Controls.GridLength)">
            <summary>
            Compares two GridLength structures for inequality.
            </summary>
            <param name="gl1">The first GridLength.</param>
            <param name="gl2">The first GridLength.</param>
            <returns>True if the structures are unequal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.GridLength.Equals(System.Object)">
            <summary>
            Determines whether the <see cref="T:Avalonia.Controls.GridLength"/> is equal to the specified object.
            </summary>
            <param name="o">The object with which to test equality.</param>
            <returns>True if the objects are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.GridLength.Equals(Avalonia.Controls.GridLength)">
            <summary>
            Compares two GridLength structures for equality.
            </summary>
            <param name="gridLength">The structure with which to test equality.</param>
            <returns>True if the structures are equal, otherwise false.</returns>
        </member>
        <member name="M:Avalonia.Controls.GridLength.GetHashCode">
            <summary>
            Gets a hash code for the GridLength.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Avalonia.Controls.GridLength.ToString">
            <summary>
            Gets a string representation of the <see cref="T:Avalonia.Controls.GridLength"/>.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Avalonia.Controls.GridLength.Parse(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses a string to return a <see cref="T:Avalonia.Controls.GridLength"/>.
            </summary>
            <param name="s">The string.</param>
            <param name="culture">The current culture.</param>
            <returns>The <see cref="T:Avalonia.Controls.GridLength"/>.</returns>
        </member>
        <member name="M:Avalonia.Controls.GridLength.ParseLengths(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses a string to return a collection of <see cref="T:Avalonia.Controls.GridLength"/>s.
            </summary>
            <param name="s">The string.</param>
            <param name="culture">The current culture.</param>
            <returns>The <see cref="T:Avalonia.Controls.GridLength"/>.</returns>
        </member>
        <member name="T:Avalonia.Controls.IHeadered">
            <summary>
            Defines a headered object.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.IHeadered.Header">
            <summary>
            Gets or set the header.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Image">
            <summary>
            Displays a <see cref="T:Avalonia.Media.Imaging.Bitmap"/> image.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Image.SourceProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Image.Source"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Image.StretchProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Image.Stretch"/> property.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Image.Source">
            <summary>
            Gets or sets the bitmap image that will be displayed.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Image.Stretch">
            <summary>
            Gets or sets a value controlling how the image will be stretched.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Image.Render(Avalonia.Media.DrawingContext)">
            <summary>
            Renders the control.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Controls.Image.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the control.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The desired size of the control.</returns>
        </member>
        <member name="T:Avalonia.Controls.ItemsControl">
            <summary>
            Displays a collection of items.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemsControl.DefaultPanel">
            <summary>
            The default value for the <see cref="P:Avalonia.Controls.ItemsControl.ItemsPanel"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemsControl.ItemsProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ItemsControl.Items"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemsControl.ItemsPanelProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ItemsControl.ItemsPanel"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemsControl.ItemTemplateProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ItemsControl.ItemTemplate"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ItemsControl.MemberSelectorProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ItemsControl.MemberSelector"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ItemsControl"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ItemsControl"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.ItemContainerGenerator">
            <summary>
            Gets the <see cref="T:Avalonia.Controls.Generators.IItemContainerGenerator"/> for the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.Items">
            <summary>
            Gets or sets the items to display.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.ItemsPanel">
            <summary>
            Gets or sets the panel used to display the items.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.ItemTemplate">
            <summary>
            Gets or sets the data template used to display the items in the control.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.MemberSelector">
            <summary>
            Selects a member from <see cref="P:Avalonia.Controls.ItemsControl.Items"/> to use as the list item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ItemsControl.Presenter">
            <summary>
            Gets the items presenter control.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.Avalonia#Controls#Presenters#IItemsPresenterHost#RegisterItemsPresenter(Avalonia.Controls.Presenters.IItemsPresenter)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.ElementAt(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Gets the item at the specified index in a collection.
            </summary>
            <param name="items">The collection.</param>
            <param name="index">The index.</param>
            <returns>The index of the item or -1 if the item was not found.</returns>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.IndexOf(System.Collections.IEnumerable,System.Object)">
            <summary>
            Gets the index of an item in a collection.
            </summary>
            <param name="items">The collection.</param>
            <param name="item">The item.</param>
            <returns>The index of the item or -1 if the item was not found.</returns>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.CreateItemContainerGenerator">
            <summary>
            Creates the <see cref="P:Avalonia.Controls.ItemsControl.ItemContainerGenerator"/> for the control.
            </summary>
            <returns>
            An <see cref="T:Avalonia.Controls.Generators.IItemContainerGenerator"/> or null.
            </returns>
            <remarks>
            Certain controls such as <see cref="T:Avalonia.Controls.TabControl"/> don't actually create item 
            containers; however they want it to be ItemsControls so that they have an Items 
            property etc. In this case, a derived class can override this method to return null
            in order to disable the creation of item containers.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.OnContainersMaterialized(Avalonia.Controls.Generators.ItemContainerEventArgs)">
            <summary>
            Called when new containers are materialized for the <see cref="T:Avalonia.Controls.ItemsControl"/> by its
            <see cref="P:Avalonia.Controls.ItemsControl.ItemContainerGenerator"/>.
            </summary>
            <param name="e">The details of the containers.</param>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.OnContainersDematerialized(Avalonia.Controls.Generators.ItemContainerEventArgs)">
            <summary>
            Called when containers are dematerialized for the <see cref="T:Avalonia.Controls.ItemsControl"/> by its
            <see cref="P:Avalonia.Controls.ItemsControl.ItemContainerGenerator"/>.
            </summary>
            <param name="e">The details of the containers.</param>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.OnContainersRecycled(Avalonia.Controls.Generators.ItemContainerEventArgs)">
            <summary>
            Called when containers are recycled for the <see cref="T:Avalonia.Controls.ItemsControl"/> by its
            <see cref="P:Avalonia.Controls.ItemsControl.ItemContainerGenerator"/>.
            </summary>
            <param name="e">The details of the containers.</param>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.OnTemplateChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.ItemsChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Caled when the <see cref="P:Avalonia.Controls.ItemsControl.Items"/> property changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.ItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> event is
            raised on <see cref="P:Avalonia.Controls.ItemsControl.Items"/>.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.AddControlItemsToLogicalChildren(System.Collections.IEnumerable)">
            <summary>
            Given a collection of items, adds those that are controls to the logical children.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.RemoveControlItemsFromLogicalChildren(System.Collections.IEnumerable)">
            <summary>
            Given a collection of items, removes those that are controls to from logical children.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.SubscribeToItems(System.Collections.IEnumerable)">
            <summary>
            Subscribes to an <see cref="P:Avalonia.Controls.ItemsControl.Items"/> collection.
            </summary>
            <param name="items">The items collection.</param>
        </member>
        <member name="M:Avalonia.Controls.ItemsControl.ItemTemplateChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.ItemsControl.ItemTemplate"/> changes.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.Panel">
            <summary>
            Base class for controls that can contain multiple children.
            </summary>
            <remarks>
            Controls can be added to a <see cref="T:Avalonia.Controls.Panel"/> by adding them to its <see cref="P:Avalonia.Controls.Panel.Children"/>
            collection. All children are layed out to fill the panel.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.Panel.BackgroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Panel.Background"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Panel.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Panel"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Panel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Panel"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Panel.Children">
            <summary>
            Gets or sets the children of the <see cref="T:Avalonia.Controls.Panel"/>.
            </summary>
            <remarks>
            Even though this property can be set, the setter is only intended for use in object
            initializers. Assigning to this property does not change the underlying collection,
            it simply clears the existing collection and adds the contents of the assigned
            collection.
            </remarks>
        </member>
        <member name="P:Avalonia.Controls.Panel.Background">
            <summary>
            Gets or Sets Panel background brush.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Panel.Render(Avalonia.Media.DrawingContext)">
            <summary>
            Renders the visual to a <see cref="T:Avalonia.Media.DrawingContext"/>.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Controls.Panel.ChildrenChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Avalonia.Controls.Panel.Children"/> collection changes.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:Avalonia.Controls.ITemplate`1">
            <summary>
            Creates a control.
            </summary>
            <typeparam name="TControl">The type of control.</typeparam>
        </member>
        <member name="M:Avalonia.Controls.ITemplate`1.Build">
            <summary>
            Creates the control.
            </summary>
            <returns>
            The created control.
            </returns>
        </member>
        <member name="T:Avalonia.Controls.ToolTip">
            <summary>
            A control which pops up a hint when a control is hovered.
            </summary>
            <remarks>
            You will probably not want to create a <see cref="T:Avalonia.Controls.ToolTip"/> control directly: if added to
            the tree it will act as a simple <see cref="T:Avalonia.Controls.ContentControl"/> styled to look like a tooltip.
            To add a tooltip to a control, use the <see cref="F:Avalonia.Controls.ToolTip.TipProperty"/> attached property,
            assigning the content that you want displayed.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.ToolTip.TipProperty">
            <summary>
            Defines the ToolTip.Tip attached property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ToolTip.s_popup">
            <summary>
            The popup window used to display the active tooltip.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ToolTip.s_current">
            <summary>
            The control that the currently visible tooltip is attached to.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ToolTip.s_show">
            <summary>
            Observable fired when a tooltip should be displayed for a control. The output from this
            observable is throttled and calls <see cref="M:Avalonia.Controls.ToolTip.ShowToolTip(Avalonia.Controls.Control)"/> when the time
            period expires.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ToolTip"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.GetTip(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the ToolTip.Tip attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <returns>
            The content to be displayed in the control's tooltip.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.SetTip(Avalonia.Controls.Control,System.Object)">
            <summary>
            Sets the value of the ToolTip.Tip attached property.
            </summary>
            <param name="element">The control to get the property from.</param>
            <param name="value">The content to be displayed in the control's tooltip.</param>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.TipChanged(Avalonia.AvaloniaPropertyChangedEventArgs)">
            <summary>
            called when the <see cref="F:Avalonia.Controls.ToolTip.TipProperty"/> property changes on a control.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.ShowToolTip(Avalonia.Controls.Control)">
            <summary>
            Shows a tooltip for the specified control.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.ControlPointerEnter(System.Object,Avalonia.Input.PointerEventArgs)">
            <summary>
            Called when the pointer enters a control with an attached tooltip.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.ToolTip.ControlPointerLeave(System.Object,Avalonia.Input.PointerEventArgs)">
            <summary>
            Called when the pointer leaves a control with an attached tooltip.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="E:Avalonia.Controls.UserControl.Avalonia#Controls#INameScope#Registered">
            <inheritdoc/>
        </member>
        <member name="E:Avalonia.Controls.UserControl.Avalonia#Controls#INameScope#Unregistered">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.UserControl.Avalonia#Controls#INameScope#Register(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.UserControl.Avalonia#Controls#INameScope#Find(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.UserControl.Avalonia#Controls#INameScope#Unregister(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.TopLevel">
            <summary>
            Base class for top-level windows.
            </summary>
            <remarks>
            This class acts as a base for top level windows such as <see cref="T:Avalonia.Controls.Window"/> and
            <see cref="T:Avalonia.Controls.Primitives.PopupRoot"/>. It handles scheduling layout, styling and rendering as well as
            tracking the window <see cref="P:Avalonia.Controls.TopLevel.ClientSize"/> and <see cref="P:Avalonia.Controls.TopLevel.IsActive"/> state.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.TopLevel.ClientSizeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TopLevel.ClientSize"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TopLevel.IsActiveProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TopLevel.IsActive"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TopLevel.PointerOverElementProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Input.IInputRoot.PointerOverElement"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.TopLevel"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.#ctor(Avalonia.Platform.ITopLevelImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.TopLevel"/> class.
            </summary>
            <param name="impl">The platform-specific window implementation.</param>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.#ctor(Avalonia.Platform.ITopLevelImpl,Avalonia.IAvaloniaDependencyResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.TopLevel"/> class.
            </summary>
            <param name="impl">The platform-specific window implementation.</param>
            <param name="dependencyResolver">
            The dependency resolver to use. If null the default dependency resolver will be used.
            </param>
        </member>
        <member name="E:Avalonia.Controls.TopLevel.Activated">
            <summary>
            Fired when the window is activated.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.TopLevel.Closed">
            <summary>
            Fired when the window is closed.
            </summary>
        </member>
        <member name="E:Avalonia.Controls.TopLevel.Deactivated">
            <summary>
            Fired when the window is deactivated.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.ClientSize">
            <summary>
            Gets or sets the client size of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.IsActive">
            <summary>
            Gets a value that indicates whether the window is active.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Position">
            <summary>
            Gets or sets the window position in screen coordinates.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.PlatformImpl">
            <summary>
            Gets the platform-specific window implementation.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Avalonia#Rendering#IRenderRoot#RenderQueueManager">
            <summary>
            Gets the window render manager.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Avalonia#Input#IInputRoot#AccessKeyHandler">
            <summary>
            Gets the access key handler for the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Avalonia#Input#IInputRoot#KeyboardNavigationHandler">
            <summary>
            Gets or sets the keyboard navigation handler for the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Avalonia#Input#IInputRoot#PointerOverElement">
            <summary>
            Gets or sets the input element that the pointer is currently over.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Avalonia#Input#IInputRoot#ShowAccessKeys">
            <summary>
            Gets or sets a value indicating whether access keys are shown in the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Avalonia#Layout#ILayoutRoot#MaxClientSize">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.Avalonia#Layout#ILayoutRoot#LayoutScaling">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.TopLevel.AutoSizing">
            <summary>
            Whether an auto-size operation is in progress.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.Avalonia#Rendering#IRenderRoot#PointToClient(Avalonia.Point)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.Avalonia#Rendering#IRenderRoot#PointToScreen(Avalonia.Point)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.Activate">
            <summary>
            Activates the window.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.BeginAutoSizing">
            <summary>
            Begins an auto-resize operation.
            </summary>
            <returns>A disposable used to finish the operation.</returns>
            <remarks>
            When an auto-resize operation is in progress any resize events received will not be
            cause the new size to be written to the <see cref="P:Avalonia.Layout.Layoutable.Width"/> and
            <see cref="P:Avalonia.Layout.Layoutable.Height"/> properties.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.ArrangeOverride(Avalonia.Size)">
            <summary>
            Carries out the arrange pass of the window.
            </summary>
            <param name="finalSize">The final window size.</param>
            <returns>The <paramref name="finalSize"/> parameter unchanged.</returns>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.HandleResized(Avalonia.Size)">
            <summary>
            Handles a resize notification from <see cref="P:Avalonia.Platform.ITopLevelImpl.Resized"/>.
            </summary>
            <param name="clientSize">The new client size.</param>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.HandleScalingChanged(System.Double)">
            <summary>
            Handles a window scaling change notification from 
            <see cref="P:Avalonia.Platform.ITopLevelImpl.ScalingChanged"/>.
            </summary>
            <param name="scaling">The window scaling.</param>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.TryGetService``1(Avalonia.IAvaloniaDependencyResolver)">
            <summary>
            Tries to get a service from an <see cref="T:Avalonia.IAvaloniaDependencyResolver"/>, throwing an
            exception if not found.
            </summary>
            <typeparam name="T">The service type.</typeparam>
            <param name="resolver">The resolver.</param>
            <returns>The service.</returns>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.HandleActivated">
            <summary>
            Handles an activated notification from <see cref="P:Avalonia.Platform.ITopLevelImpl.Activated"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.HandleClosed">
            <summary>
            Handles a closed notification from <see cref="P:Avalonia.Platform.ITopLevelImpl.Closed"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.HandleApplicationExiting">
            <summary>
            Handles the application exiting, either from the last window closing, or a call to <see cref="M:Avalonia.Controls.IApplicationLifecycle.Exit"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.HandleDeactivated">
            <summary>
            Handles a deactivated notification from <see cref="P:Avalonia.Platform.ITopLevelImpl.Deactivated"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.HandleInput(Avalonia.Input.Raw.RawInputEventArgs)">
            <summary>
            Handles input from <see cref="P:Avalonia.Platform.ITopLevelImpl.Input"/>.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.BeginMoveDrag">
            <summary>
            Starts moving a window with left button being held. Should be called from left mouse button press event handler
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TopLevel.BeginResizeDrag(Avalonia.Controls.WindowEdge)">
            <summary>
            Starts resizing a window. This function is used if an application has window resizing controls. 
            Should be called from left mouse button press event handler
            </summary>
        </member>
        <member name="T:Avalonia.Controls.WindowState">
            <summary>
            Defines the minimized/maximized state of a <see cref="T:Avalonia.Controls.Window"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowState.Normal">
            <summary>
            The window is neither minimized or maximized.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowState.Minimized">
            <summary>
            The window is minimized.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WindowState.Maximized">
            <summary>
            The window is maximized.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.SizeToContent">
            <summary>
            Determines how a <see cref="T:Avalonia.Controls.Window"/> will size itself to fit its content.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SizeToContent.Manual">
            <summary>
            The window will not automatically size itself to fit its content.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SizeToContent.Width">
            <summary>
            The window will size itself horizontally to fit its content.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SizeToContent.Height">
            <summary>
            The window will size itself vertically to fit its content.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.SizeToContent.WidthAndHeight">
            <summary>
            The window will size itself horizontally and vertically to fit its content.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.Window">
            <summary>
            A top-level window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.OpenWindows">
            <summary>
            Retrieves an enumeration of all Windows in the currently running application.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.SizeToContentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Window.SizeToContent"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.HasSystemDecorationsProperty">
            <summary>
            Enables of disables system window decorations (title bar, buttons, etc)
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.TitleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Window.Title"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Window.IconProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.Window.Icon"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Window.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.Window"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Window.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Window"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Window.#ctor(Avalonia.Platform.IWindowImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.Window"/> class.
            </summary>
            <param name="impl">The window implementation.</param>
        </member>
        <member name="E:Avalonia.Controls.Window.Avalonia#Controls#INameScope#Registered">
            <inheritdoc/>
        </member>
        <member name="E:Avalonia.Controls.Window.Avalonia#Controls#INameScope#Unregistered">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Window.PlatformImpl">
            <summary>
            Gets the platform-specific window implementation.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.SizeToContent">
            <summary>
            Gets or sets a value indicating how the window will size itself to fit its content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.Title">
            <summary>
            Gets or sets the title of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.HasSystemDecorations">
            <summary>
            Enables of disables system window decorations (title bar, buttons, etc)
            </summary>
            
        </member>
        <member name="P:Avalonia.Controls.Window.WindowState">
            <summary>
            Gets or sets the minimized/maximized state of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.Icon">
            <summary>
            Gets or sets the icon of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.Window.Avalonia#Layout#ILayoutRoot#MaxClientSize">
            <inheritdoc/>
        </member>
        <member name="P:Avalonia.Controls.Window.Avalonia#Styling#IStyleable#StyleKey">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Window.Close">
            <summary>
            Closes the window.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Window.Close(System.Object)">
            <summary>
            Closes a dialog window with the specified result.
            </summary>
            <param name="dialogResult">The dialog result.</param>
            <remarks>
            When the window is shown with the <see cref="M:Avalonia.Controls.Window.ShowDialog``1"/> method, the
            resulting task will produce the <see cref="F:Avalonia.Controls.Window._dialogResult"/> value when the window
            is closed.
            </remarks>
        </member>
        <member name="M:Avalonia.Controls.Window.Hide">
            <summary>
            Hides the window but does not close it.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Window.Show">
            <summary>
            Shows the window.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.Window.ShowDialog">
            <summary>
            Shows the window as a dialog.
            </summary>
            <returns>
            A task that can be used to track the lifetime of the dialog.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Window.ShowDialog``1">
            <summary>
            Shows the window as a dialog.
            </summary>
            <typeparam name="TResult">
            The type of the result produced by the dialog.
            </typeparam>
            <returns>.
            A task that can be used to retrive the result of the dialog when it closes.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.Window.Avalonia#Controls#INameScope#Register(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Window.Avalonia#Controls#INameScope#Find(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Window.Avalonia#Controls#INameScope#Unregister(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Window.MeasureOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.Window.HandleResized(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.RowDefinition">
            <summary>
            Holds a row definitions for a <see cref="T:Avalonia.Controls.Grid"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.RowDefinition.MaxHeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.RowDefinition.MaxHeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.RowDefinition.MinHeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.RowDefinition.MinHeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.RowDefinition.HeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.RowDefinition.Height"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RowDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.RowDefinition"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RowDefinition.#ctor(System.Double,Avalonia.Controls.GridUnitType)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.RowDefinition"/> class.
            </summary>
            <param name="value">The height of the row.</param>
            <param name="type">The height unit of the column.</param>
        </member>
        <member name="M:Avalonia.Controls.RowDefinition.#ctor(Avalonia.Controls.GridLength)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.RowDefinition"/> class.
            </summary>
            <param name="height">The height of the column.</param>
        </member>
        <member name="P:Avalonia.Controls.RowDefinition.ActualHeight">
            <summary>
            Gets the actual calculated height of the row.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.RowDefinition.MaxHeight">
            <summary>
            Gets or sets the maximum height of the row in DIPs.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.RowDefinition.MinHeight">
            <summary>
            Gets or sets the minimum height of the row in DIPs.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.RowDefinition.Height">
            <summary>
            Gets or sets the height of the row.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.RowDefinitions">
            <summary>
            A collection of <see cref="T:Avalonia.Controls.RowDefinition"/>s.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RowDefinitions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.RowDefinitions"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.RowDefinitions.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.RowDefinitions"/> class.
            </summary>
            <param name="s">A string representation of the row definitions.</param>
        </member>
        <member name="T:Avalonia.Controls.ScrollViewer">
            <summary>
            A control scrolls its content if the content is bigger than the space available.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.CanScrollHorizontallyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.CanScrollHorizontally"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.ExtentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.Extent"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.OffsetProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.Offset"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.ViewportProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.Viewport"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.HorizontalScrollBarMaximumProperty">
            <summary>
            Defines the HorizontalScrollBarMaximum property.
            </summary>
            <remarks>
            There is no public C# accessor for this property as it is intended to be bound to by a 
            <see cref="T:Avalonia.Controls.Presenters.ScrollContentPresenter"/> in the control's template.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.HorizontalScrollBarValueProperty">
            <summary>
            Defines the HorizontalScrollBarValue property.
            </summary>
            <remarks>
            There is no public C# accessor for this property as it is intended to be bound to by a 
            <see cref="T:Avalonia.Controls.Presenters.ScrollContentPresenter"/> in the control's template.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.HorizontalScrollBarViewportSizeProperty">
            <summary>
            Defines the HorizontalScrollBarViewportSize property.
            </summary>
            <remarks>
            There is no public C# accessor for this property as it is intended to be bound to by a 
            <see cref="T:Avalonia.Controls.Presenters.ScrollContentPresenter"/> in the control's template.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibility"/> property.
            </summary>
            <remarks>
            There is no public C# accessor for this property as it is intended to be bound to by a 
            <see cref="T:Avalonia.Controls.Presenters.ScrollContentPresenter"/> in the control's template.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.VerticalScrollBarMaximumProperty">
            <summary>
            Defines the VerticalScrollBarMaximum property.
            </summary>
            <remarks>
            There is no public C# accessor for this property as it is intended to be bound to by a 
            <see cref="T:Avalonia.Controls.Presenters.ScrollContentPresenter"/> in the control's template.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.VerticalScrollBarValueProperty">
            <summary>
            Defines the VerticalScrollBarValue property.
            </summary>
            <remarks>
            There is no public C# accessor for this property as it is intended to be bound to by a 
            <see cref="T:Avalonia.Controls.Presenters.ScrollContentPresenter"/> in the control's template.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.VerticalScrollBarViewportSizeProperty">
            <summary>
            Defines the VerticalScrollBarViewportSize property.
            </summary>
            <remarks>
            There is no public C# accessor for this property as it is intended to be bound to by a 
            <see cref="T:Avalonia.Controls.Presenters.ScrollContentPresenter"/> in the control's template.
            </remarks>
        </member>
        <member name="F:Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibility"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.ScrollViewer"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.ScrollViewer"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.Extent">
            <summary>
            Gets the extent of the scrollable content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.Offset">
            <summary>
            Gets or sets the current scroll offset.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.Viewport">
            <summary>
            Gets the size of the viewport on the scrollable content.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.CanScrollHorizontally">
            <summary>
            Gets a value indicating whether the content can be scrolled horizontally.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.HorizontalScrollBarVisibility">
            <summary>
            Gets or sets the horizontal scrollbar visibility.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.VerticalScrollBarVisibility">
            <summary>
            Gets or sets the vertical scrollbar visibility.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.HorizontalScrollBarMaximum">
            <summary>
            Gets the maximum horizontal scrollbar value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.HorizontalScrollBarValue">
            <summary>
            Gets or sets the horizontal scrollbar value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.HorizontalScrollBarViewportSize">
            <summary>
            Gets the size of the horizontal scrollbar viewport.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.VerticalScrollBarMaximum">
            <summary>
            Gets the maximum vertical scrollbar value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.VerticalScrollBarValue">
            <summary>
            Gets or sets the vertical scrollbar value.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.ScrollViewer.VerticalScrollBarViewportSize">
            <summary>
            Gets the size of the vertical scrollbar viewport.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.GetHorizontalScrollBarVisibility(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the HorizontalScrollBarVisibility attached property.
            </summary>
            <param name="control">The control to read the value from.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.SetHorizontalScrollBarVisibility(Avalonia.Controls.Control,Avalonia.Controls.Primitives.ScrollBarVisibility)">
            <summary>
            Gets the value of the HorizontalScrollBarVisibility attached property.
            </summary>
            <param name="control">The control to set the value on.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.GetVerticalScrollBarVisibility(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the VerticalScrollBarVisibility attached property.
            </summary>
            <param name="control">The control to read the value from.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Avalonia.Controls.ScrollViewer.SetVerticalScrollBarVisibility(Avalonia.Controls.Control,Avalonia.Controls.Primitives.ScrollBarVisibility)">
            <summary>
            Gets the value of the VerticalScrollBarVisibility attached property.
            </summary>
            <param name="control">The control to set the value on.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="T:Avalonia.Controls.Orientation">
            <summary>
            Defines vertical or horizontal orientation.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Orientation.Vertical">
            <summary>
            Vertical orientation.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.Orientation.Horizontal">
            <summary>
            Horizontal orientation.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.StackPanel">
            <summary>
            A panel which lays out its children horizontally or vertically.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.StackPanel.GapProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.StackPanel.Gap"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.StackPanel.OrientationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.StackPanel.Orientation"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.StackPanel.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.StackPanel"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.StackPanel.Gap">
            <summary>
            Gets or sets the size of the gap to place between child controls.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.StackPanel.Orientation">
            <summary>
            Gets or sets the orientation in which child controls will be layed out.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.StackPanel.Avalonia#Input#INavigableContainer#GetControl(Avalonia.Input.NavigationDirection,Avalonia.Input.IInputElement)">
            <summary>
            Gets the next control in the specified direction.
            </summary>
            <param name="direction">The movement direction.</param>
            <param name="from">The control from which movement begins.</param>
            <returns>The control.</returns>
        </member>
        <member name="M:Avalonia.Controls.StackPanel.GetControlInDirection(Avalonia.Input.NavigationDirection,Avalonia.Controls.IControl)">
            <summary>
            Gets the next control in the specified direction.
            </summary>
            <param name="direction">The movement direction.</param>
            <param name="from">The control from which movement begins.</param>
            <returns>The control.</returns>
        </member>
        <member name="M:Avalonia.Controls.StackPanel.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the control.
            </summary>
            <param name="availableSize">The available size.</param>
            <returns>The desired size of the control.</returns>
        </member>
        <member name="M:Avalonia.Controls.StackPanel.ArrangeOverride(Avalonia.Size)">
            <summary>
            Arranges the control's children.
            </summary>
            <param name="finalSize">The size allocated to the control.</param>
            <returns>The space taken.</returns>
        </member>
        <member name="T:Avalonia.Controls.TabControl">
            <summary>
            A tab control that displays a tab strip along with the content of the selected tab.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabControl.TransitionProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TabControl.Transition"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabControl.ContentSelector">
            <summary>
            Defines an <see cref="T:Avalonia.Controls.Templates.IMemberSelector"/> that selects the content of a <see cref="T:Avalonia.Controls.TabItem"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabControl.HeaderSelector">
            <summary>
            Defines an <see cref="T:Avalonia.Controls.Templates.IMemberSelector"/> that selects the header of a <see cref="T:Avalonia.Controls.TabItem"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabControl.TabStripPlacementProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TabControl.TabStripPlacement"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TabControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.TabControl"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TabControl.Pages">
            <summary>
            Gets the pages portion of the <see cref="T:Avalonia.Controls.TabControl"/>'s template.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TabControl.TabStrip">
            <summary>
            Gets the tab strip portion of the <see cref="T:Avalonia.Controls.TabControl"/>'s template.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TabControl.Transition">
            <summary>
            Gets or sets the transition to use when switching tabs.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TabControl.TabStripPlacement">
            <summary>
            Gets or sets the tabstrip placement of the tabcontrol.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TabControl.SelectContent(System.Object)">
            <summary>
            Selects the content of a tab item.
            </summary>
            <param name="o">The tab item.</param>
            <returns>The content.</returns>
        </member>
        <member name="M:Avalonia.Controls.TabControl.SelectHeader(System.Object)">
            <summary>
            Selects the header of a tab item.
            </summary>
            <param name="o">The tab item.</param>
            <returns>The content.</returns>
        </member>
        <member name="T:Avalonia.Controls.TabItem">
            <summary>
            An item in  a <see cref="T:Avalonia.Controls.Primitives.TabStrip"/> or <see cref="T:Avalonia.Controls.TabControl"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TabItem.IsSelectedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TabItem.IsSelected"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TabItem.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.TabItem"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TabItem.IsSelected">
            <summary>
            Gets or sets the selection state of the item.
            </summary>
        </member>
        <member name="T:Avalonia.Controls.TextBlock">
            <summary>
            A control that displays a block of text.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.BackgroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.Background"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.FontFamilyProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.FontFamily"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.FontSizeProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.FontSize"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.FontStyleProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.FontStyle"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.FontWeightProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.FontWeight"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.ForegroundProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.Foreground"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.TextProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.Text"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.TextAlignmentProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.TextAlignment"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TextBlock.TextWrappingProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TextBlock.TextWrapping"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.TextBlock"/> class.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Controls.TextBlock"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.Background">
            <summary>
            Gets or sets a brush used to paint the control's background.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.FontFamily">
            <summary>
            Gets or sets the font family.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.FontSize">
            <summary>
            Gets or sets the font size.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.FontStyle">
            <summary>
            Gets or sets the font style.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.FontWeight">
            <summary>
            Gets or sets the font weight.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.Foreground">
            <summary>
            Gets or sets a brush used to paint the text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.FormattedText">
            <summary>
            Gets the <see cref="P:Avalonia.Controls.TextBlock.FormattedText"/> used to render the text.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.TextWrapping">
            <summary>
            Gets or sets the control's text wrapping mode.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TextBlock.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.GetFontFamily(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Controls.TextBlock.FontFamilyProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <returns>The font family.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.GetFontSize(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Controls.TextBlock.FontSizeProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <returns>The font family.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.GetFontStyle(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Controls.TextBlock.FontStyleProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <returns>The font family.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.GetFontWeight(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Controls.TextBlock.FontWeightProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <returns>The font family.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.GetForeground(Avalonia.Controls.Control)">
            <summary>
            Gets the value of the attached <see cref="F:Avalonia.Controls.TextBlock.ForegroundProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <returns>The foreground.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.SetFontFamily(Avalonia.Controls.Control,System.String)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Controls.TextBlock.FontFamilyProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The property value to set.</param>
            <returns>The font family.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.SetFontSize(Avalonia.Controls.Control,System.Double)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Controls.TextBlock.FontSizeProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The property value to set.</param>
            <returns>The font family.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.SetFontStyle(Avalonia.Controls.Control,Avalonia.Media.FontStyle)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Controls.TextBlock.FontStyleProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The property value to set.</param>
            <returns>The font family.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.SetFontWeight(Avalonia.Controls.Control,Avalonia.Media.FontWeight)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Controls.TextBlock.FontWeightProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The property value to set.</param>
            <returns>The font family.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.SetForeground(Avalonia.Controls.Control,Avalonia.Media.IBrush)">
            <summary>
            Sets the value of the attached <see cref="F:Avalonia.Controls.TextBlock.ForegroundProperty"/> on a control.
            </summary>
            <param name="control">The control.</param>
            <param name="value">The property value to set.</param>
            <returns>The font family.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.Render(Avalonia.Media.DrawingContext)">
            <summary>
            Renders the <see cref="T:Avalonia.Controls.TextBlock"/> to a drawing context.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.CreateFormattedText(Avalonia.Size)">
            <summary>
            Creates the <see cref="P:Avalonia.Controls.TextBlock.FormattedText"/> used to render the text.
            </summary>
            <param name="constraint">The constraint of the text.</param>
            <returns>A <see cref="P:Avalonia.Controls.TextBlock.FormattedText"/> object.</returns>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.InvalidateFormattedText">
            <summary>
            Invalidates <see cref="P:Avalonia.Controls.TextBlock.FormattedText"/>.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TextBlock.MeasureOverride(Avalonia.Size)">
            <summary>
            Measures the control.
            </summary>
            <param name="availableSize">The available size for the control.</param>
            <returns>The desired size.</returns>
        </member>
        <member name="T:Avalonia.Controls.TreeView">
            <summary>
            Displays a hierachical tree of data.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TreeView.AutoScrollToSelectedItem"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TreeView.SelectedItemProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TreeView.SelectedItem"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TreeView.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.TreeView"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TreeView.ItemContainerGenerator">
            <summary>
            Gets the <see cref="T:Avalonia.Controls.Generators.ITreeItemContainerGenerator"/> for the tree view.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TreeView.AutoScrollToSelectedItem">
            <summary>
            Gets or sets a value indicating whether to automatically scroll to newly selected items.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TreeView.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TreeView.CreateItemContainerGenerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TreeView.OnGotFocus(Avalonia.Input.GotFocusEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TreeView.OnPointerPressed(Avalonia.Input.PointerPressedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TreeView.UpdateSelectionFromContainer(Avalonia.Controls.IControl,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the selection for an item based on user interaction.
            </summary>
            <param name="container">The container.</param>
            <param name="select">Whether the item should be selected or unselected.</param>
            <param name="rangeModifier">Whether the range modifier is enabled (i.e. shift key).</param>
            <param name="toggleModifier">Whether the toggle modifier is enabled (i.e. ctrl key).</param>
        </member>
        <member name="M:Avalonia.Controls.TreeView.UpdateSelectionFromEventSource(Avalonia.Interactivity.IInteractive,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the selection based on an event that may have originated in a container that 
            belongs to the control.
            </summary>
            <param name="eventSource">The control that raised the event.</param>
            <param name="select">Whether the container should be selected or unselected.</param>
            <param name="rangeModifier">Whether the range modifier is enabled (i.e. shift key).</param>
            <param name="toggleModifier">Whether the toggle modifier is enabled (i.e. ctrl key).</param>
            <returns>
            True if the event originated from a container that belongs to the control; otherwise
            false.
            </returns>
        </member>
        <member name="M:Avalonia.Controls.TreeView.GetContainerFromEventSource(Avalonia.Interactivity.IInteractive)">
            <summary>
            Tries to get the container that was the source of an event.
            </summary>
            <param name="eventSource">The control that raised the event.</param>
            <returns>The container or null if the event did not originate in a container.</returns>
        </member>
        <member name="M:Avalonia.Controls.TreeView.ContainerMaterialized(System.Object,Avalonia.Controls.Generators.ItemContainerEventArgs)">
            <summary>
            Called when a new item container is materialized, to set its selected state.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Avalonia.Controls.TreeView.MarkContainerSelected(Avalonia.Controls.IControl,System.Boolean)">
            <summary>
            Sets a container's 'selected' class or <see cref="P:Avalonia.Controls.ISelectable.IsSelected"/>.
            </summary>
            <param name="container">The container.</param>
            <param name="selected">Whether the control is selected</param>
        </member>
        <member name="T:Avalonia.Controls.TreeViewItem">
            <summary>
            An item in a <see cref="T:Avalonia.Controls.TreeView"/>.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TreeViewItem.IsExpandedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TreeViewItem.IsExpanded"/> property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.TreeViewItem.IsSelectedProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.TreeViewItem.IsSelected"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TreeViewItem.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.TreeViewItem"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TreeViewItem.IsExpanded">
            <summary>
            Gets or sets a value indicating whether the item is expanded to show its children.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TreeViewItem.IsSelected">
            <summary>
            Gets or sets the selection state of the item.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.TreeViewItem.ItemContainerGenerator">
            <summary>
            Gets the <see cref="T:Avalonia.Controls.Generators.ITreeItemContainerGenerator"/> for the tree view.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.TreeViewItem.CreateItemContainerGenerator">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TreeViewItem.OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.TreeViewItem.OnKeyDown(Avalonia.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.WrapPanel">
            <summary>
            Positions child elements in sequential position from left to right, 
            breaking content to the next line at the edge of the containing box. 
            Subsequent ordering happens sequentially from top to bottom or from right to left, 
            depending on the value of the Orientation property.
            </summary>
        </member>
        <member name="F:Avalonia.Controls.WrapPanel.OrientationProperty">
            <summary>
            Defines the <see cref="P:Avalonia.Controls.WrapPanel.Orientation"/> property.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.WrapPanel.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Avalonia.Controls.WrapPanel"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Controls.WrapPanel.Orientation">
            <summary>
            Gets or sets the orientation in which child controls will be layed out.
            </summary>
        </member>
        <member name="M:Avalonia.Controls.WrapPanel.Avalonia#Input#INavigableContainer#GetControl(Avalonia.Input.NavigationDirection,Avalonia.Input.IInputElement)">
            <summary>
            Gets the next control in the specified direction.
            </summary>
            <param name="direction">The movement direction.</param>
            <param name="from">The control from which movement begins.</param>
            <returns>The control.</returns>
        </member>
        <member name="M:Avalonia.Controls.WrapPanel.MeasureOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="M:Avalonia.Controls.WrapPanel.ArrangeOverride(Avalonia.Size)">
            <inheritdoc/>
        </member>
        <member name="T:Avalonia.Controls.WrapPanel.UVSize">
            <summary>
            Used to not not write sepearate code for horizontal and vertical orientation.
            U is direction in line. (x if orientation is horizontal)
            V is direction of lines. (y if orientation is horizonral)
            </summary>
        </member>
        <member name="T:Avalonia.Application">
            <summary>
            Encapsulates a Avalonia application.
            </summary>
            <remarks>
            The <see cref="T:Avalonia.Application"/> class encapsulates Avalonia application-specific
            functionality, including:
            - A global set of <see cref="P:Avalonia.Application.DataTemplates"/>.
            - A global set of <see cref="P:Avalonia.Application.Styles"/>.
            - A <see cref="P:Avalonia.Application.FocusManager"/>.
            - An <see cref="P:Avalonia.Application.InputManager"/>.
            - Registers services needed by the rest of Avalonia in the <see cref="M:Avalonia.Application.RegisterServices"/>
            method.
            - Tracks the lifetime of the application.
            </remarks>
        </member>
        <member name="F:Avalonia.Application._dataTemplates">
            <summary>
            The application-global data templates.
            </summary>
        </member>
        <member name="M:Avalonia.Application.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Avalonia.Application"/> class.
            </summary>
        </member>
        <member name="P:Avalonia.Application.Current">
            <summary>
            Gets the current instance of the <see cref="T:Avalonia.Application"/> class.
            </summary>
            <value>
            The current instance of the <see cref="T:Avalonia.Application"/> class.
            </value>
        </member>
        <member name="P:Avalonia.Application.DataTemplates">
            <summary>
            Gets or sets the application's global data templates.
            </summary>
            <value>
            The application's global data templates.
            </value>
        </member>
        <member name="P:Avalonia.Application.FocusManager">
            <summary>
            Gets the application's focus manager.
            </summary>
            <value>
            The application's focus manager.
            </value>
        </member>
        <member name="P:Avalonia.Application.InputManager">
            <summary>
            Gets the application's input manager.
            </summary>
            <value>
            The application's input manager.
            </value>
        </member>
        <member name="P:Avalonia.Application.Clipboard">
            <summary>
            Gets the application clipboard.
            </summary>
        </member>
        <member name="P:Avalonia.Application.Styles">
            <summary>
            Gets the application's global styles.
            </summary>
            <value>
            The application's global styles.
            </value>
            <remarks>
            Global styles apply to all windows in the application.
            </remarks>
        </member>
        <member name="P:Avalonia.Application.Avalonia#Styling#IStyleHost#StylingParent">
            <summary>
            Gets the styling parent of the application, which is null.
            </summary>
        </member>
        <member name="M:Avalonia.Application.Initialize">
            <summary>
            Initializes the application by loading XAML etc.
            </summary>
        </member>
        <member name="M:Avalonia.Application.Run(Avalonia.Input.ICloseable)">
            <summary>
            Runs the application's main loop until the <see cref="T:Avalonia.Input.ICloseable"/> is closed.
            </summary>
            <param name="closable">The closable to track</param>
        </member>
        <member name="M:Avalonia.Application.Exit">
            <summary>
            Exits the application
            </summary>
        </member>
        <member name="E:Avalonia.Application.OnExit">
            <summary>
            Sent when the application is exiting.
            </summary>
        </member>
        <member name="M:Avalonia.Application.OnExiting(System.Object,System.EventArgs)">
            <summary>
            Called when the application is exiting.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Avalonia.Application.RegisterServices">
            <summary>
            Register's the services needed by Avalonia.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IPopupImpl">
            <summary>
            Defines a platform-specific popup window implementation.
            </summary>
        </member>
        <member name="T:Avalonia.Platform.ITopLevelImpl">
            <summary>
            Defines a platform-specific top-level window implementation.
            </summary>
            <remarks>
            This interface is the common interface to <see cref="T:Avalonia.Platform.IWindowImpl"/> and
            <see cref="T:Avalonia.Platform.IPopupImpl"/>.
            </remarks>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.ClientSize">
            <summary>
            Gets or sets the client size of the window.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.Scaling">
            <summary>
            Gets the scaling factor for the window.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.Handle">
            <summary>
            Gets the platform window handle.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.Activated">
            <summary>
            Gets or sets a method called when the window is activated (receives focus).
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.Closed">
            <summary>
            Gets or sets a method called when the window is closed.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.Deactivated">
            <summary>
            Gets or sets a method called when the window is deactivated (loses focus).
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.Input">
            <summary>
            Gets or sets a method called when the window receives input.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.Paint">
            <summary>
            Gets or sets a method called when the window requires painting.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.Resized">
            <summary>
            Gets or sets a method called when the window is resized.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.ITopLevelImpl.ScalingChanged">
            <summary>
            Gets or sets a method called when the window's scaling changes.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.ITopLevelImpl.Activate">
            <summary>
            Activates the window.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.ITopLevelImpl.Invalidate(Avalonia.Rect)">
            <summary>
            Invalidates a rect on the window.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.ITopLevelImpl.SetInputRoot(Avalonia.Input.IInputRoot)">
            <summary>
            Sets the <see cref="T:Avalonia.Input.IInputRoot"/> for the window.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.ITopLevelImpl.PointToClient(Avalonia.Point)">
            <summary>
            Converts a point from screen to client coordinates.
            </summary>
            <param name="point">The point in screen coordinates.</param>
            <returns>The point in client coordinates.</returns>
        </member>
        <member name="M:Avalonia.Platform.ITopLevelImpl.PointToScreen(Avalonia.Point)">
            <summary>
            Converts a point from client to screen coordinates.
            </summary>
            <param name="point">The point in client coordinates.</param>
            <returns>The point in screen coordinates.</returns>
        </member>
        <member name="M:Avalonia.Platform.ITopLevelImpl.SetCursor(Avalonia.Platform.IPlatformHandle)">
            <summary>
            Sets the cursor associated with the window.
            </summary>
            <param name="cursor">The cursor. Use null for default cursor</param>
        </member>
        <member name="M:Avalonia.Platform.ITopLevelImpl.Show">
            <summary>
            Shows the toplevel.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.ITopLevelImpl.Hide">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.ITopLevelImpl.BeginMoveDrag">
            <summary>
            Starts moving a window with left button being held. Should be called from left mouse button press event handler.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.ITopLevelImpl.BeginResizeDrag(Avalonia.Controls.WindowEdge)">
            <summary>
            Starts resizing a window. This function is used if an application has window resizing controls. 
            Should be called from left mouse button press event handler
            </summary>
        </member>
        <member name="T:Avalonia.Platform.IWindowImpl">
            <summary>
            Defines a platform-specific window implementation.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowImpl.MaxClientSize">
            <summary>
            Gets the maximum size of a window on the system.
            </summary>
        </member>
        <member name="P:Avalonia.Platform.IWindowImpl.WindowState">
            <summary>
            Gets or sets the minimized/maximized state of the window.
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.SetTitle(System.String)">
            <summary>
            Sets the title of the window.
            </summary>
            <param name="title">The title.</param>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.ShowDialog">
            <summary>
            Shows the window as a dialog.
            </summary>
            <returns>
            An <see cref="T:System.IDisposable"/> that should be used to close the window.
            </returns>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.SetSystemDecorations(System.Boolean)">
            <summary>
            Enables of disables system window decorations (title bar, buttons, etc)
            </summary>
        </member>
        <member name="M:Avalonia.Platform.IWindowImpl.SetIcon(Avalonia.Platform.IWindowIconImpl)">
            <summary>
            Sets the icon of this window.
            </summary>
        </member>
    </members>
</doc>
