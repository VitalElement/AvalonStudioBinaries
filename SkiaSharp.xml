<doc>
    <assembly>
        <name>SkiaSharp</name>
    </assembly>
    <members>
        <member name="T:SkiaSharp.SKAlphaType">
            <summary>Describes how to interpret the alpha component of a pixel.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKAlphaType.Opaque">
            <summary>All pixels are stored as opaque.</summary>
        </member>
        <member name="F:SkiaSharp.SKAlphaType.Premul">
            <summary>
                <para>All pixels have their alpha premultiplied in their color components.</para>
                <para>This is the natural format for the rendering target pixels.</para>
            </summary>
        </member>
        <member name="F:SkiaSharp.SKAlphaType.Unknown">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKAlphaType.Unpremul">
            <summary>
                <para>All pixels have their color components stored without any regard to the alpha. e.g. this is the default configuration for PNG images.</para>
                <para>This alpha-type is ONLY supported for input images. Rendering cannot generate this on output.</para>
            </summary>
        </member>
        <member name="T:SkiaSharp.SKAutoCanvasRestore">
            <summary>Convenience class used to restore the canvas state in a using statement.</summary>
            <remarks>This class can be used in a using statement to save the state of the canvas (matrix, clip and draw filter) allowing you to change these components and have them automatically undone by virtue of having the Dispose method restore the canvas state to the state it was when this instance was created.</remarks>
        </member>
        <member name="C:SkiaSharp.SKAutoCanvasRestore(SkiaSharp.SKCanvas,System.Boolean)">
            <param name="canvas">The canvas whose state will be preserved</param>
            <param name="doSave">Determines whether you want the <see cref="M:SkiaSharp.SKCanvas.Save" /> method to be invoked on your behalf at this point.</param>
            <summary>Creates a canvas restore point</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKAutoCanvasRestore.Dispose">
            <summary>Disposes the canvas restore point, restoring the state of the canvas (matrix, clip and draw filter) to the state it was when the object was creatd.  This operation will not do anything if you had previously manually called the <see cref="M:SkiaSharp.SKAutoCanvasRestore.Restore" /> method.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKAutoCanvasRestore.Restore">
            <summary>Restores the canvas restore point, restoring the state of the canvas (matrix, clip and draw filter) to the state it was when the object was creatd.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKBitmap">
            <summary>Raster bitmap.</summary>
            <remarks>
                <para>This class specifies a raster bitmap. A bitmap has an integer width and height, and a format (colortype), and a pointer to the actual pixels. Bitmaps can be drawn into a <see cref="T:SkiaSharp.SKCanvas" />, but they are also used to specify the target of a <see cref="T:SkiaSharp.SKCanvas" />' drawing operations.</para>
                <para>An SkBitmap exposes, which lets a caller write its pixels; the constness is considered to apply to the bitmap's configuration, not its contents.</para>
                <para>To retrive a pointer to the raw image data of the SKBitmap, call the <see cref="M:SkiaSharp.SKBitmap.LockPixels" /> method, and then call the <see cref="M:SkiaSharp.SKBitmap.GetPixels" /> method to get a pointer to the image data.  Once you no longer need to use the raw data pointer, call the <see cref="M:SkiaSharp.SKBitmap.UnlockPixels" /> method.   The raw data is laid out in the format configured at the time that the SKBitmap was created.</para>
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKBitmap">
            <summary>Default construct creates a bitmap with zero width and height, and no pixels. Its colortype is set to <see cref="E:SkiaSharp.SKColorType.Unknown." /></summary>
            <remarks>
                <para>This constructor does not allocate a backing store for the bitmap.</para>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKBitmap(SkiaSharp.SKImageInfo)">
            <param name="info">Description of the desired image format.</param>
            <summary>Constructor that configures the bitmap based on an <see cref="T:SkiaSharp.SKImageInfo" /> specification.</summary>
            <remarks>This constructor might throw an exception if it is not possible to create a bitmap with the specified configuration (for example, the image info requires a color table, and there is no color table).</remarks>
        </member>
        <member name="C:SkiaSharp.SKBitmap(SkiaSharp.SKImageInfo,System.Int32)">
            <param name="info">To be added.</param>
            <param name="rowBytes">To be added.</param>
            <summary>Constructor that configures the bitmap based on an <see cref="T:SkiaSharp.SKImageInfo" /> specification, and the specified number of bytes per row (the stride size)</summary>
            <remarks>This constructor might throw an exception if it is not possible to create a bitmap with the specified configuration (for example, the image info requires a color table, and there is no color table).</remarks>
        </member>
        <member name="C:SkiaSharp.SKBitmap(System.Int32,System.Int32,System.Boolean)">
            <param name="width">Desired width in pixels.</param>
            <param name="height">Desired height in pixels.</param>
            <param name="isOpaque">If true, sets the <see cref="T:SkiaSharp.SKAlphaType" /> to Opaque, otherwise it sets it to Premul</param>
            <summary>Creates a bitmap with the given width, height and opacity with color type set to <see cref="E:SkiaSharp.SKColorType.N_32" /></summary>
            <remarks>
                <para>This constructor might throw an exception if it is not possible to create a bitmap with the specified configuration (for example, the image info requires a color table, and there is no color table).</para>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKBitmap(System.Int32,System.Int32,SkiaSharp.SKColorType,SkiaSharp.SKAlphaType)">
            <param name="width">Desired width in pixels.</param>
            <param name="height">Desired height in pixels.</param>
            <param name="colorType">The desired color type.</param>
            <param name="alphaType">The desired alpha type.</param>
            <summary>Creates a bitmap with the given width, height, color type and alpha type.</summary>
            <remarks>This constructor might throw an exception if it is not possible to create a bitmap with the specified configuration (for example, the image info requires a color table, and there is no color table).</remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.AlphaType">
            <summary>Returns the configured alpha type for the bitmap.</summary>
            <value>
                <para />
            </value>
            <remarks>This determines the kind of encoding used for the alpha channel, opaque, premultiplied or unpremultiplied.</remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.ByteCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.Bytes">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.BytesPerPixel">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.CanCopyTo(SkiaSharp.SKColorType)">
            <param name="colorType">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.ColorType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Copy">
            <summary>Copies the contents of the bitmap and returns the copy.</summary>
            <returns>The copy of the bitmap, or <paramref name="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Copy(SkiaSharp.SKColorType)">
            <param name="colorType">The color type to use for the copy of the bitmap.</param>
            <summary>Copies the contents of the bitmap with the specified color type and returns the copy.</summary>
            <returns>The copy of the bitmap, or <paramref name="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.CopyTo(SkiaSharp.SKBitmap)">
            <param name="destination">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.CopyTo(SkiaSharp.SKBitmap,SkiaSharp.SKColorType)">
            <param name="destination">To be added.</param>
            <param name="colorType">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Decode(SkiaSharp.SKCodec)">
            <param name="codec">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Decode(SkiaSharp.SKData)">
            <param name="data">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Decode(SkiaSharp.SKStream)">
            <param name="stream">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Decode(System.Byte[])">
            <param name="buffer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Decode(System.String)">
            <param name="filename">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Decode(SkiaSharp.SKStreamRewindable,SkiaSharp.SKColorType)">
            <param name="stream">To be added.</param>
            <param name="pref">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Decode(System.Byte[],SkiaSharp.SKColorType)">
            <param name="buffer">To be added.</param>
            <param name="pref">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Decode(System.String,SkiaSharp.SKColorType)">
            <param name="filename">To be added.</param>
            <param name="pref">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.DecodeBounds(SkiaSharp.SKData)">
            <param name="data">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.DecodeBounds(SkiaSharp.SKStream)">
            <param name="stream">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.DecodeBounds(System.Byte[])">
            <param name="buffer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.DecodeBounds(System.String)">
            <param name="filename">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.DecodeBounds(SkiaSharp.SKStreamRewindable,SkiaSharp.SKColorType)">
            <param name="stream">To be added.</param>
            <param name="pref">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.DecodeBounds(System.Byte[],SkiaSharp.SKColorType)">
            <param name="buffer">To be added.</param>
            <param name="pref">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.DecodeBounds(System.String,SkiaSharp.SKColorType)">
            <param name="filename">To be added.</param>
            <param name="pref">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.DrawsNothing">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Erase(SkiaSharp.SKColor)">
            <param name="color">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Erase(SkiaSharp.SKColor,SkiaSharp.SKRectI)">
            <param name="color">To be added.</param>
            <param name="rect">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.GetPixel(System.Int32,System.Int32)">
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <summary>Returns the color for the pixel at the specified location</summary>
            <returns>Alpha only colortypes return black with the appropriate alpha set.  The value is undefined for the Unknown SkColorType or if x or y are out of bounds, or if the bitmap does not have any pixels (or has not be locked with <see cref="M:SkiaSharp.SKBitmap.LockPixels" />)</returns>
            <remarks>In most cases this will require un-premultiplying the color.  </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.GetPixels(System.IntPtr@)">
            <param name="length">The lenght of the pixel buffer returned.</param>
            <summary>Returns the address of the pixels for this SKBitmap</summary>
            <returns>Returns a pointer to the region that contains the pixel data for this bitmap.   This might return <see langword="null" /> if there is no pixel buffer associated with this bitmap.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.Height">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.Info">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.IsEmpty">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.IsImmutable">
            <summary>Indicates if the bitmap contents are immutable, meaning that the contents of its pixels will not change for the lifetime of the bitmap.</summary>
            <value>
                <see langword="true" /> if it is immutable, <see langword="false" /> otherwise.</value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.IsNull">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.IsVolatile">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.LockPixels">
            <summary>Call this to ensure that the bitmap points to the current pixel address in the pixelref. </summary>
            <remarks>
                <para>This allows pixelrefs that implement cached/deferred image decoding to know when there are active clients of a given image.</para>
                <para>Balance it with a call to <see cref="M:SkiaSharp.SKBitmap.UnlockPixels" />. These calls are harmless if there is no pixelref.</para>
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.Pixels">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Reset">
            <summary>
                <para>Reset the bitmap to its initial state (see default constructor). </para>
            </summary>
            <remarks>
                <para>If we are a (shared) owner of the pixels, that ownership is decremented.</para>
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.RowBytes">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.SetImmutable">
            <summary>Marks the bitmap as immutable.</summary>
            <remarks>
                <para>Marks this bitmap as immutable, meaning that the contents of its pixels will not change for the lifetime of the bitmap and of the underlying pixelref. This state can be set, but it cannot be cleared once it is set. This state propagates to all other bitmaps that share the same pixelref.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.SetPixel(System.Int32,System.Int32,SkiaSharp.SKColor)">
            <param name="x">X coordinate</param>
            <param name="y">Y coordinat</param>
            <param name="color">Color to set</param>
            <summary>Sets the color of the pixel at a specified location.</summary>
            <remarks>This method will set the color of the pixel on the bitmap to the specified <paramref name="color" /> performing any necessary color conversions to the format of the bitmap.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.UnlockPixels">
            <summary>Call this to balance a previous call to <see cref="M:SkiaSharp.SKBitmap.LockPixels" />.</summary>
            <remarks>
                <para>When you are finished access the pixel memory, call this to balance a previous call to <see cref="M:SkiaSharp.SKBitmap.LockPixels" />. This allows pixelrefs that implement cached/deferred image decoding to know when there are active clients of a given image.</para>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.Width">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKBlurStyle">
            <summary>Blur types for the <see cref="M:SkiaSharp.SKMaskFilteter.CreateBlur" /> method.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKBlurStyle.Inner">
            <summary>Fuzzy inside, nothing outside</summary>
        </member>
        <member name="F:SkiaSharp.SKBlurStyle.Normal">
            <summary>Fuzzy inside and outside</summary>
        </member>
        <member name="F:SkiaSharp.SKBlurStyle.Outer">
            <summary>Nothing inside, fuzzy outside</summary>
        </member>
        <member name="F:SkiaSharp.SKBlurStyle.Solid">
            <summary>Solid inside, fuzzy outside</summary>
        </member>
        <member name="T:SkiaSharp.SKCanvas">
            <summary>Encapsulates all of the state about drawing into a device (bitmap).</summary>
            <remarks>
                <para>Encapsulates all of the state about drawing into a device (bitmap).</para>
                <para />
                <para>This includes a reference to the device itself, and a stack of matrix/clip values. For any given draw call (e.g. drawRect), the geometry of the object being drawn is transformed by the concatenation of all the matrices in the stack. The transformed geometry is clipped by the intersection of all of the clips in the stack.</para>
                <para />
                <para>While the Canvas holds the state of the drawing device, the state (style) of the object being drawn is held by the Paint, which is provided as a parameter to each of the draw() methods. The Paint holds attributes such as color, typeface, the text size, the stroke width, the shader (for example, gradients, patterns), etc.</para>
                <para />
                <para>The SkCanvas is returned when accessing the <see cref="P:SkiaSharp.SKSurface.Canvas" /> property of a surface.</para>
                <para>Transformations</para>
                <para>The <see cref="T:SkiaSharp.SKCanvas" /> supports a number of 2D transformations.   Unlike other 2D graphic systems like CoreGraphics or Cairo, SKCanvas extends the transformations to include perspectives.   </para>
                <para>You can use the <see cref="M:SkiaSharp.SKCanvas.Scale" />, <see cref="M:SkiaSharp.SKCanvas.Skew" />, <see cref="M:SkiaSharp.SKCanvas.Translate" />, <see cref="M:SkiaSharp.SKCanvas.RotateDegrees" />, <see cref="M:SkiaSharp.SKCanvas.RotateRadians" /> to perform some of the most common 2D transformations.   </para>
                <para>For more control you can use the <see cref="M:SkiaSharp.SKCanvas.SetMatrix" /> to set an arbitrary transformation using the <see cref="T:SkiaSharp.SKMatrix" /> and the <see cref="M:SkiaSharp.SKCanvas.Concat" /> to concatenate an <see cref="T:SkiaSharp.SKMatrix" /> transformation to the current matrix in use.</para>
                <para>The <see cref="M:SkiaSharp.SKCanvas.ResetMatrix" /> can be used to reset the state of the matrix</para>
                <para />
                <para>Drawing</para>
                <para>The drawing operations can take a <see cref="T:SkiaSharp.SKPaint" /> parameter to affect their drawing.  You use <see cref="T:SkiaSharp.SKPaint" /> objects to cache the style and color information to draw geometries, texts and bitmaps.</para>
                <para>Clipping Path</para>
                <para>State</para>
                <para>It is possible to save the current transformations by calling the <see cref="M:SkiaSharp.SKCanvas.Save" /> method which preserves the current transformation matrix, you can then alter the matrix and restore the previous state by using the <see cref="M:SkiaSharp.SKCanvas.Restore" /> or <see cref="M:SkiaSharp.SKCanvas.RestoreToCount" /> methods.   </para>
                <para>Additionally, it is possible to push a new state with <see cref="M:SkiaSharp.SKCanvas.SaveLayer" /> which will make an offscreen copy of a region, and once the drawing is completed, calling the <see cref="M:SkiaSharp.SKCanvas.Restore" /> method which copies the offscreen bitmap into this canvas.</para>
                <para>The example below shows a typical use:</para>
                <para />
                <para />
                <para />
                <example>
                    <code lang="C#"><![CDATA[using (var surface = SKSurface.Create (width: 640, height: 480, SKColorType.N_32, SKAlphaType.Premul)) {
    SKCanvas canvas = surface.Canvas;

    canvas.Clear (SKColors.White);
    
    // set up drawing tools
    using (var paint = new SKPaint ()) {
        paint.IsAntialias = true;
        paint.Color = new SKColor (0x2c, 0x3e, 0x50);
        paint.StrokeCap = SKStrokeCap.Round;
        
        // create the Xamagon path
        using (var path = new SKPath ()) {
            path.MoveTo (71.4311121f, 56f);
            path.CubicTo (68.6763107f, 56.0058575f, 65.9796704f, 57.5737917f, 64.5928855f, 59.965729f);
            path.LineTo (43.0238921f, 97.5342563f);
            path.CubicTo (41.6587026f, 99.9325978f, 41.6587026f, 103.067402f, 43.0238921f, 105.465744f);
            path.LineTo (64.5928855f, 143.034271f);
            path.CubicTo (65.9798162f, 145.426228f, 68.6763107f, 146.994582f, 71.4311121f, 147f);
            path.LineTo (114.568946f, 147f);
            path.CubicTo (117.323748f, 146.994143f, 120.020241f, 145.426228f, 121.407172f, 143.034271f);
            path.LineTo (142.976161f, 105.465744f);
            path.CubicTo (144.34135f, 103.067402f, 144.341209f, 99.9325978f, 142.976161f, 97.5342563f);
            path.LineTo (121.407172f, 59.965729f);
            path.CubicTo (120.020241f, 57.5737917f, 117.323748f, 56.0054182f, 114.568946f, 56f);
            path.LineTo (71.4311121f, 56f);
            path.Close ();
          
            // draw the Xamagon path
            canvas.DrawPath (path, paint);
        }
    }
}]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Clear">
            <summary>Replaces all the pixels in the canvas’ current clip with the <see cref="P:SkiaSharp.SKColors.Empty" /> color.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Clear(SkiaSharp.SKColor)">
            <param name="color">The color to use to replace the pixels in the current clipping region.</param>
            <summary>Helper method for drawing a color in source mode, completely replacing all the pixels in the current clip with this color.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.ClipPath(SkiaSharp.SKPath)">
            <param name="path">Path descrcibing the new clipping region.</param>
            <summary>Set the current clipping region to the specified path.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.ClipPath(SkiaSharp.SKPath,SkiaSharp.SKRegionOperation,System.Boolean)">
            <param name="path">To be added.</param>
            <param name="operation">To be added.</param>
            <param name="antialias">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.ClipRect(SkiaSharp.SKRect)">
            <param name="rect">Clipping rectangle.</param>
            <summary>Set the current clipping region to the specified rectangle.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.ClipRect(SkiaSharp.SKRect,SkiaSharp.SKRegionOperation,System.Boolean)">
            <param name="rect">To be added.</param>
            <param name="operation">To be added.</param>
            <param name="antialias">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Concat(SkiaSharp.SKMatrix@)">
            <param name="m">Transformation matrix to concatenate.</param>
            <summary>Pre-concatenates the provided transformation matrix with the current transformation matrix.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawBitmap(SkiaSharp.SKBitmap,SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <param name="bitmap">Bitmap to draw</param>
            <param name="dest">Region to draw the bitmap into</param>
            <param name="paint">The paint used to draw the bitmap.</param>
            <summary>Draws a bitmap on the canvas.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawBitmap(SkiaSharp.SKBitmap,SkiaSharp.SKRect,SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <param name="bitmap">Bitmap to draw</param>
            <param name="source">Source region to copy.</param>
            <param name="dest">Region to draw the bitmap into.</param>
            <param name="paint">The paint used to draw the bitmap.</param>
            <summary>Draws a bitmap on the canvas.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawBitmap(SkiaSharp.SKBitmap,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="bitmap">Bitmap to draw</param>
            <param name="x">Targe x coordinate destination for the bitmap.</param>
            <param name="y">Target y coordinate destination for the bitmap.</param>
            <param name="paint">The paint used to draw the bitmap.</param>
            <summary>Draws a bitmap on the canvas.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawCircle(System.Single,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="cx">Center X coordinate.</param>
            <param name="cy">Center Y coordinate.</param>
            <param name="radius">Radius for the circle.</param>
            <param name="paint">The paint used to draw the bitmap.</param>
            <summary>Draws a circle on the canvas.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawColor(SkiaSharp.SKColor,SkiaSharp.SKXferMode)">
            <param name="color">Color to use to paint the clipping region (or the entire canvas if one is not set).</param>
            <param name="mode">The transfer mode for the color.</param>
            <summary>Fills the current clipping path with the specified color using the specified transfer mode.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawImage(SkiaSharp.SKImage,SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <param name="image">The image to draw.</param>
            <param name="dest">Region to draw the bitmap into</param>
            <param name="paint">The paint used to draw the image, or <see langword="null" />.</param>
            <summary>Draws an image on the canvas.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawImage(SkiaSharp.SKImage,SkiaSharp.SKRect,SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <param name="image">Draws an image on the canvas.</param>
            <param name="source">Source region to copy.</param>
            <param name="dest">Region to draw the bitmap into</param>
            <param name="paint">The paint used to draw the image, or <see langword="null" />.</param>
            <summary>Draws an image on the canvas.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawImage(SkiaSharp.SKImage,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="image">Draws an image on the canvas.</param>
            <param name="x">Targe x coordinate destination for the image.</param>
            <param name="y">Targe y coordinate destination for the image.</param>
            <param name="paint">The paint used to draw the image, or <see langword="null" />.</param>
            <summary>Draws an image on the canvas.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawLine(System.Single,System.Single,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="x0">First point x coordinate.</param>
            <param name="y0">First point y coordinate.</param>
            <param name="x1">Second point x coordinate.</param>
            <param name="y1">First point y coordinate.</param>
            <param name="paint">The paint used to draw the line.</param>
            <summary>Draws a line on the canvas.</summary>
            <remarks>Draws a line from (x0,y0) to (x1,y1) using the specified <paramref name="paint" /> parameters.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawOval(SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <param name="rect">Bounding box for the oval</param>
            <param name="paint">The paint used to draw the oval.</param>
            <summary>Draws an oval on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawPaint(SkiaSharp.SKPaint)">
            <param name="paint">The paint used to fill the current clipping path.</param>
            <summary>Fills the current clipping path with the specified paint.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawPath(SkiaSharp.SKPath,SkiaSharp.SKPaint)">
            <param name="path">The path to draw</param>
            <param name="paint">The paint used to draw the path.</param>
            <summary>Draws a bezier path in the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawPicture(SkiaSharp.SKPicture,SkiaSharp.SKPaint)">
            <param name="picture">The picture to draw.</param>
            <param name="paint">The paint used to draw the picture, or <see langword="null" />.</param>
            <summary>Draws a picture on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawPicture(SkiaSharp.SKPicture,SkiaSharp.SKMatrix@,SkiaSharp.SKPaint)">
            <param name="picture">The picture to draw.</param>
            <param name="matrix">The matrix to apply while painting</param>
            <param name="paint">The paint used to draw the picture, or <see langword="null" />.</param>
            <summary>Draws a picture on the canvas.</summary>
            <remarks>
                <para>This is equivalent to calling Save, followed by Concat with the specified <paramref name="matrix" />, DrawPicture and then Restore.</para>
                <para />
                <para>If paint is non-null, draw the picture into a temporary buffer, and then apply the paint's alpha, color filter, image filter, xfermode to that buffer as it is drawn to the canvas.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawPoint(System.Single,System.Single,SkiaSharp.SKColor)">
            <param name="x">x coordinate for the point to draw.</param>
            <param name="y">y coordinate for the point to draw.</param>
            <param name="color">Color to use.</param>
            <summary>Draws a point in the canvas with the specified color.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawPoint(System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="x">x coordinate for the point to draw.</param>
            <param name="y">y coordinate for the point to draw.</param>
            <param name="paint">The paint used to draw the point.</param>
            <summary>Draws a point in the canvas with the specified color.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawPoints(SkiaSharp.SKPointMode,SkiaSharp.SKPoint[],SkiaSharp.SKPaint)">
            <param name="mode">Determines how the points array will be interpreted: as points, as coordinates to draw lines, or as coordinates of a polygon.</param>
            <param name="points">array of points to draw.</param>
            <param name="paint">The paint used to draw the points.</param>
            <summary>Draws an array of points, lines or a polygon in the canvas.</summary>
            <remarks>
                <para>For all modes, the count parameter is interpreted as the total number of points. For kLine mode, count/2 line segments are drawn.</para>
                <para />
                <para>For point mode, each point is drawn centered at its coordinate, and its size is specified by the paint's stroke-width. It draws as a square, unless the paint's cap-type is round, in which the points are drawn as circles.</para>
                <para />
                <para>For line mode, each pair of points is drawn as a line segment, respecting the paint's settings for cap, join and width. </para>
                <para />
                <para>For polygon mode, the entire array is drawn as a series of connected line segments.</para>
                <para />
                <para>Note that, while similar, the line and polygon modes draw slightly differently than the equivalent path built with a series of move to, line to calls, in that the path will draw all of its contours at once, with no interactions if contours intersect each other (think XOR xfermode).  DrawPoints always draws each element one at a time.</para>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawRect(SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <param name="rect">The rectangle specification.</param>
            <param name="paint">The paint used to draw the rectagle.</param>
            <summary>Draws a rectangle in the canvas.</summary>
            <remarks>
                <para>The rectangle will be filled or stroked based on the Style in the paint.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawRoundRect(SkiaSharp.SKRect,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="rect">To be added.</param>
            <param name="rx">To be added.</param>
            <param name="ry">To be added.</param>
            <param name="paint">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawText(System.String,SkiaSharp.SKPoint[],SkiaSharp.SKPaint)">
            <param name="text">The text to draw.</param>
            <param name="points">Describes the position for each glyph in the <paramref name="text" /> string.</param>
            <param name="paint">The paint used to draw the text.</param>
            <summary>Draws glyphs of the text at specified locations on the canvas.</summary>
            <remarks>
                <para>Draw the text, with each character/glyph origin specified by the <paramref name="points" /> array. The origin is interpreted by the Align setting in the paint.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawText(System.IntPtr,System.Int32,SkiaSharp.SKPoint[],SkiaSharp.SKPaint)">
            <param name="buffer">Contains a pointer to a region holding UTF-8 encoded text to draw.</param>
            <param name="length">Number of bytes to read from the <paramref name="buffer." /></param>
            <param name="points">Describes the position for each glyph in the <paramref name="text" /> string.</param>
            <param name="paint">The paint used to draw the text.</param>
            <summary>Draws text from a UTF-8 buffer at specified locations on the canvas.</summary>
            <remarks>
                <para>Draw the text, with each character/glyph origin specified by the <paramref name="points" /> array. The origin is interpreted by the Align setting in the paint.</para>
                <para />
                <para>The <paramref name="buffer" /> parameter is a pointer to a region in memory that contains a UTF-8 encoded block of text.   This only consumes up to <paramref name="length" /> bytes from the buffer.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawText(System.String,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="text">The text to draw.</param>
            <param name="x">The x-coordinate of the origin of the text being drawn</param>
            <param name="y">The y-coordinate of the origin of the text being drawn</param>
            <param name="paint">The paint used to draw the text.</param>
            <summary>Draws text on the canvas</summary>
            <remarks>
                <para>Draws the <paramref name="text" />, with origin at (<paramref name="x" />,<paramref name="y" />), using the specified <paramref name="paint" />. The origin is interpreted based on the Align setting in the paint.</para>
                <example>
                    <code lang="C#"><![CDATA[public static void TextSample (SKCanvas canvas, int width, int height)
{
    canvas.DrawColor (SKColors.White);

    using (var paint = new SKPaint ()) {
        paint.TextSize = 64.0f;
        paint.IsAntialias = true;
        paint.Color = new SKColor (0x42, 0x81, 0xA4);
        paint.IsStroke = false;

        canvas.DrawText ("Skia", width / 2f, 64.0f, paint);
    }

    using (var paint = new SKPaint ()) {
        paint.TextSize = 64.0f;
        paint.IsAntialias = true;
        paint.Color = new SKColor (0x9C, 0xAF, 0xB7);
        paint.IsStroke = true;
        paint.StrokeWidth = 3;
        paint.TextAlign = SKTextAlign.Center;

        canvas.DrawText ("Skia", width / 2f, 144.0f, paint);
    }

    using (var paint = new SKPaint ()) {
        paint.TextSize = 64.0f;
        paint.IsAntialias = true;
        paint.Color = new SKColor (0xE6, 0xB8, 0x9C);
        paint.TextScaleX = 1.5f;
        paint.TextAlign = SKTextAlign.Right;

        canvas.DrawText ("Skia", width / 2f, 224.0f, paint);
    }
}]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawText(System.IntPtr,System.Int32,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="buffer">Contains a pointer to a region holding UTF-8 encoded text to draw.</param>
            <param name="length">Number of bytes to read from the <paramref name="buffer." /></param>
            <param name="x">The x-coordinate of the origin of the text being drawn</param>
            <param name="y">The y-coordinate of the origin of the text being drawn</param>
            <param name="paint">The paint used to draw the text.</param>
            <summary>Draws text encoded in a UTF-8 buffer on the canvas.</summary>
            <remarks>
                <para>Draws the <paramref name="text" />, with origin at (<paramref name="x" />,<paramref name="y" />), using the specified <paramref name="paint" />. The origin is interpreted based on the Align setting in the paint.</para>
                <para />
                <para>The <paramref name="buffer" /> parameter is a pointer to a region in memory that contains a UTF-8 encoded block of text.   This only consumes up to <paramref name="length" /> bytes from the buffer.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawText(System.String,SkiaSharp.SKPath,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="text">The text to draw.</param>
            <param name="path">The path the text should follow for its baseline.</param>
            <param name="hOffset">
                <para>The distance along the path to add to the text’s starting position.</para>
            </param>
            <param name="vOffset">
                <para>The distance above(-) or below(+) the path to position the text.</para>
            </param>
            <param name="paint">The paint used to draw the text.</param>
            <summary>Draws text on the canvas following a bezier path.</summary>
            <remarks>
                <para>Draw the <paramref name="text" />, using the specified <paramref name="paint" />, along the specified <paramref name="path" />. The paint's Align setting determins where along the path to start the text.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawText(System.IntPtr,System.Int32,SkiaSharp.SKPath,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="buffer">Contains a pointer to a region holding UTF-8 encoded text to draw.</param>
            <param name="length">Number of bytes to read from the <paramref name="buffer." /></param>
            <param name="path">The path the text should follow for its baseline.</param>
            <param name="hOffset">The distance along the path to add to the text’s starting position.</param>
            <param name="vOffset">The distance above(-) or below(+) the path to position the text.</param>
            <param name="paint">The paint used to draw the text.</param>
            <summary>Draws text encoded in a UTF-8 buffer on the canvas following a bezier path.</summary>
            <remarks>
                <para>Draw the <paramref name="text" />, using the specified <paramref name="paint" />, along the specified <paramref name="path" />. The paint's Align setting determins where along the path to start the text.</para>
                <para>The <paramref name="buffer" /> parameter is a pointer to a region in memory that contains a UTF-8 encoded block of text.   This only consumes up to <paramref name="length" /> bytes from the buffer.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.GetClipBounds(SkiaSharp.SKRect@)">
            <param name="bounds">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.GetClipDeviceBounds(SkiaSharp.SKRectI@)">
            <param name="bounds">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.ResetMatrix">
            <summary>Helper for setMatrix(identity). Sets the current matrix to identity.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Restore">
            <summary>Restore the canvas state.</summary>
            <remarks>
                <para>This call balances a previous call to <see cref="M:SkiaSharp.SKCanvas.Save" />, and is used to remove all modifications to the matrix, clip and draw filter state since the last Save call.</para>
                <para />
                <para>It is an error to call Restore() more times than Save() was called.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.RestoreToCount(System.Int32)">
            <param name="count">The number of Save() levels to restore from.  Or -1 to restore all the way back to the initial value.</param>
            <summary>Efficiently restore the state to a specific level.</summary>
            <remarks>
                <para>Efficient way to pop any calls to <see cref="M:SkiaSharp.SKCanvas.Save" /> that happened after the save count reached <paramref name="count" />. </para>
                <para />
                <para>It is an error for <paramref name="count" /> to be greater than <see cref="P:SkiaSharp.SKCanvas.SaveCount" />. To pop all the way back to the initial matrix/clip context set count to -1.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.RotateDegrees(System.Single)">
            <param name="degrees">The number of degrees to rotate.</param>
            <summary>Preconcat the current matrix with the specified rotation.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.RotateDegrees(System.Single,System.Single,System.Single)">
            <param name="degrees">To be added.</param>
            <param name="px">To be added.</param>
            <param name="py">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.RotateRadians(System.Single)">
            <param name="radians">The number of radiants to rotate.</param>
            <summary>Preconcat the current matrix with the specified rotation.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.RotateRadians(System.Single,System.Single,System.Single)">
            <param name="radians">To be added.</param>
            <param name="px">To be added.</param>
            <param name="py">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Save">
            <summary>Saves the canvas state.</summary>
            <returns>
                <para>The value to pass to <see cref="M:SkiaSharp.SKCanvas.RestoreToCount" /> to balance this save.</para>
            </returns>
            <remarks>
                <para>This call saves the current matrix, clip, and draw filter, and pushes a copy onto a private stack. </para>
                <para>Subsequent calls to translate, scale, rotate, skew, concat or clipping path or drawing filter all operate on this copy.</para>
                <para>When the balancing call to <see cref="M:SkiaSharp.SKCanvas.Restore" /> is made, the previous matrix, clipping, and drawing filters are restored.</para>
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKCanvas.SaveCount">
            <summary>Returns the number of matrix/clip states on the SkCanvas' private stack.</summary>
            <value>
                <para>This will equal the number of Save calls minus Retore calls + 1. The save count on a new canvas is 1.</para>
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.SaveLayer(SkiaSharp.SKPaint)">
            <param name="paint">This is copied, and is applied to the offscreen when <see cref="M:SkiaSharp.SKCanvas.Restore" /> is called.</param>
            <summary>Saves the canvas state and allocates an offscreen bitmap.</summary>
            <returns>
                <para>The value to pass to <see cref="M:SkiaSharp.SKCanvas.RestoreToCount" /> to balance this save.</para>
            </returns>
            <remarks>This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer).</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.SaveLayer(SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <param name="limit">
                <para>This rectangle, is used as a hint to limit the size of the offscreen, and thus drawing may be clipped to it, though that clipping is not guaranteed to happen. If exact clipping is desired, use <see cref="M:SkiaSharp.SKCanvas.ClipRect" /></para>
            </param>
            <param name="paint">
                <para>This is copied, and is applied to the offscreen when <see cref="M:SkiaSharp.SKCanvas.Restore" /> is called.</para>
            </param>
            <summary>Saves the canvas state and allocates an offscreen bitmap.</summary>
            <returns>
                <para>The value to pass to <see cref="M:SkiaSharp.SKCanvas.RestoreToCount" /> to balance this save.</para>
            </returns>
            <remarks>
                <para>This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer).</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Scale(SkiaSharp.SKPoint)">
            <param name="size">The amount to scale.</param>
            <summary>Preconcat the current matrix with the specified scale.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Scale(System.Single,System.Single)">
            <param name="sx">The amount to scale in X</param>
            <param name="sy">The amount to scale in Y</param>
            <summary>Preconcat the current matrix with the specified scale.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Scale(System.Single,System.Single,System.Single,System.Single)">
            <param name="sx">To be added.</param>
            <param name="sy">To be added.</param>
            <param name="px">To be added.</param>
            <param name="py">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.SetMatrix(SkiaSharp.SKMatrix)">
            <param name="matrix">The matrix that will be copied into the current matrix.</param>
            <summary>Replace the current matrix with a copy of the specified matrix.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Skew(SkiaSharp.SKPoint)">
            <param name="skew">The amount to skew.</param>
            <summary>Preconcat the current matrix with the specified skew.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Skew(System.Single,System.Single)">
            <param name="sx">The amount to skew in X.</param>
            <param name="sy">The amount to skew in Y.</param>
            <summary>Preconcat the current matrix with the specified skew.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKCanvas.TotalMatrix">
            <summary>Return the current matrix on the canvas.</summary>
            <value>The current matrix on the canvas.</value>
            <remarks>This does not account for the translate in any of the devices.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Translate(SkiaSharp.SKPoint)">
            <param name="point">The distance to translate.</param>
            <summary>Preconcat the current matrix with the specified translation</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Translate(System.Single,System.Single)">
            <param name="dx">The distance to translate in X.</param>
            <param name="dy">The distance to translate in Y.</param>
            <summary>Preconcat the current matrix with the specified translation</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKClipType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKClipType.Difference">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKClipType.Intersect">
            <summary>To be added.</summary>
        </member>
        <member name="T:SkiaSharp.SKCodec">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.Create(SkiaSharp.SKData)">
            <param name="data">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.Create(SkiaSharp.SKStream)">
            <param name="stream">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKCodec.EncodedFormat">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.GetPixels(System.Byte[]@)">
            <param name="pixels">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.Byte[])">
            <param name="info">To be added.</param>
            <param name="pixels">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.Byte[]@)">
            <param name="info">To be added.</param>
            <param name="pixels">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.IntPtr)">
            <param name="info">To be added.</param>
            <param name="pixels">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.GetScaledDimensions(System.Single)">
            <param name="desiredScale">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.GetValidSubset(SkiaSharp.SKRectI@)">
            <param name="desiredSubset">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKCodec.Info">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKCodec.MinBufferedBytesNeeded">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKCodec.Origin">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKCodec.Pixels">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKCodecOptions">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKCodecOptions.HasSubset">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKCodecOptions.Subset">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKCodecOptions.ZeroInitialized">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKCodecOrigin">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKCodecOrigin.BottomLeft">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecOrigin.BottomRight">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecOrigin.LeftBottom">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecOrigin.LeftTop">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecOrigin.RightBottom">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecOrigin.RightTop">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecOrigin.TopLeft">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecOrigin.TopRight">
            <summary>To be added.</summary>
        </member>
        <member name="T:SkiaSharp.SKCodecResult">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKCodecResult.CouldNotRewind">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecResult.IncompleteInput">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecResult.InvalidConversion">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecResult.InvalidInput">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecResult.InvalidParameters">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecResult.InvalidScale">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecResult.Success">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecResult.Unimplemented">
            <summary>To be added.</summary>
        </member>
        <member name="T:SkiaSharp.SKColor">
            <summary>32 bit ARGB color value, not premultiplied. </summary>
            <remarks>
                <para>The color components are always in a known order. </para>
                <para />
                <para>SkColor is the type used to specify colors in SkPaint and in gradients.</para>
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKColor(System.Byte,System.Byte,System.Byte)">
            <param name="red">To be added.</param>
            <param name="green">To be added.</param>
            <param name="blue">To be added.</param>
            <summary>Creates a color from the specified red, green and blue values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:SkiaSharp.SKColor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <param name="red">To be added.</param>
            <param name="green">To be added.</param>
            <param name="blue">To be added.</param>
            <param name="alpha">To be added.</param>
            <summary>Creates a color from the specified red, green, blue and alpha values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKColor.Alpha">
            <summary>The alpha component of the color.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKColor.Blue">
            <summary>The blue component of the color.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKColor.Equals(System.Object)">
            <param name="other">To be added.</param>
            <summary>Determines if this object is equal to the provided one</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKColor.GetHashCode">
            <summary>Returns the object hash code.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKColor.Green">
            <summary>The green component of the color.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKColor.Red">
            <summary>The red component of the color.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKColor.ToString">
            <summary>Returns a string with the #AARRGGBB format.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKColor.WithAlpha(System.Byte)">
            <param name="alpha">To be added.</param>
            <summary>Returns a new SKColor based on this current instance that has a new Alpha channel value.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKColorFilter">
            <summary>Color filters for use in an <see cref="T:SkiaSharp.SKPaint" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorFilter.CreateColorCube(SkiaSharp.SKData,System.Int32)">
            <param name="cubeData">must containt a 3D data in the form of cube of the size: cubeDimension * cubeDimension * cubeDimension * sizeof(SkColor)</param>
            <param name="cubeDimension">Cube dimension.</param>
            <summary>Creates a 3D Look-Up-Table Color filter.</summary>
            <returns>Filter created with the specified lookup table.</returns>
            <remarks>
                <para>This cube contains a transform where (x,y,z) maps to the (r,g,b).</para>
                <para>The alpha components of the colors must be 0xFF.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorFilter.CreateColorCube(System.Byte[],System.Int32)">
            <param name="cubeData">must containt a 3D data in the form of cube of the size: cubeDimension * cubeDimension * cubeDimension * sizeof(SkColor)</param>
            <param name="cubeDimension">Cube dimension.</param>
            <summary>Creates a 3D Look-Up-Table Color filter.</summary>
            <returns>Filter created with the specified lookup table.</returns>
            <remarks>
                <para>This cube contains a transform where (x,y,z) maps to the (r,g,b).</para>
                <para>The alpha components of the colors must be 0xFF.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorFilter.CreateColorMatrix(System.Single[])">
            <param name="matrix">An array of 20 elements.</param>
            <summary>Creates a color matrix filter.</summary>
            <returns>Filter created with the specified color matrix.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKColorFilter.CreateCompose(SkiaSharp.SKColorFilter,SkiaSharp.SKColorFilter)">
            <param name="outer">To be added.</param>
            <param name="inner">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKColorFilter.CreateLighting(SkiaSharp.SKColor,SkiaSharp.SKColor)">
            <param name="mul">To be added.</param>
            <param name="add">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKColorFilter.CreateLumaColor">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKColorFilter.CreateTable(System.Byte[])">
            <param name="table">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKColorFilter.CreateTable(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <param name="tableA">To be added.</param>
            <param name="tableR">To be added.</param>
            <param name="tableG">To be added.</param>
            <param name="tableB">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKColorFilter.CreateXferMode(SkiaSharp.SKColor,SkiaSharp.SKXferMode)">
            <param name="c">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKColorFilter.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKColorFilter.IsValid3DColorCube(SkiaSharp.SKData,System.Int32)">
            <param name="cubeData">must containt a 3D data in the form of cube of the size: cubeDimension * cubeDimension * cubeDimension * sizeof(SkColor).</param>
            <param name="cubeDimension">Cube dimensions.</param>
            <summary>Determines if the provided cube data and dimensions represent a valid color cube.</summary>
            <returns>true if the cube data and dimensions represent a valid color cube.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKColorFilter.MaxCubeSize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColorFilter.MinCubeSize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKColorProfileType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColorProfileType.Linear">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorProfileType.SRGB">
            <summary>To be added.</summary>
        </member>
        <member name="T:SkiaSharp.SKColors">
            <summary>Definitions for some common color names.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.AliceBlue">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.AntiqueWhite">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Aqua">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Aquamarine">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Azure">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Beige">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Bisque">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Black">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.BlanchedAlmond">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Blue">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.BlueViolet">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Brown">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.BurlyWood">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.CadetBlue">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Chartreuse">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Chocolate">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Coral">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.CornflowerBlue">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Cornsilk">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Crimson">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Cyan">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.DarkBlue">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.DarkCyan">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.DarkGoldenrod">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.DarkGray">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.DarkGreen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.DarkKhaki">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.DarkMagenta">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.DarkOliveGreen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.DarkOrange">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.DarkOrchid">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.DarkRed">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.DarkSalmon">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.DarkSeaGreen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.DarkSlateBlue">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.DarkSlateGray">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.DarkTurquoise">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.DarkViolet">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.DeepPink">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.DeepSkyBlue">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.DimGray">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.DodgerBlue">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKColors.Empty">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Firebrick">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.FloralWhite">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.ForestGreen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Fuchsia">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Gainsboro">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.GhostWhite">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Gold">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Goldenrod">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Gray">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Green">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.GreenYellow">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Honeydew">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.HotPink">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.IndianRed">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Indigo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Ivory">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Khaki">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Lavender">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.LavenderBlush">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.LawnGreen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.LemonChiffon">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.LightBlue">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.LightCoral">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.LightCyan">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.LightGoldenrodYellow">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.LightGray">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.LightGreen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.LightPink">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.LightSalmon">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.LightSeaGreen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.LightSkyBlue">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.LightSlateGray">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.LightSteelBlue">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.LightYellow">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Lime">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.LimeGreen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Linen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Magenta">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Maroon">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.MediumAquamarine">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.MediumBlue">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.MediumOrchid">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.MediumPurple">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.MediumSeaGreen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.MediumSlateBlue">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.MediumSpringGreen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.MediumTurquoise">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.MediumVioletRed">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.MidnightBlue">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.MintCream">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.MistyRose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Moccasin">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.NavajoWhite">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Navy">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.OldLace">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Olive">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.OliveDrab">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Orange">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.OrangeRed">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Orchid">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.PaleGoldenrod">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.PaleGreen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.PaleTurquoise">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.PaleVioletRed">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.PapayaWhip">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.PeachPuff">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Peru">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Pink">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Plum">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.PowderBlue">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Purple">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Red">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.RosyBrown">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.RoyalBlue">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.SaddleBrown">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Salmon">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.SandyBrown">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.SeaGreen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.SeaShell">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Sienna">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Silver">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.SkyBlue">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.SlateBlue">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.SlateGray">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Snow">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.SpringGreen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.SteelBlue">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Tan">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Teal">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Thistle">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Tomato">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Transparent">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Turquoise">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Violet">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Wheat">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.White">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.WhiteSmoke">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Yellow">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.YellowGreen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKColorType">
            <summary>Describes how to interpret the components of a pixel.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKColorType.Alpha_8">
            <summary>Only contains the alpha (transparency) channel.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorType.Alpha8">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorType.Argb4444">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorType.Bgra_8888">
            <summary>32-bit blue, green, red and alpha.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorType.Bgra8888">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorType.Gray8">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorType.Index8">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorType.N_32">
            <summary>
                <para>An alias for whichever 32bit ARGB format is the "native"  form for skia's blitters. Use this if you don't have a swizzle preference for 32bit pixels.</para>
            </summary>
        </member>
        <member name="F:SkiaSharp.SKColorType.Rgb_565">
            <summary>16-bit RGB encoded using 5-bit red, 6 bit green, 5 bit blue.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorType.Rgb565">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorType.Rgba_8888">
            <summary>32-bit red, green, blue, alpha.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorType.Rgba8888">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorType.RgbaF16">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorType.Unknown">
            <summary>Unknown encoding.</summary>
        </member>
        <member name="T:SkiaSharp.SKCropRectFlags">
            <summary>Flags used by the <see cref="T:SkiaSharp.SKImageFilter.CropRect" /> method.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKCropRectFlags.HasAll">
            <summary>Consume all edges of the rectangle.</summary>
        </member>
        <member name="F:SkiaSharp.SKCropRectFlags.HasHeight">
            <summary>Only use the height component of the rectangle.</summary>
        </member>
        <member name="F:SkiaSharp.SKCropRectFlags.HasLeft">
            <summary>Only use the left component of the rectangle.</summary>
        </member>
        <member name="F:SkiaSharp.SKCropRectFlags.HasTop">
            <summary>Only use the top component of the rectangle.</summary>
        </member>
        <member name="F:SkiaSharp.SKCropRectFlags.HasWidth">
            <summary>Only use the width component of the rectangle.</summary>
        </member>
        <member name="T:SkiaSharp.SKData">
            <summary>SkData holds an immutable data buffer.</summary>
            <remarks>
                <para>Not only is the data immutable, but the actual pointer that is returned by the <see cref="P:SkiaSharp.SKData.Data" /> property is guaranteed to always be the same for the life of this instance.</para>
                <para>The <see cref="M:SkiaSharp.SKData.AsStream" /> method can be used to return a <see cref="T:System.IO.Stream" /> that wraps this SKData and allows for .NET APIs to scan the contents of the SKData as a stream.</para>
                <para />
                <para>You can use the constructors for this object to make copies of the data, or you can use the <see cref="M:SkiaSharp.SKData.FromMallocMemory" /> to wrap a block of memory that has been allocated with the platform malloc function.</para>
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKData">
            <summary>Creates an empty SKData object.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKData(System.Byte[])">
            <param name="bytes">Array of bytes that will be copied.</param>
            <summary>Creates an SKData by copying the provided byte array.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKData(System.IntPtr,System.UInt64)">
            <param name="bytes">Pointer to a buffer</param>
            <param name="length">Length of the buffer.</param>
            <summary>Creates an SKData by copying the provided byte buffer for the specified length.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKData.AsStream">
            <summary>Wraps the SKData as a <see cref="T:System.IO.Stream" /></summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKData.Data">
            <summary>Returns a pointer to the data wrapped by this.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKData.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>Releases the resources associated with the data.   If this <see cref="T:SkiaSharp.SKData" /> was created with one of the <see cref="M:SkiaSharp.SKData.FromMallocMemory" /> method, then the operating system’s “free” method will be called on the data.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKData.FromMallocMemory(System.IntPtr,System.UInt64)">
            <param name="bytes">Pointer to memory that has been allocated with the operating system’s malloc or <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal" /> method.</param>
            <param name="length">The size of the buffer allocated</param>
            <summary>Creates an SKData from a buffer that was previously allocated with the operating system malloc (or <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal" /> method.</summary>
            <returns>An SKData instance that wraps it</returns>
            <remarks>When this SKData is cleared, the free method will be called on the provided buffer.</remarks>
        </member>
        <member name="M:SkiaSharp.SKData.SaveTo(System.IO.Stream)">
            <param name="target">Stream to save the data into.</param>
            <summary>Saves the buffer into the provided stream.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKData.Size">
            <summary>The size of this SKData object.</summary>
            <value>Size in bytes.</value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKData.Subset(System.UInt64,System.UInt64)">
            <param name="offset">The offset of the data.</param>
            <param name="length">The length for the new SKData</param>
            <summary>Creates a new SKData that points to a slice in this SKData.</summary>
            <returns>
                <para />
            </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKDisplacementMapEffectChannelSelectorType">
            <summary>Channel selector type for the <see cref="M:SkiaSharp.SKImageFilter.CreateCompose" /> method.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKDisplacementMapEffectChannelSelectorType.A">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKDisplacementMapEffectChannelSelectorType.B">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKDisplacementMapEffectChannelSelectorType.G">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKDisplacementMapEffectChannelSelectorType.R">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKDisplacementMapEffectChannelSelectorType.Unknown">
            <summary>To be added.</summary>
        </member>
        <member name="T:SkiaSharp.SKDocument">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKDocument.Abort">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKDocument.BeginPage(System.Single,System.Single)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKDocument.BeginPage(System.Single,System.Single,SkiaSharp.SKRect)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <param name="content">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKDocument.Close">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKDocument.CreatePdf(SkiaSharp.SKWStream,System.Single)">
            <param name="stream">To be added.</param>
            <param name="dpi">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKDocument.CreatePdf(System.String,System.Single)">
            <param name="path">To be added.</param>
            <param name="dpi">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKDocument.DefaultRasterDpi">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKDocument.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKDocument.EndPage">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKDropShadowImageFilterShadowMode">
            <summary>Channel selector type for the <see cref="M:SkiaSharp.SKImageFilter.CreateDownSample" /> method.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKDropShadowImageFilterShadowMode.DrawShadowAndForeground">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKDropShadowImageFilterShadowMode.DrawShadowOnly">
            <summary>To be added.</summary>
        </member>
        <member name="T:SkiaSharp.SKDynamicMemoryWStream">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:SkiaSharp.SKDynamicMemoryWStream">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKDynamicMemoryWStream.CopyToData">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKDynamicMemoryWStream.DetachAsStream">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKDynamicMemoryWStream.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKEncodedFormat">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKEncodedFormat.Astc">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedFormat.Bmp">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedFormat.Dng">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedFormat.Gif">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedFormat.Ico">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedFormat.Jpeg">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedFormat.Ktx">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedFormat.Pkm">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedFormat.Png">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedFormat.Unknown">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedFormat.Wbmp">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedFormat.Webp">
            <summary>To be added.</summary>
        </member>
        <member name="T:SkiaSharp.SKEncoding">
            <summary>Text encoding definition.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKEncoding.Utf16">
            <summary>UTF-16 encoding.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncoding.Utf32">
            <summary>UTF-32 encoding.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncoding.Utf8">
            <summary>UTF-8 encoding.</summary>
        </member>
        <member name="T:SkiaSharp.SKFileStream">
            <summary>Represents a Skia Stream backed by a file on the file system.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:SkiaSharp.SKFileStream(System.String)">
            <param name="path">Must point to a file on the file system.</param>
            <summary>Creates a new SKFileStream that wraps the file with the specified path.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFileStream.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKFileWStream">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:SkiaSharp.SKFileWStream(System.String)">
            <param name="path">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKFileWStream.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKFilterQuality">
            <summary>Filter quality settings.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKFilterQuality.High">
            <summary>High quality.</summary>
        </member>
        <member name="F:SkiaSharp.SKFilterQuality.Low">
            <summary>Low quality.</summary>
        </member>
        <member name="F:SkiaSharp.SKFilterQuality.Medium">
            <summary>Medium quality.</summary>
        </member>
        <member name="F:SkiaSharp.SKFilterQuality.None">
            <summary>Unspecified.</summary>
        </member>
        <member name="T:SkiaSharp.SKFontMetrics">
            <summary>Structure to represent measurements for a font.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.Ascent">
            <summary>The recommended distance above the baseline.</summary>
            <value>The recommended distance above the baseline.</value>
            <remarks>Will be &lt;= 0.</remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.AverageCharacterWidth">
            <summary>The average character width.</summary>
            <value>The average character width.</value>
            <remarks>Will be &gt;= 0.</remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.Bottom">
            <summary>The greatest distance below the baseline for any glyph.</summary>
            <value>The greatest distance below the baseline for any glyph.</value>
            <remarks>Will be &gt;= 0.</remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.CapHeight">
            <summary>The cap height.</summary>
            <value>The cap height.</value>
            <remarks>Will be &gt; 0, or 0 if cannot be determined.</remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.Descent">
            <summary>The recommended distance below the baseline.</summary>
            <value>The recommended distance below the baseline.</value>
            <remarks>Will be &gt;= 0.</remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.Leading">
            <summary>The recommended distance to add between lines of text.</summary>
            <value>The recommended distance to add between lines of text.</value>
            <remarks>Will be &gt;= 0.</remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.MaxCharacterWidth">
            <summary>The max character width.</summary>
            <value>The max character width.</value>
            <remarks>Will be &gt;= 0.</remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.Top">
            <summary>The greatest distance above the baseline for any glyph.</summary>
            <value>The greatest distance above the baseline for any glyph.</value>
            <remarks>Will be &lt;= 0.</remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.UnderlinePosition">
            <summary>Position of the top of the Underline stroke relative to the baseline.</summary>
            <value>Position of the top of the Underline stroke relative to the baseline.</value>
            <remarks>
                <para>Negative - underline should be drawn above baseline.</para>
                <para>Positive - underline should be drawn below baseline.</para>
                <para>Zero - underline should be drawn on baseline.underline position, or 0 if cannot be determined.</para>
                <para>null - does not have an UnderlinePosition.</para>
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.UnderlineThickness">
            <summary>The thickness of the underline.</summary>
            <value>The thickness of the underline.</value>
            <remarks>
                <para>0 - if the thickness can not be determined</para>
                <para>null - if the thickness is not set.</para>
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.XHeight">
            <summary>The height of an 'x' in px.</summary>
            <value>The height of an 'x' in px.</value>
            <remarks>0 if no 'x' in face.</remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.XMax">
            <summary>The maximum bounding box x value for all glyphs.</summary>
            <value>The maximum bounding box x value for all glyphs.</value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.XMin">
            <summary>The minimum bounding box x value for all glyphs.</summary>
            <value>The minimum bounding box x value for all glyphs.</value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKFontStyleSlant">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKFontStyleSlant.Italic">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleSlant.Oblique">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleSlant.Upright">
            <summary>To be added.</summary>
        </member>
        <member name="T:SkiaSharp.SKFontStyleWeight">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWeight.Black">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWeight.Bold">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWeight.ExtraBold">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWeight.ExtraLight">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWeight.Light">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWeight.Medium">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWeight.Normal">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWeight.SemiBold">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWeight.Thin">
            <summary>To be added.</summary>
        </member>
        <member name="T:SkiaSharp.SKFontStyleWidth">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWidth.Condensed">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWidth.Expanded">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWidth.ExtraCondensed">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWidth.ExtraExpanded">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWidth.Normal">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWidth.SemiCondensed">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWidth.SemiExpanded">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWidth.UltaExpanded">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWidth.UltraCondensed">
            <summary>To be added.</summary>
        </member>
        <member name="T:SkiaSharp.SkiaExtensions">
            <summary>Convenience methods for <see cref="T:SkiaSharp.SKPixelGeometry" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SkiaExtensions.IsBgr(SkiaSharp.SKPixelGeometry)">
            <param name="pg">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SkiaExtensions.IsHorizontal(SkiaSharp.SKPixelGeometry)">
            <param name="pg">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SkiaExtensions.IsRgb(SkiaSharp.SKPixelGeometry)">
            <param name="pg">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SkiaExtensions.IsVertical(SkiaSharp.SKPixelGeometry)">
            <param name="pg">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKImage">
            <summary>Abstraction for drawing a rectangle of pixels.</summary>
            <remarks>
                <para>SkImage is an abstraction for drawing a rectagle of pixels, though the particular type of image could be actually storing its data on the GPU, or as drawing commands (picture or PDF or otherwise), ready to be played back into another canvas.</para>
                <para />
                <para>The content of SkImage is always immutable, though the actual storage may change, if for example that image can be re-created via encoded data or other means.</para>
                <para />
                <para>SkImage always has a non-zero dimensions. If there is a request to create a new image, either directly or via SkSurface, and either of the requested dimensions are zero, then <see langword="null" /> will be returned.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.Encode">
            <summary>Encodes the image as a PNG image</summary>
            <returns>SKData wrapping the encoded image as a PNG.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.Encode(SkiaSharp.SKImageEncodeFormat,System.Int32)">
            <param name="format">The file format used to encode the image.</param>
            <param name="quality">The quality level to use for the image.</param>
            <summary>Encodes an image, multiple file formats supported</summary>
            <returns>SKData wrapping the encoded image as a PNG.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromBitmap(SkiaSharp.SKBitmap)">
            <param name="bitmap">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromData(SkiaSharp.SKData)">
            <param name="data">Data holding the encoded image.</param>
            <summary>Creates an SKImage from an encoded image wrapped by the data.</summary>
            <returns>The decoded image, or <see langword="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromData(SkiaSharp.SKData,SkiaSharp.SKRectI)">
            <param name="data">Data holding the encoded image.</param>
            <param name="subset">Specified a bounds for a subset of the image.</param>
            <summary>Creates an SKImage from an encoded image wrapped by the data.</summary>
            <returns>The decoded image, or <see langword="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromPixels(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32)">
            <param name="info">Information describing the encoding of the image in memory.</param>
            <param name="pixels">Points to the image in memory.</param>
            <param name="rowBytes">Specified the number of bytes used per row in the image.</param>
            <summary>Creates an image from an in-memory buffer</summary>
            <returns>A new SKImage wrapping the specified buffer, or <see langword="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKImage.Height">
            <summary>The image height.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKImage.UniqueId">
            <summary>The unique ID associated with the image.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKImage.Width">
            <summary>The image width.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKImageDecoder">
            <summary>Base class for decoding compressed images into a SkBitmap.</summary>
            <remarks>
                <para />
                <example>
                    <code lang="C#"><![CDATA[public static void BitmapDecoder(SKCanvas canvas, int width, int height)
{
    canvas.Clear(SKColors.White);

    using (var stream = new SKFileStream("image.png"))
    using (var decoder = new SKImageDecoder(stream))
    using (var paint = new SKPaint())
    using (var tf = SKTypeface.FromFamilyName("Arial")) {
        paint.IsAntialias = true;
        paint.TextSize = 14;
        paint.Typeface = tf;
        paint.Color = SKColors.Black;

        // read / set decoder settings
        decoder.DitherImage = true;
        decoder.PreferQualityOverSpeed = true;
        decoder.SampleSize = 2;

        // decode the image
        using (var bitmap = new SKBitmap()) {
            var result = decoder.Decode(stream, bitmap);
            if (result != SKImageDecoderResult.Failure) {
                var info = bitmap.Info;
                var x = 25;
                var y = 25;

                canvas.DrawBitmap(bitmap, x, y);
                x += info.Width + 25;
                y += 14;

                canvas.DrawText(string.Format("Result: {0}", result), x, y, paint);
                y += 20;

                canvas.DrawText(string.Format("Size: {0}px x {1}px", bitmap.Width, bitmap.Height), x, y, paint);
                y += 20;

                canvas.DrawText(string.Format("Pixels: {0} @ {1}b/px", bitmap.Pixels.Length, bitmap.BytesPerPixel), x, y, paint);
            }
        }
    }
}]]></code>
                </example>.</remarks>
        </member>
        <member name="C:SkiaSharp.SKImageDecoder(SkiaSharp.SKStreamRewindable)">
            <param name="stream">To be added.</param>
            <summary>Constructs an SKImageDecoder from a stream.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageDecoder.CancelDecode">
            <summary>Requests that the decoding be canceled.</summary>
            <remarks>
                <para>Decoding is synchronous, but for long decodes, a different thread can call this method safely. This sets a state that the decoders will periodically check, and if they see it changed to cancel, they will cancel. This will result in Decode() returning <paramref name="false" />. However, there is no guarantee that the decoder will see the state change in time, so it is possible that CancelDecode() will be called, but will be ignored and Decode() will return <paramref name="true" /> (assuming no other problems were encountered).</para>
                <para />
                <para>This state is automatically reset at the beginning of a Decode operation.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageDecoder.Decode(SkiaSharp.SKStream,SkiaSharp.SKBitmap,SkiaSharp.SKColorType,SkiaSharp.SKImageDecoderMode)">
            <param name="stream">Stream to decode from.</param>
            <param name="bitmap">Target bitmap</param>
            <param name="pref">Give preference to this color type</param>
            <param name="mode">Decoding mode</param>
            <summary>Given a stream, decode it into the specified bitmap.</summary>
            <returns>To be added.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageDecoder.DecodeFile(System.String,SkiaSharp.SKBitmap,SkiaSharp.SKColorType,SkiaSharp.SKImageDecoderMode)">
            <param name="filename">Filename to decode</param>
            <param name="bitmap">Target bitmap</param>
            <param name="pref">Give preference to this color type</param>
            <param name="mode">Decoding mode</param>
            <summary>
                <para>Decode the image stored in the specified file, and store the result in the provided bitmap.</para>
            </summary>
            <returns>
                <paramref name="true" /> on success, <paramref name="false" /> on failure.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageDecoder.DecodeFile(System.String,SkiaSharp.SKBitmap,SkiaSharp.SKColorType,SkiaSharp.SKImageDecoderMode,SkiaSharp.SKImageDecoderFormat@)">
            <param name="filename">Filename to decode</param>
            <param name="bitmap">Target bitmap</param>
            <param name="pref">Give preference to this color type</param>
            <param name="mode">Decoding mode</param>
            <param name="format">On success, this will contain the format of the decoded file.</param>
            <summary>Decode the image stored in the specified file, and store the result in the provided bitmap.</summary>
            <returns>
                <paramref name="true" /> on success, <paramref name="false" /> on failure.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageDecoder.DecodeFileBounds(System.String,SkiaSharp.SKImageInfo@,SkiaSharp.SKColorType)">
            <param name="filename">Filename to decode</param>
            <param name="info">On success, the boundary information about the image will be stored here.</param>
            <param name="pref">Give preference to this color type</param>
            <summary>Parses a file to extract the boundary information.</summary>
            <returns>
                <paramref name="true" /> on success and the <paramref name="info" /> field set with the image boundary information, <paramref name="false" /> on failure.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageDecoder.DecodeFileBounds(System.String,SkiaSharp.SKImageInfo@,SkiaSharp.SKColorType,SkiaSharp.SKImageDecoderFormat@)">
            <param name="filename">Filename to decode</param>
            <param name="info">On success, the boundary information about the image will be stored here.</param>
            <param name="pref">Give preference to this color type</param>
            <param name="format">On success, this will contain the format of the decoded file.</param>
            <summary>Parses a file to extract the boundary information and the detected file format.</summary>
            <returns>
                <paramref name="true" /> on success and the <paramref name="info" /> field set with the image boundary information, <paramref name="false" /> on failure.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageDecoder.DecodeMemory(System.Byte[],SkiaSharp.SKBitmap,SkiaSharp.SKColorType,SkiaSharp.SKImageDecoderMode)">
            <param name="buffer">Byte array containing the image.</param>
            <param name="bitmap">Target bitmap</param>
            <param name="pref">Give preference to this color type</param>
            <param name="mode">Decoding mode</param>
            <summary>Decodes a image stored on a byte buffer.</summary>
            <returns>
                <paramref name="true" /> on success, <paramref name="false" /> on failure.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageDecoder.DecodeMemory(System.Byte[],SkiaSharp.SKBitmap,SkiaSharp.SKColorType,SkiaSharp.SKImageDecoderMode,SkiaSharp.SKImageDecoderFormat@)">
            <param name="buffer">Byte array containing the image.</param>
            <param name="bitmap">Target bitmap</param>
            <param name="pref">Give preference to this color type</param>
            <param name="mode">Decoding mode</param>
            <param name="format">On success, this will contain the format of the decoded file.</param>
            <summary>Decodes a image stored on a byte buffer.</summary>
            <returns>
                <paramref name="true" /> on success, <paramref name="false" /> on failure.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageDecoder.DecodeMemoryBounds(System.Byte[],SkiaSharp.SKImageInfo@,SkiaSharp.SKColorType)">
            <param name="buffer">Byte array containing the image.</param>
            <param name="info">On success, the boundary information about the image will be stored here.</param>
            <param name="pref">Give preference to this color type</param>
            <summary>Parses a byte array to extract the image boundary information.</summary>
            <returns>
                <paramref name="true" /> on success and the <paramref name="info" /> field set with the image boundary information, <paramref name="false" /> on failure.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageDecoder.DecodeMemoryBounds(System.Byte[],SkiaSharp.SKImageInfo@,SkiaSharp.SKColorType,SkiaSharp.SKImageDecoderFormat@)">
            <param name="buffer">Byte array containing the image.</param>
            <param name="info">On success, the boundary information about the image will be stored here.</param>
            <param name="pref">Give preference to this color type</param>
            <param name="format">On success, this will contain the format of the decoded file.</param>
            <summary>Parses a byte array to extract the image boundary information and the detected file format.</summary>
            <returns>
                <paramref name="true" /> on success and the <paramref name="info" /> field set with the image boundary information, <paramref name="false" /> on failure.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageDecoder.DecodeStream(SkiaSharp.SKStreamRewindable,SkiaSharp.SKBitmap,SkiaSharp.SKColorType,SkiaSharp.SKImageDecoderMode)">
            <param name="stream">Stream containing the image</param>
            <param name="bitmap">Target bitmap</param>
            <param name="pref">Give preference to this color type</param>
            <param name="mode">Decoding mode</param>
            <summary>Decodes a image from a stream.</summary>
            <returns>
                <paramref name="true" /> on success, <paramref name="false" /> on failure.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageDecoder.DecodeStream(SkiaSharp.SKStreamRewindable,SkiaSharp.SKBitmap,SkiaSharp.SKColorType,SkiaSharp.SKImageDecoderMode,SkiaSharp.SKImageDecoderFormat@)">
            <param name="stream">Stream containing the image</param>
            <param name="bitmap">Target bitmap</param>
            <param name="pref">Give preference to this color type</param>
            <param name="mode">Decoding mode</param>
            <param name="format">On success, this will contain the format of the decoded file.</param>
            <summary>Decodes a image from a stream.</summary>
            <returns>
                <paramref name="true" /> on success, <paramref name="false" /> on failure.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageDecoder.DecodeStreamBounds(SkiaSharp.SKStreamRewindable,SkiaSharp.SKImageInfo@,SkiaSharp.SKColorType)">
            <param name="stream">Stream containing the image</param>
            <param name="info">On success, the boundary information about the image will be stored here.</param>
            <param name="pref">Give preference to this color type</param>
            <summary>Parses a stream to extract the image boundary information</summary>
            <returns>
                <paramref name="true" /> on success and the <paramref name="info" /> field set with the image boundary information, <paramref name="false" /> on failure.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageDecoder.DecodeStreamBounds(SkiaSharp.SKStreamRewindable,SkiaSharp.SKImageInfo@,SkiaSharp.SKColorType,SkiaSharp.SKImageDecoderFormat@)">
            <param name="stream">Stream containing the image</param>
            <param name="info">On success, the boundary information about the image will be stored here.</param>
            <param name="pref">Give preference to this color type</param>
            <param name="format">On success, this will contain the format of the decoded file.</param>
            <summary>Parses a stream to extract the image boundary information and the detected file format.</summary>
            <returns>
                <paramref name="true" /> on success and the <paramref name="info" /> field set with the image boundary information, <paramref name="false" /> on failure.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageDecoder.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageDecoder.DitherImage">
            <summary>Controls whether the decoder attempts to dither the image.</summary>
            <value>
                <para />
            </value>
            <remarks>The default setting is <paramref name="true" />.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageDecoder.Format">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageDecoder.FormatName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageDecoder.GetFormat(SkiaSharp.SKStreamRewindable)">
            <param name="stream">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageDecoder.GetFormatName(SkiaSharp.SKImageDecoderFormat)">
            <param name="format">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageDecoder.PreferQualityOverSpeed">
            <summary>Controls whether the decoder chooses quality over speed.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageDecoder.RequireUnpremultipliedColors">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageDecoder.SampleSize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageDecoder.ShouldCancelDecode">
            <summary>Returns <see langword="true" /> i<paramref name="true" /> if the decoding should stop.</summary>
            <value>To be added.</value>
            <remarks>This method is the companion to the <see cref="M:SkiaSharp.SKImageDecoder.CancelDecode" /> method which will request that the decoding of an image stop.   </remarks>
        </member>
        <member name="P:SkiaSharp.SKImageDecoder.SkipWritingZeros">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKImageDecoderFormat">
            <summary>Decoder file format</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKImageDecoderFormat.Astc">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKImageDecoderFormat.Bmp">
            <summary>BMP file</summary>
        </member>
        <member name="F:SkiaSharp.SKImageDecoderFormat.Gif">
            <summary>GIF file</summary>
        </member>
        <member name="F:SkiaSharp.SKImageDecoderFormat.Ico">
            <summary>Ico file</summary>
        </member>
        <member name="F:SkiaSharp.SKImageDecoderFormat.Jpeg">
            <summary>Jpeg File</summary>
        </member>
        <member name="F:SkiaSharp.SKImageDecoderFormat.Ktx">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKImageDecoderFormat.Pkm">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKImageDecoderFormat.Png">
            <summary>PNG file</summary>
        </member>
        <member name="F:SkiaSharp.SKImageDecoderFormat.Unknown">
            <summary>Unknown file format.</summary>
        </member>
        <member name="F:SkiaSharp.SKImageDecoderFormat.Wbmp">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKImageDecoderFormat.Webp">
            <summary>WebP format</summary>
        </member>
        <member name="T:SkiaSharp.SKImageDecoderMode">
            <summary>Flags passed to the <see cref="M:SkiaSharp.SKImageDecoder.Decode" /> method.</summary>
            <remarks>These flags are used to control whether the decoder should decode the pixels in an image being loaded, of if the caller is merely interested in obtaining the boundary information from the image.</remarks>
        </member>
        <member name="F:SkiaSharp.SKImageDecoderMode.DecodeBounds">
            <summary>Only returns information about the bitmap (boundary).</summary>
        </member>
        <member name="F:SkiaSharp.SKImageDecoderMode.DecodePixels">
            <summary>Return entire bitmap (including pixels)</summary>
        </member>
        <member name="T:SkiaSharp.SKImageDecoderResult">
            <summary>Results from the <see cref="M:SkiaSharp.SKImageDecoder.Decode" /> methods.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKImageDecoderResult.Failure">
            <summary>
                <para>Image failed to decode. bitmap will be unchanged.</para>
                <para />
            </summary>
        </member>
        <member name="F:SkiaSharp.SKImageDecoderResult.PartialSuccess">
            <summary>
                <para>Part of the image decoded. The rest is filled automatically.</para>
                <para />
            </summary>
        </member>
        <member name="F:SkiaSharp.SKImageDecoderResult.Success">
            <summary>
                <para>The entire image was decoded, if Mode was DecodePixels.   Or the bounds were decoded when the mode is DecodeBounds.</para>
                <para />
            </summary>
        </member>
        <member name="T:SkiaSharp.SKImageEncodeFormat">
            <summary>Format to use when encoding an SKImage with the <see cref="M:SkiaSharp.SKImage.Encode(SkiaSharp.SKImageEncodeFormat,System.Int32)" /> method.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKImageEncodeFormat.Bmp">
            <summary>BMP File</summary>
        </member>
        <member name="F:SkiaSharp.SKImageEncodeFormat.Gif">
            <summary>GIF file format</summary>
        </member>
        <member name="F:SkiaSharp.SKImageEncodeFormat.Ico">
            <summary>Ico file format</summary>
        </member>
        <member name="F:SkiaSharp.SKImageEncodeFormat.Jpeg">
            <summary>JPEG file format</summary>
        </member>
        <member name="F:SkiaSharp.SKImageEncodeFormat.Ktx">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKImageEncodeFormat.Png">
            <summary>PNG file format</summary>
        </member>
        <member name="F:SkiaSharp.SKImageEncodeFormat.Unknown">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKImageEncodeFormat.Wbmp">
            <summary>Windows BMP file format</summary>
        </member>
        <member name="F:SkiaSharp.SKImageEncodeFormat.Webp">
            <summary>WebP file format</summary>
        </member>
        <member name="T:SkiaSharp.SKImageFilter">
            <summary>Image filters for the <see cref="T:SkiaSharp.SKPaint" /></summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateAlphaThreshold(SkiaSharp.SKRectI,System.Single,System.Single,SkiaSharp.SKImageFilter)">
            <param name="region">To be added.</param>
            <param name="innerThreshold">To be added.</param>
            <param name="outerThreshold">To be added.</param>
            <param name="input">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateBlur(System.Single,System.Single,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="sigmaX">To be added.</param>
            <param name="sigmaY">To be added.</param>
            <param name="input">To be added.</param>
            <param name="cropRect">To be added.</param>
            <summary>Creates a blur filter</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateColorFilter(SkiaSharp.SKColorFilter,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="cf">To be added.</param>
            <param name="input">To be added.</param>
            <param name="cropRect">To be added.</param>
            <summary>Creates a color filter</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateCompose(SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter)">
            <param name="outer">To be added.</param>
            <param name="inner">To be added.</param>
            <summary>Creates an image compositing filter</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateCompose(SkiaSharp.SKDisplacementMapEffectChannelSelectorType,SkiaSharp.SKDisplacementMapEffectChannelSelectorType,System.Single,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="xChannelSelector">To be added.</param>
            <param name="yChannelSelector">To be added.</param>
            <param name="scale">To be added.</param>
            <param name="displacement">To be added.</param>
            <param name="input">To be added.</param>
            <param name="cropRect">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateDilate(System.Int32,System.Int32,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="radiusX">To be added.</param>
            <param name="radiusY">To be added.</param>
            <param name="input">To be added.</param>
            <param name="cropRect">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateDistantLitDiffuse(SkiaSharp.SKPoint3,SkiaSharp.SKColor,System.Single,System.Single,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="direction">To be added.</param>
            <param name="lightColor">To be added.</param>
            <param name="surfaceScale">To be added.</param>
            <param name="kd">To be added.</param>
            <param name="input">To be added.</param>
            <param name="cropRect">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateDistantLitSpecular(SkiaSharp.SKPoint3,SkiaSharp.SKColor,System.Single,System.Single,System.Single,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="direction">To be added.</param>
            <param name="lightColor">To be added.</param>
            <param name="surfaceScale">To be added.</param>
            <param name="ks">To be added.</param>
            <param name="shininess">To be added.</param>
            <param name="input">To be added.</param>
            <param name="cropRect">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateDownSample(System.Single,SkiaSharp.SKImageFilter)">
            <param name="scale">To be added.</param>
            <param name="input">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateDownSample(System.Single,System.Single,System.Single,System.Single,SkiaSharp.SKColor,SkiaSharp.SKDropShadowImageFilterShadowMode,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="dx">To be added.</param>
            <param name="dy">To be added.</param>
            <param name="sigmaX">To be added.</param>
            <param name="sigmaY">To be added.</param>
            <param name="color">To be added.</param>
            <param name="shadowMode">To be added.</param>
            <param name="input">To be added.</param>
            <param name="cropRect">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateErode(System.Int32,System.Int32,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="radiusX">To be added.</param>
            <param name="radiusY">To be added.</param>
            <param name="input">To be added.</param>
            <param name="cropRect">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateMagnifier(SkiaSharp.SKRect,System.Single,SkiaSharp.SKImageFilter)">
            <param name="src">To be added.</param>
            <param name="inset">To be added.</param>
            <param name="input">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateMatrix(SkiaSharp.SKMatrix,SkiaSharp.SKFilterQuality,SkiaSharp.SKImageFilter)">
            <param name="matrix">To be added.</param>
            <param name="quality">To be added.</param>
            <param name="input">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateMatrixConvolution(SkiaSharp.SKSizeI,System.Single[],System.Single,System.Single,SkiaSharp.SKPointI,SkiaSharp.SKMatrixConvolutionTileMode,System.Boolean,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="kernelSize">To be added.</param>
            <param name="kernel">To be added.</param>
            <param name="gain">To be added.</param>
            <param name="bias">To be added.</param>
            <param name="kernelOffset">To be added.</param>
            <param name="tileMode">To be added.</param>
            <param name="convolveAlpha">To be added.</param>
            <param name="input">To be added.</param>
            <param name="cropRect">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateMerge(SkiaSharp.SKImageFilter[],SkiaSharp.SKXferMode[],SkiaSharp.SKImageFilter+CropRect)">
            <param name="filters">To be added.</param>
            <param name="modes">To be added.</param>
            <param name="cropRect">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateOffset(System.Single,System.Single,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="dx">To be added.</param>
            <param name="dy">To be added.</param>
            <param name="input">To be added.</param>
            <param name="cropRect">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreatePicture(SkiaSharp.SKPicture)">
            <param name="picture">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreatePicture(SkiaSharp.SKPicture,SkiaSharp.SKRect)">
            <param name="picture">To be added.</param>
            <param name="cropRect">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreatePictureForLocalspace(SkiaSharp.SKPicture,SkiaSharp.SKRect,SkiaSharp.SKFilterQuality)">
            <param name="picture">To be added.</param>
            <param name="cropRect">To be added.</param>
            <param name="filterQuality">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreatePointLitDiffuse(SkiaSharp.SKPoint3,SkiaSharp.SKColor,System.Single,System.Single,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="location">To be added.</param>
            <param name="lightColor">To be added.</param>
            <param name="surfaceScale">To be added.</param>
            <param name="kd">To be added.</param>
            <param name="input">To be added.</param>
            <param name="cropRect">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreatePointLitSpecular(SkiaSharp.SKPoint3,SkiaSharp.SKColor,System.Single,System.Single,System.Single,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="location">To be added.</param>
            <param name="lightColor">To be added.</param>
            <param name="surfaceScale">To be added.</param>
            <param name="ks">To be added.</param>
            <param name="shininess">To be added.</param>
            <param name="input">To be added.</param>
            <param name="cropRect">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateSpotLitDiffuse(SkiaSharp.SKPoint3,SkiaSharp.SKPoint3,System.Single,System.Single,SkiaSharp.SKColor,System.Single,System.Single,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="location">To be added.</param>
            <param name="target">To be added.</param>
            <param name="specularExponent">To be added.</param>
            <param name="cutoffAngle">To be added.</param>
            <param name="lightColor">To be added.</param>
            <param name="surfaceScale">To be added.</param>
            <param name="kd">To be added.</param>
            <param name="input">To be added.</param>
            <param name="cropRect">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateSpotLitSpecular(SkiaSharp.SKPoint3,SkiaSharp.SKPoint3,System.Single,System.Single,SkiaSharp.SKColor,System.Single,System.Single,System.Single,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="location">To be added.</param>
            <param name="target">To be added.</param>
            <param name="specularExponent">To be added.</param>
            <param name="cutoffAngle">To be added.</param>
            <param name="lightColor">To be added.</param>
            <param name="surfaceScale">To be added.</param>
            <param name="ks">To be added.</param>
            <param name="shininess">To be added.</param>
            <param name="input">To be added.</param>
            <param name="cropRect">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKImageFilter+CropRect">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:SkiaSharp.SKImageFilter+CropRect">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:SkiaSharp.SKImageFilter+CropRect(SkiaSharp.SKRect,SkiaSharp.SKCropRectFlags)">
            <param name="rect">To be added.</param>
            <param name="flags">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter+CropRect.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageFilter+CropRect.Flags">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageFilter+CropRect.Rect">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKImageInfo">
            <summary>Describe an image's dimensions and pixel type.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKImageInfo(System.Int32,System.Int32)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:SkiaSharp.SKImageInfo(System.Int32,System.Int32,SkiaSharp.SKColorType)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <param name="colorType">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:SkiaSharp.SKImageInfo(System.Int32,System.Int32,SkiaSharp.SKColorType,SkiaSharp.SKAlphaType)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <param name="colorType">To be added.</param>
            <param name="alphaType">To be added.</param>
            <summary>Creates a new SKImageInfo with the specified width, height, color type and transparency type.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKImageInfo.AlphaType">
            <summary>Returns the transparency type for the image info.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageInfo.BytesPerPixel">
            <summary>Returns the number of bytes used per pixel.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageInfo.BytesSize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKImageInfo.ColorType">
            <summary>Returns the color type.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKImageInfo.Empty">
            <summary>An empty SKImageInfo.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKImageInfo.Height">
            <summary>Returns the height.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageInfo.IsEmpty">
            <summary>true if the Height or Width are less or equal than zero.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageInfo.IsOpaque">
            <summary>true if the configured alpha type is opaque.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKImageInfo.PlatformColorType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageInfo.Rect">
            <summary>Returns a rectangle with the Width and Height.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageInfo.RowBytes">
            <summary>The number of bytes per row.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageInfo.Size">
            <summary>Returns the size of the image.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKImageInfo.Width">
            <summary>Returns the width.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKManagedStream">
            <summary>Wraps a <see cref="T:System.IO.Stream" /> into a <see cref="T:SkiaSharp.SKStreamAsset" /> (a seekable, rewindable Skia Stream)</summary>
            <remarks>
                <para>The following example shows how to wrap a <see cref="T:System.IO.Stream" /> that represents a stream into an embedded resource in an assembly and use it with Skia APIs that use resources:</para>
                <para />
                <para />
                <example>
                    <code lang="C#"><![CDATA[public static void BitmapShader (SKCanvas canvas, int width, int height)
{
    var assembly = typeof(Demos).GetTypeInfo ().Assembly;

    // load the image from the embedded resource stream
    using (var resource = assembly.GetManifestResourceStream ("embedded.png"))
    using (var stream = new SKManagedStream(resource)) 
    using (var source = SKBitmap.Decode (stream)) {
        var matrix = SKMatrix.MakeRotation (30.0f);
        using (var shader = SKShader.CreateBitmap (source, SKShaderTileMode.Repeat, SKShaderTileMode.Repeat, matrix))
        using (var paint = new SKPaint ()) {
            paint.IsAntialias = true;
            paint.Shader = shader;

            // tile the bitmap
            canvas.Clear (SKColors.White);
            canvas.DrawPaint (paint);
        }
    }
}]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKManagedStream(System.IO.Stream)">
            <param name="managedStream">The managed stream</param>
            <summary>Constructrs a new SKManagedStream from a <see cref="T:System.IO.Stream" />.</summary>
            <remarks>The underlying stream is not disposed when this object is disposed.</remarks>
        </member>
        <member name="C:SkiaSharp.SKManagedStream(System.IO.Stream,System.Boolean)">
            <param name="managedStream">The managed stream</param>
            <param name="disposeManagedStream">If this is set to <see langword="true" />, the provided <see langword="managedStream" /> will be disposed when this instance is disposed.</param>
            <summary>Constructrs a new SKManagedStream from a <see cref="T:System.IO.Stream" />, can optionally dispose the provided stream on Dispose.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKManagedStream.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKMaskFilter">
            <summary>Modifications to the alpha mask in the <see cref="T:SkiaSharp.SKPaint." /></summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMaskFilter.ConvertRadiusToSigma(System.Single)">
            <param name="radius">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMaskFilter.ConvertSigmaToRadius(System.Single)">
            <param name="sigma">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMaskFilter.CreateBlur(SkiaSharp.SKBlurStyle,System.Single)">
            <param name="blurStyle">To be added.</param>
            <param name="sigma">To be added.</param>
            <summary>Creates a blur filter.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMaskFilter.CreateClip(System.Byte,System.Byte)">
            <param name="min">To be added.</param>
            <param name="max">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMaskFilter.CreateEmboss(System.Single,SkiaSharp.SKPoint3,System.Single,System.Single)">
            <param name="blurSigma">To be added.</param>
            <param name="direction">To be added.</param>
            <param name="ambient">To be added.</param>
            <param name="specular">To be added.</param>
            <summary>Creates an emboss filter</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMaskFilter.CreateEmboss(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <param name="blurSigma">To be added.</param>
            <param name="directionX">To be added.</param>
            <param name="directionY">To be added.</param>
            <param name="directionZ">To be added.</param>
            <param name="ambient">To be added.</param>
            <param name="specular">To be added.</param>
            <summary>Creates an emboss filter</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMaskFilter.CreateGamma(System.Single)">
            <param name="gamma">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMaskFilter.CreateTable(System.Byte[])">
            <param name="table">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMaskFilter.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKMatrix">
            <summary>2D Transformation matrix with perspective.</summary>
            <remarks>
                <para>The SKMatrix is a full 3x3 matrix.</para>
                <para />
                <para>It extends the traditional 2D affine transformation matrix with three perspective components that allow simple 3D effects to be created with it.   Those components must be manually set by using the <see cref="P:SkiaSharp.SKMatrix.Persp0" />, <see cref="P:SkiaSharp.SKMatrix.Persp1" />, <see cref="P:SkiaSharp.SKMatrix.Persp2" /> fields of the matrix.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.Concat(SkiaSharp.SKMatrix@,SkiaSharp.SKMatrix@,SkiaSharp.SKMatrix@)">
            <param name="target">The result matrix value.</param>
            <param name="first">The first matrix to concatenate.</param>
            <param name="second">The second matrix to concatenate.</param>
            <summary>Concatenates the specified matrices into the resulting target matrix.   </summary>
            <remarks>Either source matrices can also be the target matrix.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MakeIdentity">
            <summary>Returns the identity matrix.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MakeRotation(System.Single)">
            <param name="radians">The angle for the rotation, in radians.</param>
            <summary>Creates a rotation matrix</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MakeRotation(System.Single,System.Single,System.Single)">
            <param name="radians">The angle for the rotation, in radians.</param>
            <param name="pivotx">The X coordiate for the rotation pivot.</param>
            <param name="pivoty">The Y coordiate for the rotation pivot.</param>
            <summary>Creates an <see cref="T:SkiaSharp.SKMatrix" /> that represents a specific rotation in radians with a specific pivot point.</summary>
            <returns>Returns a new matrix with the specific rotation at the pivot point.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MakeRotationDegrees(System.Single)">
            <param name="degrees">
                <para>The angle for the rotation, in degrees.</para>
                <para />
            </param>
            <summary>Creates an <see cref="T:SkiaSharp.SKMatrix" /> that represents a specific rotation in degrees.</summary>
            <returns>Returns a new matrix with the specific rotation in degrees.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MakeRotationDegrees(System.Single,System.Single,System.Single)">
            <param name="degrees">The angle for the rotation, in degrees.</param>
            <param name="pivotx">The X coordiate for the rotation pivot.</param>
            <param name="pivoty">The Y coordiate for the rotation pivot.</param>
            <summary>Creates an <see cref="T:SkiaSharp.SKMatrix" /> that represents a specific rotation in degrees.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MakeScale(System.Single,System.Single)">
            <param name="sx">Scale X component.</param>
            <param name="sy">Scale Y component.</param>
            <summary>Creates a scaling matrix.</summary>
            <returns>Returns a new matrix with the specific scale factor.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MakeScale(System.Single,System.Single,System.Single,System.Single)">
            <param name="sx">Scale X component.</param>
            <param name="sy">Scale Y component.</param>
            <param name="pivotX">The X coordiate for the rotation pivot.</param>
            <param name="pivotY">The Y coordiate for the rotation pivot.</param>
            <summary>Creates a scaling matrix with a pivot point.</summary>
            <returns>Returns a new matrix with the specific scale factor at the pivot point.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MakeSkew(System.Single,System.Single)">
            <param name="sx">Skew X component.</param>
            <param name="sy">Skew Y component.</param>
            <summary>Creates a skewing matrix.</summary>
            <returns>Returns a new matrix with the specific skewing factor.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MakeTranslation(System.Single,System.Single)">
            <param name="dx">The X offset for the translation.</param>
            <param name="dy">The Y offset for the translation.</param>
            <summary>Creates a translation matrix.</summary>
            <returns>Returns a new matrix with the specific translation factor.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MapPoints(SkiaSharp.SKPoint[])">
            <param name="points">An array of points that you want to map.</param>
            <summary>
                <para>Apply the to the array of points and return the mapped results.</para>
            </summary>
            <returns>New array allocated with the mapped results.</returns>
            <remarks>
                <para>Mapping points uses all components of the matrix.   If you want to ignore the translation, use MapVectors.</para>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MapPoints(SkiaSharp.SKPoint[],SkiaSharp.SKPoint[])">
            <param name="result">Array where the mapped results will be stored, the array needs to have the same number of elements of the <paramref name="points" /> array.</param>
            <param name="points">Source array with the points to convert.</param>
            <summary>Apply the to the array of points and return the mapped results.</summary>
            <remarks>
                <para>Mapping points uses all components of the matrix.   If you want to ignore the translation, use MapVectors.</para>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MapRadius(System.Single)">
            <param name="radius">Radius to map.</param>
            <summary>
                <para>Return the mean radius of a circle after it has been mapped by this matrix</para>
            </summary>
            <returns>Return the mean radius of a circle after it has been mapped by this matrix</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MapRect(SkiaSharp.SKRect)">
            <param name="source">Source recatngle to map.</param>
            <summary>Apply the matrix to the source rectangle and return the mapped rectangle.</summary>
            <returns>The rectangle with the matrix.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MapRect(SkiaSharp.SKMatrix@,SkiaSharp.SKRect@,SkiaSharp.SKRect@)">
            <param name="matrix">To be added.</param>
            <param name="dest">To be added.</param>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MapVector(System.Single,System.Single)">
            <param name="x">X component of the vector.</param>
            <param name="y">Y component of the vector.</param>
            <summary>Applies the matrix to a vector.</summary>
            <returns>Returns the mapped point.</returns>
            <remarks>Mapping vectors ignores the translation component in the matrix.   If you want to take the translation into consideration, use MapXY.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MapVectors(SkiaSharp.SKPoint[])">
            <param name="vectors">An array of vectors that you want to map.</param>
            <summary>Apply the to the array of vectors and return the mapped results..</summary>
            <returns>New array allocated with the mapped results.</returns>
            <remarks>Mapping vectors ignores the translation component in the matrix.   If you want to take the translation into consideration, use MapPoints.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MapVectors(SkiaSharp.SKPoint[],SkiaSharp.SKPoint[])">
            <param name="result">Array where the mapped results will be stored, the array needs to have the same number of elements of the <paramref name="vectors" /> array.</param>
            <param name="vectors">To be added.</param>
            <summary>Apply the to the array of vectors and return the mapped results..</summary>
            <remarks>Mapping vectors ignores the translation component in the matrix.   If you want to take the translation into consideration, use MapPoints.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MapXY(System.Single,System.Single)">
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <summary>Applies the matrix to a point.</summary>
            <returns>Returns the mapped point.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKMatrix.Persp0">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKMatrix.Persp1">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKMatrix.Persp2">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.PostConcat(SkiaSharp.SKMatrix@,SkiaSharp.SKMatrix@)">
            <param name="target">Target matrix.</param>
            <param name="matrix">The matrix to be post-concatenated.</param>
            <summary>Post-concatenates the matrix to the target matrix</summary>
            <remarks>This represents newTarget = matrix * target</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.PreConcat(SkiaSharp.SKMatrix@,SkiaSharp.SKMatrix@)">
            <param name="target">Target matrix.</param>
            <param name="matrix">The matrix to be post-concatenated.</param>
            <summary>Pre-concatenates the matrix to the target matrix</summary>
            <remarks>This represents newTarget = target * matrix</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.Rotate(SkiaSharp.SKMatrix@,System.Single)">
            <param name="matrix">Target matrix.</param>
            <param name="radians">The angle for the rotation, in radians.</param>
            <summary>Rotates the spefixied matrix by the specified radians.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.Rotate(SkiaSharp.SKMatrix@,System.Single,System.Single,System.Single)">
            <param name="matrix">Target matrix.</param>
            <param name="radians">The angle for the rotation, in radians.</param>
            <param name="pivotx">The X coordiate for the rotation pivot.</param>
            <param name="pivoty">The Y coordiate for the rotation pivot.</param>
            <summary>Rotates the spefixied matrix by the specified radians.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.RotateDegrees(SkiaSharp.SKMatrix@,System.Single)">
            <param name="matrix">Target matrix.</param>
            <param name="degrees">The angle for the rotation, in degrees.</param>
            <summary>Rotates the spefixied matrix by the specified degrees.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.RotateDegrees(SkiaSharp.SKMatrix@,System.Single,System.Single,System.Single)">
            <param name="matrix">Target matrix.</param>
            <param name="degrees">The angle for the rotation, in degrees.</param>
            <param name="pivotx">The X coordiate for the rotation pivot.</param>
            <param name="pivoty">The Y coordiate for the rotation pivot.</param>
            <summary>Rotates the spefixied matrix by the specified degrees.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKMatrix.ScaleX">
            <summary>The ScaleX component of the SKMatrix.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKMatrix.ScaleY">
            <summary>The ScaleY component of the SKMatrix.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.SetScaleTranslate(System.Single,System.Single,System.Single,System.Single)">
            <param name="sx">To be added.</param>
            <param name="sy">To be added.</param>
            <param name="tx">To be added.</param>
            <param name="ty">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKMatrix.SkewX">
            <summary>The SkewX component of the SKMatrix.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKMatrix.SkewY">
            <summary>The SkewY component of the SKMatrix.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKMatrix.TransX">
            <summary>The TransX component of the SKMatrix.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKMatrix.TransY">
            <summary>The TransY component of the SKMatrix.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.TryInvert(SkiaSharp.SKMatrix@)">
            <param name="inverse">The destination value to store the inverted matrix if the matrix can be inverted.</param>
            <summary>Attempts to invert the matrix, if possible the inverse matrix contains the result.</summary>
            <returns>True if the matrix can be inverted, and the inverse parameter is initialized with the inverted matrix, false otherwise.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKMatrixConvolutionTileMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKMatrixConvolutionTileMode.Clamp">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKMatrixConvolutionTileMode.ClampToBlack">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKMatrixConvolutionTileMode.Repeat">
            <summary>To be added.</summary>
        </member>
        <member name="T:SkiaSharp.SKMemoryStream">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:SkiaSharp.SKMemoryStream">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:SkiaSharp.SKMemoryStream(SkiaSharp.SKData)">
            <param name="data">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:SkiaSharp.SKMemoryStream(System.Byte[])">
            <param name="data">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:SkiaSharp.SKMemoryStream(System.UInt64)">
            <param name="length">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMemoryStream.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMemoryStream.SetMemory(System.Byte[])">
            <param name="data">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKObject">
            <summary>Base class for Skia-derived types.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKObject.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKObject.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKObject.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKObject.Handle">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKObject.OwnsHandle">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKPaint">
            <summary>The SKPaint class holds the style and color information about how to draw geometries, text and bitmaps.</summary>
            <remarks />
        </member>
        <member name="C:SkiaSharp.SKPaint">
            <summary>Creates a new SKPaint with the default settings.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.BreakText(System.String,System.Single)">
            <param name="text">The text to be measured</param>
            <param name="maxWidth">Maximum width. Only the subset of text whose accumulated widths are &lt;= maxWidth are measured.</param>
            <summary>Measure the text, stopping early if the measured width exceeds <paramref name="maxWidth" />.</summary>
            <returns>Return the number of characters of text that were measured. </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.BreakText(System.String,System.Single,System.Single@)">
            <param name="text">The text to be measured</param>
            <param name="maxWidth">
                <para>Maximum width. Only the subset of text whose accumulated widths are &lt;= <paramref name="maxWidth" /> are measured.</para>
                <para />
            </param>
            <param name="measuredWidth">Returns the actual width of the measured text</param>
            <summary>
                <para>Measure the text, stopping early if the measured width exceeds <paramref name="maxWidth" />.</para>
                <para />
            </summary>
            <returns>Return the number of characters of text that were measured. </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.BreakText(System.IntPtr,System.IntPtr,System.Single,System.Single@)">
            <param name="buffer">Contains a pointer to a region holding text encoded using the encoding specified in <see cref="P:SkiaSharp.SKPaint.TextEncoding" /> format.</param>
            <param name="length">Number of bytes to read from the <paramref name="buffer." /></param>
            <param name="maxWidth">Maximum width. Only the subset of text whose accumulated widths are &lt;= <paramref name="maxWidth" /> are measured.</param>
            <param name="measuredWidth">Returns the actual width of the measured text</param>
            <summary>Measure the text encoded as a UTF-8 buffer, stopping early if the measured width exceeds <paramref name="maxWidth" />.</summary>
            <returns>Return the number of characters of text that were measured. </returns>
            <remarks>The <paramref name="buffer" /> parameter is a pointer to a region in memory that contains text encoded in the <see cref="P:SkiaSharp.SKPaint.TextEncoding" /> format.   This only consumes up to <paramref name="length" /> bytes from the buffer.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.Color">
            <summary>The paint’s color.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para>Note that the color is a 32bit value containing alpha as well as r,g,b. This 32bit value is not premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b.</para>
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.ColorFilter">
            <summary>The paint’s color filter.</summary>
            <value>The current color filter.</value>
            <remarks>A color filter can be used with a Paint to modify the color of each pixel drawn with that paint.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.FilterQuality">
            <summary>
                <para>The <see cref="T:SkiaSharp.SKFilterQuality" /> of the current paint. This affects the quality (and performance) of drawing scaled images.</para>
            </summary>
            <value>The <see cref="T:SkiaSharp.SKFilterQuality" /> of the current paint.</value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.FontMetrics">
            <summary>The <see cref="C:SkiaSharp.SKFontMetrics" /> for the current typeface and type size.</summary>
            <value>The <see cref="C:SkiaSharp.SKFontMetrics" /> for the current typeface/pointsize/etc setting in this paint.</value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.GetTextPath(System.String,SkiaSharp.SKPoint[])">
            <param name="text">The text to generate an outline for.</param>
            <param name="points">The position to use for each glyph in the text.</param>
            <summary>Return the path (outline) for the specified text.</summary>
            <returns>A <see cref="T:SkiaSharp.SKPath" /> containing the outline of the text.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.GetTextPath(System.IntPtr,System.IntPtr,SkiaSharp.SKPoint[])">
            <param name="buffer">Contains a pointer to a region holding text encoded using the encoding specified in <see cref="P:SkiaSharp.SKPaint.TextEncoding" /> format.</param>
            <param name="length">Number of bytes to read from the <paramref name="buffer." /></param>
            <param name="points">The position to use for each glyph in the text.</param>
            <summary>Return the path (outline) for the specified text.</summary>
            <returns>A <see cref="T:SkiaSharp.SKPath" /> containing the outline of the text.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.GetTextPath(System.String,System.Single,System.Single)">
            <param name="text">The text to generate an outline for.</param>
            <param name="x">The x-coordinate of the first glyph in the text.</param>
            <param name="y">The y-coordinate of the first glyph in the text.</param>
            <summary>Return the path (outline) for the specified text.</summary>
            <returns>A <see cref="T:SkiaSharp.SKPath" /> containing the outline of the text.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.GetTextPath(System.IntPtr,System.IntPtr,System.Single,System.Single)">
            <param name="buffer">Contains a pointer to a region holding text encoded using the encoding specified in <see cref="P:SkiaSharp.SKPaint.TextEncoding" /> format.</param>
            <param name="length">Number of bytes to read from the <paramref name="buffer." /></param>
            <param name="x">The x-coordinate of the first glyph in the text.</param>
            <param name="y">The y-coordinate of the first glyph in the text.</param>
            <summary>Return the path (outline) for the specified text.</summary>
            <returns>A <see cref="T:SkiaSharp.SKPath" /> containing the outline of the text.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.ImageFilter">
            <summary>Image filter</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.IsAntialias">
            <summary>Controls antialiasing in the SKPaint.</summary>
            <value>The current setting for the anti-alias setting.</value>
            <remarks>If this property is <see langword="true" />, the paint smooths out the edges of what is being drawn, but is has no impact on the interior of the shape. </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.IsDither">
            <summary>Controls dither in the SKPaint.</summary>
            <value>The current setting for the dither setting.</value>
            <remarks>If this property is set true, the flags of the paint will be set to enable dithering.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.IsStroke">
            <summary>Controls stroke in the SKPaint.</summary>
            <value>The current setting for the stroke setting.</value>
            <remarks>If this property is set true, the style of the paint will be set to stroke paths instead of filling.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.IsVerticalText">
            <summary>Controls antialiasing in the <see cref="T:SkiaSharp.SKPaint" />.</summary>
            <value>The current setting for the vertical text setting.</value>
            <remarks>If this property is set true, then advances are treated as Y values rather than X values, and <see cref="M:SkiaSharp.SKCanvas.DrawText" /> will place its glyphs vertically rather than horizontally.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.MaskFilter">
            <summary>The SKPaint’s MaskFilter.</summary>
            <value>To be added.</value>
            <remarks>Mask filters control the transformations on the alpha channel before primitives are drawn.  Blur and Emboss are both MaskFilters.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.MeasureText(System.String)">
            <param name="text">The text to be measured</param>
            <summary>Measures the text</summary>
            <returns>Returns the width of the text.</returns>
            <remarks>
                <para>This will return the vertical measure if this is vertical text, in which case the returned value should be treated has a height instead of a width.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.MeasureText(System.IntPtr,System.IntPtr)">
            <param name="buffer">Contains a pointer to a region holding text encoded using the encoding specified in <see cref="P:SkiaSharp.SKPaint.TextEncoding" /> format.</param>
            <param name="length">Number of bytes to read from the <paramref name="buffer." /></param>
            <summary>Measures the UTF-8 encoded text.</summary>
            <returns>Returns the width of the text.</returns>
            <remarks>The <paramref name="buffer" /> parameter is a pointer to a region in memory that contains text encoded in the <see cref="P:SkiaSharp.SKPaint.TextEncoding" /> format.   This only consumes up to <paramref name="length" /> bytes from the buffer.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.MeasureText(System.String,SkiaSharp.SKRect@)">
            <param name="text">The text to be measured</param>
            <param name="bounds">Returns the bounds of the text relative to (0,0)</param>
            <summary>Measures the text</summary>
            <returns>Returns the width of the text.</returns>
            <remarks>This will return the vertical measure if this is vertical text, in which case the returned value should be treated has a height instead of a width.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.MeasureText(System.IntPtr,System.IntPtr,SkiaSharp.SKRect@)">
            <param name="buffer">Contains a pointer to a region holding text encoded using the encoding specified in <see cref="P:SkiaSharp.SKPaint.TextEncoding" /> format.</param>
            <param name="length">Number of bytes to read from the <paramref name="buffer." /></param>
            <param name="bounds">Returns the bounds of the text relative to (0,0)</param>
            <summary>Measures the UTF-8 encoded text.</summary>
            <returns>Returns the width of the text.</returns>
            <remarks>
                <para>This will return the vertical measure if this is vertical text, in which case the returned value should be treated has a height instead of a width.</para>
                <para>The <paramref name="buffer" /> parameter is a pointer to a region in memory that contains text encoded in the <see cref="P:SkiaSharp.SKPaint.TextEncoding" /> format.   This only consumes up to <paramref name="length" /> bytes from the buffer.</para>
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.PathEffect">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.Shader">
            <summary>The SKPaint’s shader.</summary>
            <value>The current shader associated with this paint.</value>
            <remarks>Shaders are effects like gradients, or bitmap patterns.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.StrokeCap">
            <summary>Controls how the start and end of stroked lines and paths are treated.</summary>
            <value>The current cap setting.</value>
            <remarks>The default is SKStrokeCap.Butt</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.StrokeJoin">
            <summary>Controls the path’s join type.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.StrokeMiter">
            <summary>The paint's stroke miter value</summary>
            <value>
                <para>the paint's miter limit, used whenever the paint's style is Stroke or StrokeAndFill.</para>
            </value>
            <remarks>
                <para>This is used to control the behavior of miter joins when the joins angle is sharp.</para>
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.StrokeWidth">
            <summary>The paint’s stroke width.</summary>
            <value>
                <para>the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.</para>
            </value>
            <remarks>The value of zero is the special hairline mode.   Hairlines always draw with a width of 1 pixel, regardless of the transformation matrix.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.TextAlign">
            <summary>Controls the path’s align value.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.TextEncoding">
            <summary>The encoding used by the text.</summary>
            <value>The encoding used by the various text measuring primitives.</value>
            <remarks>This defaults to UTF8 encoding.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.TextScaleX">
            <summary>The SKPaint’s horizontal scale factor for text.</summary>
            <value>The current scale factor for drawing/measuring text in X.</value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.TextSize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.TextSkewX">
            <summary>The SKPaint’s horizontal skew factor for text.</summary>
            <value>The current skew factor along the X axis.</value>
            <remarks>The default value is zero.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.Typeface">
            <summary>Controls the typeface used when painting using this SKPaint.</summary>
            <value>The current type face, or <see langword="null" /> if not set.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.XferMode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKPath">
            <summary>
                <para>Same as <see cref="M:SkiaSharp.SKPath.ConicTo" /> but the coordinates are considered relative to the last point on this contour.</para>
            </summary>
            <remarks>
                <para> If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0,0).</para>
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKPath">
            <summary>Creates an empty path.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:SkiaSharp.SKPath(SkiaSharp.SKPath)">
            <param name="path">The path to clone.</param>
            <summary>Creates an SKPath by making a copy of an existing path</summary>
            <remarks>This constructor can throw InvalidOperationException if there is a problem copying the source path.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.AddArc(SkiaSharp.SKRect,System.Single,System.Single)">
            <param name="oval">The bounds of oval used to define the size of the arc.</param>
            <param name="startAngle">Starting angle (in degrees) where the arc begins.</param>
            <param name="sweepAngle">Sweep angle (in degrees) measured clockwise.</param>
            <summary>Add the specified arc to the path as a new contour.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.AddCircle(System.Single,System.Single,System.Single,SkiaSharp.SKPathDirection)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="radius">To be added.</param>
            <param name="dir">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.AddOval(SkiaSharp.SKRect,SkiaSharp.SKPathDirection)">
            <param name="rect">The bounding oval to add as a closed contour to the path</param>
            <param name="direction">The direction to wind the oval's contour.</param>
            <summary>Adds an oval to the current path.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.AddPath(SkiaSharp.SKPath,SkiaSharp.SKPath+AddMode)">
            <param name="other">The path containing the elements to be added to the current path.</param>
            <param name="mode">Determines how the <paramref name="other" /> path contours are added to the path.   On Append mode, contours are added as new contours.   On Extend mode, the last contour of the path is extended with the first contour of the <paramref name="other" /> path.</param>
            <summary>Extends the current path with the path elements from another path, using the specified extension mode.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.AddPath(SkiaSharp.SKPath,SkiaSharp.SKMatrix@,SkiaSharp.SKPath+AddMode)">
            <param name="other">The path containing the elements to be added to the current path.</param>
            <param name="matrix">Transformation applied to the <paramref name="other" /> path.</param>
            <param name="mode">Determines how the <paramref name="other" /> path contours are added to the path.   On Append mode, contours are added as new contours.   On Extend mode, the last contour of the path is extended with the first contour of the <paramref name="other" /> path.</param>
            <summary>Extends the current path with the path elements from another path, by applying the specified transformation matrix, using the specified extension mode.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.AddPath(SkiaSharp.SKPath,System.Single,System.Single,SkiaSharp.SKPath+AddMode)">
            <param name="other">The path containing the elements to be added to the current path.</param>
            <param name="dx">The amount to translate the path in X as it is added.</param>
            <param name="dy">The amount to translate the path in Y as it is added.</param>
            <param name="mode">Determines how the <paramref name="other" /> path contours are added to the path.   On Append mode, contours are added as new contours.   On Extend mode, the last contour of the path is extended with the first contour of the <paramref name="other" /> path.</param>
            <summary>Extends the current path with the path elements from another path offset by (<paramref name="dx" />, <paramref name="dy" />), using the specified extension mode.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.AddPathReverse(SkiaSharp.SKPath)">
            <param name="other">The path containing the elements to be added to the current path.</param>
            <summary>Extends the current path with the path elements from another path in reverse.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.AddRect(SkiaSharp.SKRect,SkiaSharp.SKPathDirection)">
            <param name="rect">The rectangle to add as a closed contour to the path</param>
            <param name="direction">The direction to wind the rectangle's contour.</param>
            <summary>Add a closed rectangle contour to the path.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.AddRect(SkiaSharp.SKRect,SkiaSharp.SKPathDirection,System.UInt32)">
            <param name="rect">The rectangle to add as a closed contour to the path</param>
            <param name="direction">The direction to wind the rectangle's contour.</param>
            <param name="startIndex">Initial point of the contour (initial moveTo), expressed as a corner index, starting in the upper-left position, clock-wise.  Must be 0-3.</param>
            <summary>Add a closed rectangle contour to the path.</summary>
            <remarks>Add a closed rectangle contour to the path with an initial point of the contour (startIndex) expressed as a corner index.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.AddRoundedRect(SkiaSharp.SKRect,System.Single,System.Single,SkiaSharp.SKPathDirection)">
            <param name="rect">To be added.</param>
            <param name="rx">To be added.</param>
            <param name="ry">To be added.</param>
            <param name="dir">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.ArcTo(System.Single,System.Single,System.Single,SkiaSharp.SKPathArcSize,SkiaSharp.SKPathDirection,System.Single,System.Single)">
            <param name="rx">To be added.</param>
            <param name="ry">To be added.</param>
            <param name="xAxisRotate">To be added.</param>
            <param name="largeArc">To be added.</param>
            <param name="sweep">To be added.</param>
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.Close">
            <summary>Closes the current contour.</summary>
            <remarks>
                <para>If the current point is not equal to the first point of the contour, a line segment is automatically added.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.ConicTo(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <param name="x0">The x-coordinate of the control point of the conic curve.</param>
            <param name="y0">The y-coordinate of the control point of the conic curve.</param>
            <param name="x1">The x-coordinate of the end point of the conic curve.</param>
            <param name="y1">The y-coordinate of the end point of the conic curve.</param>
            <param name="w">The weight of the conic curve.</param>
            <summary>Add a conic path from the last point.</summary>
            <remarks>
                <para> If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0,0).</para>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.CreateIterator(System.Boolean)">
            <param name="forceClose">
                <para>When this is true, each contour (as defined by a new starting move command) will be completed with a close verb regardless of the contour's contents.</para>
            </param>
            <summary>Creates an iterator object to scan the all of the segments (lines, quadratics, cubics) of each contours in a path.</summary>
            <returns>An object that can be used to iterate over the various elements of the path.</returns>
            <remarks>
                <para>This iterator is able to clean up the path as the values are returned.   If you do not desire to get verbs that have been cleaned up, use the <see cref="M:SkiaSharp.SKPath.CreateRawIterator" /> method instead.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.CreateRawIterator">
            <summary>Creates a raw iterator object to scan the all of the segments (lines, quadratics, cubics) of each contours in a path.</summary>
            <returns>An object that can be used to iterate over the various elements of the path.</returns>
            <remarks>Unlike the <see cref="M:SkiaSharp.SKPath.CreateIterator" /> method, this iterator does not clean up or normalize the values in the path.   It returns the raw elements contained in the path.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.CubicTo(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <param name="x0">The x-coordinate of the 1st control point on a cubic curve</param>
            <param name="y0">The y-coordinate of the 1st control point on a cubic curve</param>
            <param name="x1">The x-coordinate of the 2nd control point on a cubic curve</param>
            <param name="y1">The y-coordinate of the 2nd control point on a cubic curve</param>
            <param name="x2">The x-coordinate of the end point on a cubic curve</param>
            <param name="y2">The y-coordinate of the end point on a cubic curve</param>
            <summary>Add a cubic bezier from the last point</summary>
            <remarks>
                <para>Add a cubic bezier from the last point, approaching control points (x0,y0) and (x1,y1), and ending at (x2,y2). </para>
                <para>If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0,0).</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPath.FillType">
            <summary>The path's fill type.</summary>
            <value>
                <para>The current fill type.</para>
            </value>
            <remarks>
                <para>This is used to define how "inside" is computed. The default value is SKPathFillType.Winding.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.GetBounds(SkiaSharp.SKRect@)">
            <param name="rect">
                <para />
            </param>
            <summary>Returns the bounds of the path's points.</summary>
            <returns>
                <para>If the path contains zero points/verbs, this will return the "empty" rect [0, 0, 0, 0].</para>
            </returns>
            <remarks>
                <para>Note: this bounds may be larger than the actual shape, since curves do not extend as far as their control points. Additionally this bound encompases all points, even isolated moveTos either preceeding or following the last non-degenerate contour.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.LineTo(System.Single,System.Single)">
            <param name="x">The x-coordinate of the end of a line</param>
            <param name="y">The y-coordinate of the end of a line</param>
            <summary>Add a line from the last point to the specified point (x,y).</summary>
            <remarks>
                <para> If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0,0).</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.MoveTo(System.Single,System.Single)">
            <param name="x">The x-coordinate of the start of a new contour</param>
            <param name="y">The y-coordinate of the start of a new contour</param>
            <summary>Set the beginning of the next contour to the point.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.QuadTo(System.Single,System.Single,System.Single,System.Single)">
            <param name="x0">The x-coordinate of the control point on a quadratic curve</param>
            <param name="y0">The y-coordinate of the control point on a quadratic curve</param>
            <param name="x1">The x-coordinate of the end point on a quadratic curve</param>
            <param name="y1">The y-coordinate of the end point on a quadratic curve</param>
            <summary>Add a quadratic bezier from the last point.</summary>
            <remarks>
                <para>Add a quadratic bezier from the last point, approaching control point (x0,y0), and ending at (x1,y1). If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0,0).</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.RArcTo(System.Single,System.Single,System.Single,SkiaSharp.SKPathArcSize,SkiaSharp.SKPathDirection,System.Single,System.Single)">
            <param name="rx">To be added.</param>
            <param name="ry">To be added.</param>
            <param name="xAxisRotate">To be added.</param>
            <param name="largeArc">To be added.</param>
            <param name="sweep">To be added.</param>
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.RConicTo(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <param name="dx0">The amount to add to the x-coordinate of the last point on this contour, to specify the control point of the conic curve.</param>
            <param name="dy0">The amount to add to the y-coordinate of the last point on this contour, to specify the control point of the conic curve.</param>
            <param name="dx1">The amount to add to the x-coordinate of the last point on this contour, to specify the end point of the conic curve.</param>
            <param name="dy1">The amount to add to the y-coordinate of the last point on this contour, to specify the end point of the conic curve.</param>
            <param name="w">The weight of the conic curve.</param>
            <summary>
                <para>Same as <see cref="M:SkiaSharp.SKPath.ConicTo" /> but the coordinates are considered relative to the last point on this contour.</para>
            </summary>
            <remarks>
                <para> If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0,0).</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.RCubicTo(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <param name="dx0">The amount to add to the x-coordinate of the last point on this contour, to specify the 1st control point on a cubic curve.</param>
            <param name="dy0">The amount to add to the y-coordinate of the last point on this contour, to specify the 1st control point on a cubic curve.</param>
            <param name="dx1">The amount to add to the x-coordinate of the last point on this contour, to specify the 2nd control point on a cubic curve.</param>
            <param name="dy1">The amount to add to the y-coordinate of the last point on this contour, to specify the 2nd control point on a cubic curve.</param>
            <param name="dx2">The amount to add to the x-coordinate of the last point on this contour, to specify the end point on a cubic curve.</param>
            <param name="dy2">The amount to add to the y-coordinate of the last point on this contour, to specify the end point on a cubic curve.</param>
            <summary>Same as <see cref="M:SkiaSharp.SKPath.CubicTo" /> but the coordinates are considered relative to the last point on this contour.</summary>
            <remarks>
                <para> If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0,0).</para>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.Reset">
            <summary>Clear any lines and curves from the path, making it empty.</summary>
            <remarks>
                <para>This frees up internal storage associated with those segments.</para>
                <para />
                <para>On Android, does not change fSourcePath.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.Rewind">
            <summary>Clear any lines and curves from the path, making it empty.</summary>
            <remarks>
                <para>However, any internal storage for those lines/curves is retained, making reuse of the path potentially faster.</para>
                <para />
                <para>On Android, does not change fSourcePath.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.RLineTo(System.Single,System.Single)">
            <param name="dx">The amount to add to the x-coordinate of the last point on this contour, to specify the end of a line.</param>
            <param name="dy">The amount to add to the y-coordinate of the last point on this contour, to specify the end of a line.</param>
            <summary>Same as <see cref="M:SkiaSharp.SKPath.LineTo" /> but the coordinates are considered relative to the last point on this contour.</summary>
            <remarks> If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0,0).</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.RMoveTo(System.Single,System.Single)">
            <param name="dx">The amount to add to the x-coordinate of the last point on this contour, to specify the start of a new contour.</param>
            <param name="dy">The amount to add to the x-coordinate of the last point on this contour, to specify the start of a new contour.</param>
            <summary>Same as <see cref="M:SkiaSharp.SKPath.MoveTo" /> but the coordinates are considered relative to the last point on this contour.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.RQuadTo(System.Single,System.Single,System.Single,System.Single)">
            <param name="dx0">The amount to add to the x-coordinate of the last point on this contour, to specify the control point on a quadratic curve.</param>
            <param name="dy0">The amount to add to the y-coordinate of the last point on this contour, to specify the control point on a quadratic curve.</param>
            <param name="dx1">The amount to add to the x-coordinate of the last point on this contour, to specify end point on a quadratic curve.</param>
            <param name="dy1">The amount to add to the y-coordinate of the last point on this contour, to specify end point on a quadratic curve.</param>
            <summary>Same as <see cref="M:SkiaSharp.SKPath.QuadTo" /> but the coordinates are considered relative to the last point on this contour.</summary>
            <remarks> If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0,0).</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.Transform(SkiaSharp.SKMatrix)">
            <param name="matrix">To be added.</param>
            <summary>Applies a transformation matrix to the all the elements in the path.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKPath+AddMode">
            <summary>Controls how a path is added to another path.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKPath+AddMode.Append">
            <summary>Source path contours are added as new contours.</summary>
        </member>
        <member name="F:SkiaSharp.SKPath+AddMode.Extend">
            <summary>
                <para>Path is added by extending the last contour of the destination path with the first contour of the source path. If the last contour of the destination path is closed, then it will not be extended.</para>
                <para />
                <para>Instead, the start of source path will be extended by a straight line to the end point of the destination path.</para>
            </summary>
        </member>
        <member name="T:SkiaSharp.SKPath+Iterator">
            <summary>Iterator object to scan the all of the segments (lines, quadratics, cubics) of each contours in a path.   </summary>
            <remarks>Iterators are created by calling the <see cref="M:SkiaSharp.SKPath.CreateIterator" /> method.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+Iterator.ConicWeight">
            <summary>
                <para>Return the weight for the current conic. Only valid if the current segment return by <see cref="M:SkiaSharp.SKPath+Iterator.Next" /> was a conic.</para>
            </summary>
            <returns>
                <para />
            </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+Iterator.Dispose">
            <summary>Releases the iterator.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+Iterator.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+Iterator.IsCloseContour">
            <summary>Returns true if the current contour is closed (has a <see cref="E:SkiaSharp.SKPath+Verb.Close" />).</summary>
            <returns>
                <para />
            </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+Iterator.IsCloseLine">
            <summary>If the last call to <see cref="M:SkiaSharp.SKPath+Iterator.Next" /> returns a line, returns true if the line was the result of a <see cref="M:SkiaSharp.SKPath.Close()" /> command.</summary>
            <returns>If the last call to <see cref="M:SkiaSharp.SKPath+Iterator.Next" /> returns a line, returns true if the line was the result of a <see cref="M:SkiaSharp.SKPath.Close()" /> command.</returns>
            <remarks>If the call to Next returned a different value than Line, the result is undefined.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+Iterator.Next(SkiaSharp.SKPoint[],System.Boolean,System.Boolean)">
            <param name="points">Outgoing parameter, should be an array of four points, on return this contains points representing the current verb and/or segment.</param>
            <param name="doConsumeDegenerates">
                <para>If <see langword="true" />, first scan for segments that are deemed degenerate (too short) and skip those.</para>
            </param>
            <param name="exact">
                <para>if <paramref name="doConsumeDegenerates" /> is <see langword="true" /> and exact is true, skip only degenerate elements with lengths exactly equal to zero. If exact is <see langword="false" />, skip degenerate elements with lengths close to zero. If <paramref name="doConsumeDegenerates" /> is <see langword="false" />, exact has no effect.</para>
            </param>
            <summary>Return the next verb in this iteration of the path.</summary>
            <returns>The verb of the current segment.</returns>
            <remarks>
                <para>When all segments have been visited, returns Verb.Done</para>
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKPath+RawIterator">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+RawIterator.ConicWeight">
            <summary>Return the weight for the current conic. Only valid if the current segment return by <see cref="M:SkiaSharp.SKPath+Iterator.Next" /> was a conic.</summary>
            <returns>
                <para />
            </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+RawIterator.Dispose">
            <summary>Releases the iterator.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+RawIterator.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+RawIterator.Next(SkiaSharp.SKPoint[])">
            <param name="points">Outgoing parameter, should be an array of four points, on return this contains points representing the current verb and/or segment.</param>
            <summary>Return the next verb in this iteration of the path.</summary>
            <returns>The verb of the current segment.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+RawIterator.Peek">
            <summary>Return what the next verb will be, but do not visit the next segment.</summary>
            <returns>The verb for the next segment</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKPath+Verb">
            <summary>Verbs contained in an <see cref="T:SkiaSharp.SKPath" />.</summary>
            <remarks>In the description below, the number of points returned represents the number of valid entries on the return array of SKPoints that is passed to the Next method on the iterator.</remarks>
        </member>
        <member name="F:SkiaSharp.SKPath+Verb.Close">
            <summary>Close path, a call to the iterator’s Next() method will return one point (countour’s MoveTo point).</summary>
        </member>
        <member name="F:SkiaSharp.SKPath+Verb.Conic">
            <summary>Conic path, a call to the iterator’s Next() method will return three points, plus the ConicWeight point.</summary>
        </member>
        <member name="F:SkiaSharp.SKPath+Verb.Cubic">
            <summary>Cubic path, a call to the iterator’s Next() method will return four points</summary>
        </member>
        <member name="F:SkiaSharp.SKPath+Verb.Done">
            <summary>The path is completed, points will not contain any data.</summary>
        </member>
        <member name="F:SkiaSharp.SKPath+Verb.Line">
            <summary>Line path, a call to the iterator’s Next() method will return two points.</summary>
        </member>
        <member name="F:SkiaSharp.SKPath+Verb.Move">
            <summary>Move command, a call to the iterator’s Next() method will return a single point.</summary>
        </member>
        <member name="F:SkiaSharp.SKPath+Verb.Quad">
            <summary>Quad command, a call to the iterator’s Next() method will return three points.</summary>
        </member>
        <member name="T:SkiaSharp.SkPath1DPathEffectStyle">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SkPath1DPathEffectStyle.Morph">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SkPath1DPathEffectStyle.Rotate">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SkPath1DPathEffectStyle.Translate">
            <summary>To be added.</summary>
        </member>
        <member name="T:SkiaSharp.SKPathArcSize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKPathArcSize.Large">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathArcSize.Small">
            <summary>To be added.</summary>
        </member>
        <member name="T:SkiaSharp.SKPathDirection">
            <summary>Direction for path contours.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKPathDirection.Clockwise">
            <summary>clockwise direction for adding closed contours.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathDirection.CounterClockwise">
            <summary>counter-clockwise direction for adding closed contours.</summary>
        </member>
        <member name="T:SkiaSharp.SKPathEffect">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPathEffect.Create1DPath(SkiaSharp.SKPath,System.Single,System.Single,SkiaSharp.SkPath1DPathEffectStyle)">
            <param name="path">To be added.</param>
            <param name="advance">To be added.</param>
            <param name="phase">To be added.</param>
            <param name="style">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPathEffect.Create2DLine(System.Single,SkiaSharp.SKMatrix)">
            <param name="width">To be added.</param>
            <param name="matrix">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPathEffect.Create2DPath(SkiaSharp.SKMatrix,SkiaSharp.SKPath)">
            <param name="matrix">To be added.</param>
            <param name="path">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPathEffect.CreateCompose(SkiaSharp.SKPathEffect,SkiaSharp.SKPathEffect)">
            <param name="outer">To be added.</param>
            <param name="inner">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPathEffect.CreateCorner(System.Single)">
            <param name="radius">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPathEffect.CreateDash(System.Single[],System.Single)">
            <param name="intervals">To be added.</param>
            <param name="phase">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPathEffect.CreateDiscrete(System.Single,System.Single,System.UInt32)">
            <param name="segLength">To be added.</param>
            <param name="deviation">To be added.</param>
            <param name="seedAssist">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPathEffect.CreateSum(SkiaSharp.SKPathEffect,SkiaSharp.SKPathEffect)">
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPathEffect.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKPathFillType">
            <summary>Possible path fill type values.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKPathFillType.EvenOdd">
            <summary>Specifies that "inside" is computed by an odd number of edge crossings.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathFillType.InverseEvenOdd">
            <summary>Same as EvenOdd, but draws outside of the path, rather than inside.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathFillType.InverseWinding">
            <summary>Same as Winding, but draws outside of the path, rather than inside.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathFillType.Winding">
            <summary>Specifies that "inside" is computed by a non-zero sum of signed edge crossings.</summary>
        </member>
        <member name="T:SkiaSharp.SKPicture">
            <summary>Records drawing commands made to a canvas to be played back at a later time.</summary>
            <remarks>
                <para>Drawing commands made to a canvas to be played back at a later time. This base class handles serialization and a few other miscellany.</para>
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPicture.Bounds">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPicture.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPicture.UniqueId">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKPictureRecorder">
            <summary />
            <remarks>To be added.</remarks>
        </member>
        <member name="C:SkiaSharp.SKPictureRecorder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:SkiaSharp.SKPictureRecorder(System.IntPtr)">
            <param name="handle">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:SkiaSharp.SKPictureRecorder(System.IntPtr,System.Boolean)">
            <param name="handle">To be added.</param>
            <param name="owns">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPictureRecorder.BeginRecording(SkiaSharp.SKRect)">
            <param name="rect">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPictureRecorder.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPictureRecorder.EndRecording">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKPixelGeometry">
            <summary>Describes how LCD strips are organized for each pixel.</summary>
            <remarks>
                <para>Description of how the LCD strips are arranged for each pixel. If this is unknown, or the pixels are meant to be "portable" and/or transformed before showing (e.g. rotated, scaled) then use Unknown.</para>
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKPixelGeometry.BgrHorizontal">
            <summary>Pixels are made up horizontal blue, green and red lights.</summary>
        </member>
        <member name="F:SkiaSharp.SKPixelGeometry.BgrVertical">
            <summary>Pixels are made up vertical blue, green and red lights.</summary>
        </member>
        <member name="F:SkiaSharp.SKPixelGeometry.RgbHorizontal">
            <summary>Pixels are made up horizontal red, green and blue lights.</summary>
        </member>
        <member name="F:SkiaSharp.SKPixelGeometry.RgbVertical">
            <summary>Pixels are made up vertical red, green and blue lights.</summary>
        </member>
        <member name="F:SkiaSharp.SKPixelGeometry.Unknown">
            <summary>Use if the order is not known or the pixels are meant to be "portable" and/or transformed before showing (e.g. rotated, scaled).</summary>
        </member>
        <member name="T:SkiaSharp.SKPoint">
            <summary>Represents an ordered pair of floating-point x- and y-coordinates that defines a point in a two-dimensional plane.</summary>
            <remarks>
                <para>To convert a <see cref="T:SkiaSharp.SKPoint" />  to a <see cref="T:SkiaSharp.SKPointI" />, use <see cref="M:SkiaSharp.PointI.Round(SkiaSharp.Point)" /> or <see cref="M:SkiaSharp.PointI.Truncate(SkiaSharp.Point)" />.</para>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKPoint(System.Single,System.Single)">
            <param name="x">The horizontal position of the point.</param>
            <param name="y">The horizontal position of the point.</param>
            <summary>Initializes a new instance of the <see cref="T:System.Drawing.PointF" /> class with the specified coordinates.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.Add(SkiaSharp.SKPoint,SkiaSharp.SKSize)">
            <param name="pt">The point to translate.</param>
            <param name="sz">The size that specified the number to add to the coordinates of <see langword="pt" />.</param>
            <summary>Translates a given <see cref="T:SkiaSharp.SKPoint" /> by the specified <see cref="T:SkiaSharp.SKSize" />.</summary>
            <returns>The translated <see cref="T:SkiaSharp.SKPoint" /></returns>
            <remarks>This method adds the <see cref="P:SkiaSharp.SizeI.Width" /> of the specified size to the x-coordinate of the <see cref="T:SkiaSharp.Point" /> and the <see cref="P:SkiaSharp.SizeU.Height" /> to the y-coordinate of the <see cref="T:SkiaSharp.Point" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.Add(SkiaSharp.SKPoint,SkiaSharp.SKSizeI)">
            <param name="pt">The point to translate</param>
            <param name="sz">The size that specifies the numer to add to the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a given point by a specified size.</summary>
            <returns>The translated Point.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKPoint.Empty">
            <summary>Represents a new instance of the <see cref="T:SkiaSharp.Point" /> class with member data left uninitialized.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.Equals(System.Object)">
            <param name="obj">The <see cref="T:System.Object" /> to test.</param>
            <summary>Specifies whether this <see cref="T:SkiaSharp.Point" /> contains the same coordinates as the specified <see cref="T:System.Object" />.</summary>
            <returns>This method returns true if <paramref name="obj" /> is a <see cref="T:SkiaSharp.Point" /> and has the same coordinates as this <see cref="T:SkiaSharp.SKPoint" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.GetHashCode">
            <summary>Returns the hashcode for this SKPoint.</summary>
            <returns>To be added.</returns>
            <remarks>You should avoid depending on GetHashCode for unique values, as two <see cref="T:System.Drawing.Point" /> objects with the same values for their X and Y properties may return the same hash code. This behavior could change in a future release.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPoint.IsEmpty">
            <summary>Gets a value indicating whether this <see cref="T:SkiaSharp.SKPoint" /> is empty.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.op_Addition(SkiaSharp.SKPoint,SkiaSharp.SKSize)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPoint" /> to translate.</param>
            <param name="sz">A <see cref="T:SkiaSharp.SKSize" /> that specifies the pair of numbers to add to the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a <see cref="T:SkiaSharp.SKPoint" /> by a given <see cref="T:SkiaSharp.SKSize" />.</summary>
            <returns>Returns the translated <see cref="T:SkiaSharp.SKPoint" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.op_Addition(SkiaSharp.SKPoint,SkiaSharp.SKSizeI)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPoint" /> to translate.</param>
            <param name="sz">A <see cref="T:SkiaSharp.SKSizeI" /> that specifies the pair of numbers to add to the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a <see cref="T:SkiaSharp.SKPoint" /> by a given <see cref="T:SkiaSharp.SKSizeI" />.</summary>
            <returns>Returns the translated <see cref="T:SkiaSharp.SKPoint" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.op_Equality(SkiaSharp.SKPoint,SkiaSharp.SKPoint)">
            <param name="left">A <see cref="T:SkiaSharp.SKPoint" /> to compare.</param>
            <param name="right">A <see cref="T:SkiaSharp.SKPoint" /> to compare.</param>
            <summary>Compares two <see cref="T:SkiaSharp.SKPoint" /> structures. The result specifies whether the values of the <see cref="P:SkiaSharp.Point.X" /> and <see cref="P:SkiaSharp.Point.Y" /> properties of the two <see cref="T:SkiaSharp.SKPoint" /> structures are equal.</summary>
            <returns>true if the <see cref="P:SkiaSharp.SKPoint.X" /> and <see cref="P:SkiaSharp.SKPoint.Y" /> values of the left and right <see cref="T:SkiaSharp.SKPoint" /> structures are equal; otherwise, false.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.op_Inequality(SkiaSharp.SKPoint,SkiaSharp.SKPoint)">
            <param name="left">A <see cref="T:SkiaSharp.SKPoint" /> to compare.</param>
            <param name="right">A <see cref="T:SkiaSharp.SKPoint" /> to compare.</param>
            <summary>Determines whether the coordinates of the specified points are not equal.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.op_Subtraction(SkiaSharp.SKPoint,SkiaSharp.SKSize)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPoint" /> to translate.</param>
            <param name="sz">The <see cref="T:SkiaSharp.SKSize" /> that specifies the numbers to subtract from the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a <see cref="T:SkiaSharp.SKPoint" /> by the negative of a given <see cref="T:SkiaSharp.SKSize" />.</summary>
            <returns>The translated <see cref="T:SkiaSharp.SKPoint" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.op_Subtraction(SkiaSharp.SKPoint,SkiaSharp.SKSizeI)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPoint" /> to translate.</param>
            <param name="sz">The <see cref="T:SkiaSharp.SKSizeI" /> that specifies the numbers to subtract from the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a <see cref="T:SkiaSharp.SKPoint" /> by the negative of a given <see cref="T:SkiaSharp.SKSizeI" /> added.</summary>
            <returns>The translated <see cref="T:SkiaSharp.SKPoint" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.Subtract(SkiaSharp.SKPoint,SkiaSharp.SKSize)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPoint" /> to translate.</param>
            <param name="sz">The <see cref="T:SkiaSharp.SKSize" /> that specifies the numbers to subtract from the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a <see cref="T:SkiaSharp.SKPoint" /> by the negative of a specified size.</summary>
            <returns>The translated <see cref="T:SkiaSharp.SKPoint" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.Subtract(SkiaSharp.SKPoint,SkiaSharp.SKSizeI)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPoint" /> to translate.</param>
            <param name="sz">The <see cref="T:SkiaSharp.SKSize" /> that specifies the numbers to subtract from the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a <see cref="T:SkiaSharp.SKPoint" /> by the negative of a specified size.</summary>
            <returns>The translated <see cref="T:SkiaSharp.SKPoint" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.ToString">
            <summary>Converts this <see cref="T:SkiaSharp.SKPoint" /> to a human readable string.</summary>
            <returns>A string that represents this <see cref="T:SkiaSharp.SKPoint" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPoint.X">
            <summary>Gets or sets the x-coordinate of this <see cref="T:SkiaSharp.SKPoint" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPoint.Y">
            <summary>Gets or sets the x-coordinate of this <see cref="T:SkiaSharp.SKPoint" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKPoint3">
            <summary>Represents an ordered pair of floating-point x-, y- and z-coordinates that defines a point in a three-dimensional plane.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:SkiaSharp.SKPoint3(System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="z">To be added.</param>
            <summary>Initializes a point from three floating point values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKPoint3.Empty">
            <summary>Represents a new instance of the <see cref="T:SkiaSharp.SKPoint3" /> class with member data left uninitialized.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint3.Equals(System.Object)">
            <param name="obj">The <see cref="T:System.Object" /> to test.</param>
            <summary>Specifies whether this <see cref="T:SkiaSharp.SKPoint3" /> contains the same coordinates as the specified <see cref="T:System.Object" />.</summary>
            <returns>This method returns true if <paramref name="obj" /> is a <see cref="T:SkiaSharp.SKPoint3" /> and has the same coordinates as this <see cref="T:SkiaSharp.SKPoint3" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint3.GetHashCode">
            <summary>Returns the hashcode for this SKPoint3.</summary>
            <returns>To be added.</returns>
            <remarks>You should avoid depending on GetHashCode for unique values, as two <see cref="T:System.Drawing.Point" /> objects with the same values for their X, Y and Z properties may return the same hash code. This behavior could change in a future release.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPoint3.IsEmpty">
            <summary>Gets a value indicating whether this <see cref="T:SkiaSharp.SKPoint3" /> is empty.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint3.op_Equality(SkiaSharp.SKPoint3,SkiaSharp.SKPoint3)">
            <param name="left">A <see cref="T:SkiaSharp.SKPoint3" /> to compare.</param>
            <param name="right">A <see cref="T:SkiaSharp.SKPoint3" /> to compare.</param>
            <summary>Compares two <see cref="T:SkiaSharp.SKPoint3" /> structures. The result specifies whether the values of the <see cref="P:SkiaSharp.Point3.X" /> and <see cref="P:SkiaSharp.Point3.Y" /> properties of the two <see cref="T:SkiaSharp.SKPoint3" /> structures are equal.</summary>
            <returns>true if the <see cref="P:SkiaSharp.SKPoint3.X" />, <see cref="P:SkiaSharp.SKPoint3.Y" /> and <see cref="P:SkiaSharp.SKPoint3.Z" /> values of the left and right <see cref="T:SkiaSharp.SKPoint" /> structures are equal; otherwise, false.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint3.op_Inequality(SkiaSharp.SKPoint3,SkiaSharp.SKPoint3)">
            <param name="left">A <see cref="T:SkiaSharp.SKPoint3" /> to compare.</param>
            <param name="right">A <see cref="T:SkiaSharp.SKPoint3" /> to compare.</param>
            <summary>Determines whether the coordinates of the specified points are not equal.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint3.ToString">
            <summary>Converts this <see cref="T:SkiaSharp.SKPoint3" /> to a human readable string.</summary>
            <returns>A string that represents this <see cref="T:SkiaSharp.SKPoint3" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPoint3.X">
            <summary>Gets or sets the x-coordinate of this <see cref="T:SkiaSharp.SKPoint3" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPoint3.Y">
            <summary>Gets or sets the y-coordinate of this <see cref="T:SkiaSharp.SKPoint3" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPoint3.Z">
            <summary>Gets or sets the z-coordinate of this <see cref="T:SkiaSharp.SKPoint3" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKPointI">
            <summary>Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:SkiaSharp.SKPointI(SkiaSharp.SKSizeI)">
            <param name="sz">A <see cref="T:SkiaSharp.SKSizeI" /> that specifies the coordinates for the new <see cref="T:SkiaSharp.SKPointI" />.</param>
            <summary>Initializes a new instance of the <see cref="T:SkiaSharp.SKPointI" /> class from a <see cref="T:SkiaSharp.SKSizeI" />.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:SkiaSharp.SKPointI(System.Int32,System.Int32)">
            <param name="x">The horizontal position of the point.</param>
            <param name="y">The vertical position of the point.</param>
            <summary>Initializes a point from two floating point values.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.Add(SkiaSharp.SKPointI,SkiaSharp.SKSizeI)">
            <param name="pt">The point to translate.</param>
            <param name="sz">The size that specifies the numer to add to the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a given <see cref="T:SkiaSharp.SKPointI" /> by the specified <see cref="T:SkiaSharp.SKSizeI" />.</summary>
            <returns>The translated Point.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.Ceiling(SkiaSharp.SKPoint)">
            <param name="value">The <see cref="T:SkiaSharp.SKPoint" /> to convert.</param>
            <summary>Converts the specified <see cref="T:SkiaSharp.SKPoint" /> to a <see cref="T:SkiaSharp.SKPointI" /> by rounding the values of the <see cref="T:SkiaSharp.SKPoint" /> to the next higher integer values.</summary>
            <returns>The <see cref="T:SkiaSharp.SKPointI" /> this method converts to.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKPointI.Empty">
            <summary>Represents a new instance of the <see cref="T:SkiaSharp.SKPointI" /> class with member data left uninitialized.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.Equals(System.Object)">
            <param name="obj">The <see cref="T:System.Object" /> to test.</param>
            <summary>Specifies whether this <see cref="T:SkiaSharp.SKPointI" /> contains the same coordinates as the specified <see cref="T:System.Object" />.</summary>
            <returns>This method returns true if <paramref name="obj" /> is a <see cref="T:SkiaSharp.SKPointI" /> and has the same coordinates as this <see cref="T:SkiaSharp.SKPointI" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.GetHashCode">
            <summary>Returns the hashcode for this SKPointI.</summary>
            <returns>To be added.</returns>
            <remarks>You should avoid depending on GetHashCode for unique values, as two <see cref="T:System.Drawing.Point" /> objects with the same values for their X and Y properties may return the same hash code. This behavior could change in a future release.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPointI.IsEmpty">
            <summary>Gets a value indicating whether this <see cref="T:SkiaSharp.SKPointI" /> is empty.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.Offset(SkiaSharp.SKPointI)">
            <param name="p">The <see cref="T:SkiaSharp.SKPointI" /> used to offset this <see cref="T:SkiaSharp.SKPointI" />.</param>
            <summary>Translates this <see cref="T:SkiaSharp.SKPointI" /> by the specified <see cref="T:SkiaSharp.SKPointI" />.</summary>
            <remarks>This method adjusts the <see cref="P:SkiaSharp.PointI.X" /> and <see cref="P:SkiaSharp.PointI.Y" /> values of this <see cref="T:System.Drawing.Point" /> to the sum of the <see cref="P:SkiaSharp.PointI.X" /> and <see cref="P:SkiaSharp.PointI.Y" /> values of this <see cref="T:SkiaSharp.SKPointI" /> and <paramref name="p" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.Offset(System.Int32,System.Int32)">
            <param name="dx">The amount to offset the x-coordinate.</param>
            <param name="dy">The amount to offset the y-coordinate.</param>
            <summary>Translates this <see cref="T:SkiaSharp.SKPointI" /> by the specified amount.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.op_Addition(SkiaSharp.SKPointI,SkiaSharp.SKSizeI)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPointI" /> to translate.</param>
            <param name="sz">A <see cref="T:SkiaSharp.SKSizeI" /> that specifies the pair of numbers to add to the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a <see cref="T:SkiaSharp.SKPointI" /> by a given <see cref="T:SkiaSharp.SKSizeI" />.</summary>
            <returns>Returns the translated <see cref="T:SkiaSharp.SKPointI" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.op_Equality(SkiaSharp.SKPointI,SkiaSharp.SKPointI)">
            <param name="left">A <see cref="T:SkiaSharp.SKPointI" /> to compare.</param>
            <param name="right">A <see cref="T:SkiaSharp.SKPointI" /> to compare.</param>
            <summary>Determines whether the coordinates of the specified points are equal.</summary>
            <returns>true if the <see cref="P:SkiaSharp.SKPointI.X" /> and <see cref="P:SkiaSharp.SKPointI.Y" /> values of the left and right <see cref="T:SkiaSharp.SKPoint" /> structures are equal; otherwise, false.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.op_Explicit(SkiaSharp.SKPointI)~SkiaSharp.SKSizeI">
            <param name="p">To be added.</param>
            <summary>Converts an <see cref="T:SkiaSharp.SKPointI" /> into an <see cref="T:SkiaSharp.SKSizeI" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.op_Implicit(SkiaSharp.SKPointI)~SkiaSharp.SKPoint">
            <param name="p">To be added.</param>
            <summary>Converts an <see cref="T:SkiaSharp.SKPointI" /> into an <see cref="T:SkiaSharp.SKPoint" />.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.op_Inequality(SkiaSharp.SKPointI,SkiaSharp.SKPointI)">
            <param name="left">A <see cref="T:SkiaSharp.SKPointI" /> to compare.</param>
            <param name="right">A <see cref="T:SkiaSharp.SKPointI" /> to compare.</param>
            <summary>Determines whether the coordinates of the specified points are not equal.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.op_Subtraction(SkiaSharp.SKPointI,SkiaSharp.SKSizeI)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPointI" /> to translate.</param>
            <param name="sz">
                <para>The <see cref="T:SkiaSharp.SKSizeI" /> that specifies the numbers to subtract from the coordinates of <paramref name="pt" />.</para>
                <para />
            </param>
            <summary>Translates a <see cref="T:SkiaSharp.SKPointI" /> by the negative of a given <see cref="T:SkiaSharp.SKSizeI" /> added.</summary>
            <returns>The translated <see cref="T:SkiaSharp.SKPointI" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.Round(SkiaSharp.SKPoint)">
            <param name="value">The <see cref="T:SkiaSharp.SKPoint" /> to convert.</param>
            <summary>Converts the specified <see cref="T:SkiaSharp.SKPoint" /> to a <see cref="T:SkiaSharp.SKPointI" /> object by rounding the <see cref="T:SkiaSharp.SKPoint" /> values to the nearest integer.</summary>
            <returns>The <see cref="T:SkiaSharp.SKPointI" /> this method converts to.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.Subtract(SkiaSharp.SKPointI,SkiaSharp.SKSizeI)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPointI" /> to be subtracted from.</param>
            <param name="sz">The <see cref="T:SkiaSharp.SKSizeI" /> to subtract from the <see cref="T:SkiaSharp.SKPointI" />.</param>
            <summary>Returns the result of subtracting specified <see cref="T:SkiaSharp.SKSizeI" /> from the specified <see cref="T:SkiaSharp.SKPointI" />.</summary>
            <returns>The <see cref="T:SkiaSharp.SKPointI" /> that is the result of the subtraction operation.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.ToString">
            <summary>Converts this <see cref="T:SkiaSharp.SKPointI" /> to a human readable string.</summary>
            <returns>A string that represents this <see cref="T:SkiaSharp.SKPointI" />.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.Truncate(SkiaSharp.SKPoint)">
            <param name="value">The <see cref="T:SkiaSharp.SKPoint" /> to convert.</param>
            <summary>Converts the specified <see cref="T:SkiaSharp.SKPoint" /> to a <see cref="T:SkiaSharp.SKPointI" /> by truncating the values of the <see cref="T:SkiaSharp.SKPoint" />.</summary>
            <returns>The <see cref="T:SkiaSharp.SKPoint" /> this method converts to.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPointI.X">
            <summary>Gets or sets the x-coordinate of this <see cref="T:SkiaSharp.SKPointI" />.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPointI.Y">
            <summary>Gets or sets the y-coordinate of this <see cref="T:SkiaSharp.SKPointI" /></summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKPointMode">
            <summary>Possible values to interpret the incoming array of points for the <see cref="M:SkiaSharp.SKCanvas.DrawPoints" /> method.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKPointMode.Lines">
            <summary>Interpret the data as coordinates for lines.</summary>
        </member>
        <member name="F:SkiaSharp.SKPointMode.Points">
            <summary>Interpret the data as coordinates for points.</summary>
        </member>
        <member name="F:SkiaSharp.SKPointMode.Polygon">
            <summary>Interpret the data as coordinates for polygons.</summary>
        </member>
        <member name="T:SkiaSharp.SKRect">
            <summary>Floating point rectangle</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKRect(System.Single,System.Single,System.Single,System.Single)">
            <param name="left">To be added.</param>
            <param name="top">To be added.</param>
            <param name="right">To be added.</param>
            <param name="bottom">To be added.</param>
            <summary>Initializes a new instance from left, top, right and bottom coordinates.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKRect.Bottom">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.Create(System.Single,System.Single)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>Creates a new rectangle with the specified width and height.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.Create(System.Single,System.Single,System.Single,System.Single)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>Creates a new rectangle with the specified initial point (x,y) with the given width and height.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKRect.Left">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKRect.Right">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKRect.Top">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKRectI">
            <summary>Integer rectangle</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:SkiaSharp.SKRectI(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="left">To be added.</param>
            <param name="top">To be added.</param>
            <param name="right">To be added.</param>
            <param name="bottom">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKRectI.Bottom">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Create(System.Int32,System.Int32)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Create(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="x">To be added.</param>
            <param name="y">To be added.</param>
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKRectI.Left">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKRectI.Right">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKRectI.Top">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKRegionOperation">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKRegionOperation.Difference">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKRegionOperation.Intersect">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKRegionOperation.Replace">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKRegionOperation.ReverseDifference">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKRegionOperation.Union">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKRegionOperation.XOR">
            <summary>To be added.</summary>
        </member>
        <member name="T:SkiaSharp.SKShader">
            <summary>Shaders specify the source color(s) for what is being drawn in the <see cref="T:SkiaSharp.SKPaint" />.</summary>
            <remarks>
                <para>Shaders specify the source color(s) for what is being drawn. If a paint has no shader, then the paint's color is used. If the paint has a shader, then the shader's color(s) are use instead, but they are modulated by the paint's alpha. </para>
                <para />
                <para>This makes it easy to create a shader once (e.g. bitmap tiling or gradient) and then change its transparency w/o having to modify the original shader, only the paint's alpha needs to be modified.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateBitmap(SkiaSharp.SKBitmap,SkiaSharp.SKShaderTileMode,SkiaSharp.SKShaderTileMode)">
            <param name="src">To be added.</param>
            <param name="tmx">To be added.</param>
            <param name="tmy">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateBitmap(SkiaSharp.SKBitmap,SkiaSharp.SKShaderTileMode,SkiaSharp.SKShaderTileMode,SkiaSharp.SKMatrix)">
            <param name="src">To be added.</param>
            <param name="tmx">To be added.</param>
            <param name="tmy">To be added.</param>
            <param name="localMatrix">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateColor(SkiaSharp.SKColor)">
            <param name="color">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateColorFilter(SkiaSharp.SKShader,SkiaSharp.SKColorFilter)">
            <param name="shader">To be added.</param>
            <param name="filter">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateCompose(SkiaSharp.SKShader,SkiaSharp.SKShader)">
            <param name="shaderA">To be added.</param>
            <param name="shaderB">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateCompose(SkiaSharp.SKShader,SkiaSharp.SKShader,SkiaSharp.SKXferMode)">
            <param name="shaderA">To be added.</param>
            <param name="shaderB">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateEmpty">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateLinearGradient(SkiaSharp.SKPoint,SkiaSharp.SKPoint,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode)">
            <param name="start">To be added.</param>
            <param name="end">To be added.</param>
            <param name="colors">To be added.</param>
            <param name="colorPos">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateLinearGradient(SkiaSharp.SKPoint,SkiaSharp.SKPoint,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode,SkiaSharp.SKMatrix)">
            <param name="start">To be added.</param>
            <param name="end">To be added.</param>
            <param name="colors">To be added.</param>
            <param name="colorPos">To be added.</param>
            <param name="mode">To be added.</param>
            <param name="localMatrix">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateLocalMatrix(SkiaSharp.SKShader,SkiaSharp.SKMatrix)">
            <param name="shader">To be added.</param>
            <param name="localMatrix">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreatePerlinNoiseFractalNoise(System.Single,System.Single,System.Int32,System.Single)">
            <param name="baseFrequencyX">To be added.</param>
            <param name="baseFrequencyY">To be added.</param>
            <param name="numOctaves">To be added.</param>
            <param name="seed">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreatePerlinNoiseFractalNoise(System.Single,System.Single,System.Int32,System.Single,SkiaSharp.SKPointI)">
            <param name="baseFrequencyX">To be added.</param>
            <param name="baseFrequencyY">To be added.</param>
            <param name="numOctaves">To be added.</param>
            <param name="seed">To be added.</param>
            <param name="tileSize">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreatePerlinNoiseTurbulence(System.Single,System.Single,System.Int32,System.Single)">
            <param name="baseFrequencyX">To be added.</param>
            <param name="baseFrequencyY">To be added.</param>
            <param name="numOctaves">To be added.</param>
            <param name="seed">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreatePerlinNoiseTurbulence(System.Single,System.Single,System.Int32,System.Single,SkiaSharp.SKPointI)">
            <param name="baseFrequencyX">To be added.</param>
            <param name="baseFrequencyY">To be added.</param>
            <param name="numOctaves">To be added.</param>
            <param name="seed">To be added.</param>
            <param name="tileSize">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateRadialGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode)">
            <param name="center">To be added.</param>
            <param name="radius">To be added.</param>
            <param name="colors">To be added.</param>
            <param name="colorPos">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateRadialGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode,SkiaSharp.SKMatrix)">
            <param name="center">To be added.</param>
            <param name="radius">To be added.</param>
            <param name="colors">To be added.</param>
            <param name="colorPos">To be added.</param>
            <param name="mode">To be added.</param>
            <param name="localMatrix">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateSweepGradient(SkiaSharp.SKPoint,SkiaSharp.SKColor[],System.Single[])">
            <param name="center">To be added.</param>
            <param name="colors">To be added.</param>
            <param name="colorPos">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateSweepGradient(SkiaSharp.SKPoint,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKMatrix)">
            <param name="center">To be added.</param>
            <param name="colors">To be added.</param>
            <param name="colorPos">To be added.</param>
            <param name="localMatrix">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateTwoPointConicalGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode)">
            <param name="start">To be added.</param>
            <param name="startRadius">To be added.</param>
            <param name="end">To be added.</param>
            <param name="endRadius">To be added.</param>
            <param name="colors">To be added.</param>
            <param name="colorPos">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateTwoPointConicalGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode,SkiaSharp.SKMatrix)">
            <param name="start">To be added.</param>
            <param name="startRadius">To be added.</param>
            <param name="end">To be added.</param>
            <param name="endRadius">To be added.</param>
            <param name="colors">To be added.</param>
            <param name="colorPos">To be added.</param>
            <param name="mode">To be added.</param>
            <param name="localMatrix">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKShaderTileMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKShaderTileMode.Clamp">
            <summary>
                <para>Replicate the edge color if the shader draws outside of its original bounds</para>
            </summary>
        </member>
        <member name="F:SkiaSharp.SKShaderTileMode.Mirror">
            <summary>Repeat the shader's image horizontally and vertically, alternating mirror images so that adjacent images always seam</summary>
        </member>
        <member name="F:SkiaSharp.SKShaderTileMode.Repeat">
            <summary>Repeat the shader's image horizontally and vertically</summary>
        </member>
        <member name="T:SkiaSharp.SKSize">
            <summary>Stores an ordered pair of floating-point numbers describing the width and height of a rectangle.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKSize(System.Single,System.Single)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>Initializes a new SKSize with a given width and height.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKSize.Height">
            <summary>The height</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKSize.Width">
            <summary>The width</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKSizeI">
            <summary>Stores an ordered pair of integers describing the width and height of a rectangle.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKSizeI(System.Int32,System.Int32)">
            <param name="width">To be added.</param>
            <param name="height">To be added.</param>
            <summary>Initializes a new SKSize with a given width and height.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKSizeI.Height">
            <summary>The height</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKSizeI.Width">
            <summary>The width</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKStream">
            <summary>Skia’s Stream class.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKStream.HasLength">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKStream.HasPosition">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKStream.IsAtEnd">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKStream.Length">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.Move(System.Int64)">
            <param name="offset">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKStream.Position">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.Read(System.Byte[],System.Int32)">
            <param name="buffer">To be added.</param>
            <param name="size">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.ReadByte">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.ReadInt16">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.ReadInt32">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.ReadSByte">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.ReadUInt16">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.ReadUInt32">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.Rewind">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.Seek(System.Int32)">
            <param name="position">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.Skip(System.Int32)">
            <param name="size">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKStreamAsset">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKStreamMemory">
            <summary>An in-memory SKStream.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKStreamRewindable">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKStreamSeekable">
            <summary>An SKStream that supports the seek operation</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKStrokeCap">
            <summary>Cap enum specifies the settings for the paint's strokecap. </summary>
            <remarks>
                <para>This is the treatment that is applied to the beginning and end of each non-closed contour (e.g. lines).</para>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKStrokeCap.Butt">
            <summary>begin/end contours with no extension</summary>
        </member>
        <member name="F:SkiaSharp.SKStrokeCap.Round">
            <summary>begin/end contours with a semi-circle extension</summary>
        </member>
        <member name="F:SkiaSharp.SKStrokeCap.Square">
            <summary>begin/end contours with a half square extension</summary>
        </member>
        <member name="T:SkiaSharp.SKStrokeJoin">
            <summary>Join style for stroking operations.</summary>
            <remarks>
                <para>This is the treatment that is applied to corners in paths and rectangles.</para>
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKStrokeJoin.Bevel">
            <summary>Connect path segments with a flat bevel join</summary>
        </member>
        <member name="F:SkiaSharp.SKStrokeJoin.Mitter">
            <summary>Connect path segments with a sharp join</summary>
        </member>
        <member name="F:SkiaSharp.SKStrokeJoin.Round">
            <summary>Connect path segments with a round join</summary>
        </member>
        <member name="T:SkiaSharp.SKSurface">
            <summary>Represents the backend/results of drawing to a canvas</summary>
            <remarks>
                <para>SkSurface represents the backend/results of drawing to a canvas. For raster drawing, the surface will be pixels, but (for example) when drawing into a PDF or Picture canvas, the surface stores the recorded commands.</para>
                <para />
                <para>SkSurface always has non-zero dimensions. If there is a request for a new surface, and either of the requested dimensions are zero, then <see langword="null" /> will be returned.</para>
                <para />
                <para>Once you create a surface with one of its <see cref="M:SkiaSharp.SKSurface.Create" /> methods, you can draw into the canvas returned by the <see cref="M:SkiaSharp.SKSurface.Canvas" /> property.   Once the drawing is complete, you can retrieve an <see cref="T:SkiaSharp.SKImage" /> by calling the <see cref="M:SkiaSharp.SKSurface.Snapshot" /> method.</para>
                <para />
                <example>
                    <code lang="C#"><![CDATA[using (var surface = SKSurface.Create (width: 640, height: 480, SKColorType.N_32, SKAlphaType.Premul)) {
    SKCanvas myCanvas = surface.Canvas;

    // Your drawing code goes here.
}
]]></code>
                </example>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKSurface.Canvas">
            <summary>Returns the canvas for this surface which can be used for drawing into it.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(SkiaSharp.SKImageInfo)">
            <param name="info">Contains the image configuration parameters.</param>
            <summary>Creates a new SKSurface with the specified image parameters.</summary>
            <returns>If the requested surface can not be created, or the configuration is not supported, this returns <see langword="null" />.   Otherwise the return is an instance of SKSuface.</returns>
            <remarks>This will create a buffer with the parameters specified in <paramref name="info" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(SkiaSharp.SKImageInfo,SkiaSharp.SKSurfaceProps)">
            <param name="info">Contains the image configuration parameters.</param>
            <param name="props">Contains the surface property configuration.</param>
            <summary>Creates a new SKSurface from the specified image parameters and surface properties.</summary>
            <returns>If the requested surface can not be created, or the configuration is not supported, this returns <see langword="null" />.   Otherwise the return is an instance of SKSuface.</returns>
            <remarks>This will create a buffer with the parameters specified in <paramref name="info&amp;nbsp;" />and the properties specified in <paramref name="props" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32)">
            <param name="info">Contains the image configuration parameters.</param>
            <param name="pixels">Pointer to an in memory-buffer that can hold the image as specified.</param>
            <param name="rowBytes">The number of bytes per row in the pixel buffer.</param>
            <summary>Creates a new SKSurface with the specified image parameters using a provided buffer.</summary>
            <returns>If the requested surface can not be created, or the configuration is not supported, this returns <see langword="null" />.   Otherwise the return is an instance of SKSuface.</returns>
            <remarks>This will create a buffer that will be backend by the in-memory buffer provided in <paramref name="pixels" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,SkiaSharp.SKSurfaceProps)">
            <param name="info">Contains the image configuration parameters.</param>
            <param name="pixels">Pointer to an in memory-buffer that can hold the image as specified.</param>
            <param name="rowBytes">The number of bytes per row in the pixel buffer.</param>
            <param name="props">Contains the surface property configuration.</param>
            <summary>Creates a new SKSurface from the specified image parameters, the provided buffer and surface properties.</summary>
            <returns>If the requested surface can not be created, or the configuration is not supported, this returns <see langword="null" />.   Otherwise the return is an instance of SKSuface.</returns>
            <remarks>This will create a buffer that will be backend by the in-memory buffer provided in <paramref name="pixels" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(System.Int32,System.Int32,SkiaSharp.SKColorType,SkiaSharp.SKAlphaType)">
            <param name="width">The desired width for the surface.</param>
            <param name="height">The desired heigh for the surface.</param>
            <param name="colorType">Color type to use for the surface.</param>
            <param name="alphaType">Transparency mode to use for the surface.</param>
            <summary>Creates a new SKSurface with the specified image parameters.</summary>
            <returns>If the requested surface can not be created, or the configuration is not supported, this returns <see langword="null" />.   Otherwise the return is an instance of SKSuface.</returns>
            <remarks>This will create a buffer that will be backend by the in-memory buffer.</remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(System.Int32,System.Int32,SkiaSharp.SKColorType,SkiaSharp.SKAlphaType,SkiaSharp.SKSurfaceProps)">
            <param name="width">The desired width for the surface.</param>
            <param name="height">The desired height for the surface.</param>
            <param name="colorType">Color type to use for the surface.</param>
            <param name="alphaType">Transparency mode to use for the surface.</param>
            <param name="props">Contains the surface property configuration.</param>
            <summary>Creates a new SKSurface with the specified image parameters and surface properties.</summary>
            <returns>If the requested surface can not be created, or the configuration is not supported, this returns <see langword="null" />.   Otherwise the return is an instance of SKSuface.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(System.Int32,System.Int32,SkiaSharp.SKColorType,SkiaSharp.SKAlphaType,System.IntPtr,System.Int32)">
            <param name="width">The desired width for the surface.</param>
            <param name="height">The desired height for the surface.</param>
            <param name="colorType">Color type to use for the surface.</param>
            <param name="alphaType">Transparency mode to use for the surface.</param>
            <param name="pixels">Pointer to an in memory-buffer that can hold the image as specified.</param>
            <param name="rowBytes">The number of bytes per row in the pixel buffer.</param>
            <summary>Creates a new SKSurface with the specified image parameters using a provided buffer.</summary>
            <returns>If the requested surface can not be created, or the configuration is not supported, this returns <see langword="null" />.   Otherwise the return is an instance of SKSuface.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(System.Int32,System.Int32,SkiaSharp.SKColorType,SkiaSharp.SKAlphaType,System.IntPtr,System.Int32,SkiaSharp.SKSurfaceProps)">
            <param name="width">The desired width for the surface.</param>
            <param name="height">The desired height for the surface.</param>
            <param name="colorType">Color type to use for the surface.</param>
            <param name="alphaType">Transparency mode to use for the surface.</param>
            <param name="pixels">Pointer to an in memory-buffer that can hold the image as specified.</param>
            <param name="rowBytes">The number of bytes per row in the pixel buffer.</param>
            <param name="props">Contains the surface property configuration.</param>
            <summary>Creates a new SKSurface with the specified image parameters using a provided buffer and surface properties.</summary>
            <returns>If the requested surface can not be created, or the configuration is not supported, this returns <see langword="null" />.   Otherwise the return is an instance of SKSuface.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Snapshot">
            <summary>Takes a snapshot of the surface and returns it as an image.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKSurfaceProps">
            <summary>Surface properties</summary>
            <remarks>
                <para>These are used to configure the properties of the surface when it is being created.</para>
                <para />
                <para>Currently the only setting avaialble is the PixelGeometry that you use to describe the order and orientation of the individual LED elements on each pixel.</para>
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKSurfaceProps.PixelGeometry">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKSurfaceProps.PixelGeometry">
            <summary>
                <para>Describes the LCD geometry of each pixel on the surface.</para>
                <para />
            </summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKTextAlign">
            <summary>Possible text alignment values</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKTextAlign.Center">
            <summary>Center the text</summary>
        </member>
        <member name="F:SkiaSharp.SKTextAlign.Left">
            <summary>Left align the text</summary>
        </member>
        <member name="F:SkiaSharp.SKTextAlign.Right">
            <summary>Right align the text</summary>
        </member>
        <member name="T:SkiaSharp.SKTextEncoding">
            <summary>Possible encodings.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKTextEncoding.GlyphId">
            <summary>The buffer contains glyph ids.</summary>
        </member>
        <member name="F:SkiaSharp.SKTextEncoding.Utf16">
            <summary>The buffer contains UTF-16 encoded characters.</summary>
        </member>
        <member name="F:SkiaSharp.SKTextEncoding.Utf32">
            <summary>The buffer contains UTF-32 encoded characters.</summary>
        </member>
        <member name="F:SkiaSharp.SKTextEncoding.Utf8">
            <summary>The buffer contains UTF-8 encoded characters.</summary>
        </member>
        <member name="T:SkiaSharp.SKTypeface">
            <summary>The SkTypeface class specifies the typeface and intrinsic style of a font.</summary>
            <remarks>
                <para>The SkTypeface class specifies the typeface and intrinsic style of a font.</para>
                <para>This is used in the paint, along with optionally algorithmic settings like textSize, textSkewX, textScaleX, FakeBoldText, to specifyhow text appears when drawn (and measured).</para>
                <para />
                <para>Typeface objects are immutable, and so they can be shared between threads.</para>
                <para>If you want to create type faces with specific weights not covered by the SKTypefaceStyle, you can pass a suffix to the font family name to trigger this, like this:</para>
                <para />
                <para />
                <code lang="C#"><![CDATA[var myThinFace = SKTypeface.FromFamilyName ("sans-serif-thin");]]></code>
                <para />
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.CharsToGlyphs(System.String,System.UInt16[]@)">
            <param name="chars">To be added.</param>
            <param name="glyphs">To be added.</param>
            <summary>
                <para>Given a string, optionally return their corresponding glyph IDs.</para>
            </summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.CharsToGlyphs(System.IntPtr,System.Int32,SkiaSharp.SKEncoding,System.UInt16[]@)">
            <param name="str">To be added.</param>
            <param name="strlen">To be added.</param>
            <param name="encoding">To be added.</param>
            <param name="glyphs">To be added.</param>
            <summary>
                <para>Given a buffer containing character codes, of the specified encoding, optionally return their corresponding glyph IDs.</para>
            </summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.CountGlyphs(System.String)">
            <param name="str">To be added.</param>
            <summary>Returns the number of glyphs on the string.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.CountGlyphs(System.IntPtr,System.Int32,SkiaSharp.SKEncoding)">
            <param name="str">To be added.</param>
            <param name="strLen">To be added.</param>
            <param name="encoding">To be added.</param>
            <summary>Returns the number of glyphs on the specified buffer with the specified length and encoding.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKTypeface.FamilyName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.FromFamilyName(System.String,SkiaSharp.SKTypefaceStyle)">
            <param name="familyName">May be <paramref name="null" />. The name of the font family.</param>
            <param name="style">The style (normal, bold, italic) of the typeface.</param>
            <summary>
                <para>Return a new reference to the typeface that most closely matches the requested family name and style. </para>
            </summary>
            <returns>Reference to the closest-matching typeface. </returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.FromFamilyName(System.String,SkiaSharp.SKFontStyleWeight,SkiaSharp.SKFontStyleWidth,SkiaSharp.SKFontStyleSlant)">
            <param name="familyName">To be added.</param>
            <param name="weight">To be added.</param>
            <param name="width">To be added.</param>
            <param name="slant">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.FromFamilyName(System.String,System.Int32,System.Int32,SkiaSharp.SKFontStyleSlant)">
            <param name="familyName">To be added.</param>
            <param name="weight">To be added.</param>
            <param name="width">To be added.</param>
            <param name="slant">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.FromFile(System.String,System.Int32)">
            <param name="path">path of the file.</param>
            <param name="index">The font face index.</param>
            <summary>Return a new typeface given a file. </summary>
            <returns>
                <para />
            </returns>
            <remarks>
                <para>If the file does not exist, or is not a valid font file, returns <paramref name="null" />.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.FromStream(SkiaSharp.SKStreamAsset,System.Int32)">
            <param name="stream">The input stream.</param>
            <param name="index">The font face index.</param>
            <summary>Return a new typeface given a stream. Ownership of the stream is transferred, so the caller must not reference it again.</summary>
            <returns>If the stream is not a valid font file, returns <paramref name="null" />. </returns>
            <remarks>
                <para />
                <example>
                    <code lang="C#"><![CDATA[var stream = new SKFileStream (“myfont.ttf”);
using (var tf = SKTypeface.FromStream (stream)) {
    paint.Color = XamDkBlue;
    paint.TextSize = 60;
    paint.Typeface = tf;

    canvas.DrawText (text, 50, 100, paint);
}
]]></code>
                </example>.</remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.FromTypeface(SkiaSharp.SKTypeface,SkiaSharp.SKTypefaceStyle)">
            <param name="typeface">May be <paramref name="null" />. The name of the existing type face.</param>
            <param name="style">The style (normal, bold, italic) of the type face.</param>
            <summary>
                <para>Return a new reference to the typeface that most closely matches the requested typeface and specified Style</para>
            </summary>
            <returns>reference to the closest-matching typeface. </returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.GetTableData(System.UInt32)">
            <param name="tag">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.GetTableTags">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.TryGetTableData(System.UInt32,System.Byte[]@)">
            <param name="tag">To be added.</param>
            <param name="tableData">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKTypefaceStyle">
            <summary>Specifies the intrinsic style attributes of a given typeface.</summary>
            <remarks>
                <para>While the API does not surface enumeration values for other thin, light, ultra-light, heavy and black, you can achieve the same result by creating an SKTypeface with the suffix “-light”, “-thin” and so on.</para>
                <para />
                <para>Like this:</para>
                <para />
                <code lang="C#"><![CDATA[var myThinFace = SKTypeface.FromFamilyName ("sans-serif-thin");]]></code>
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKTypefaceStyle.Bold">
            <summary>Bold</summary>
        </member>
        <member name="F:SkiaSharp.SKTypefaceStyle.BoldItalic">
            <summary>Bold and Italic, convenience definition.</summary>
        </member>
        <member name="F:SkiaSharp.SKTypefaceStyle.Italic">
            <summary>Italic</summary>
        </member>
        <member name="F:SkiaSharp.SKTypefaceStyle.Normal">
            <summary>Normal</summary>
        </member>
        <member name="T:SkiaSharp.SKWStream">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKWStream.BytesWritten">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.Flush">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.GetSizeOfPackedUInt32(System.UInt32)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.NewLine">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.Write(System.Byte[],System.Int32)">
            <param name="buffer">To be added.</param>
            <param name="size">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.Write16(System.UInt16)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.Write32(System.UInt32)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.Write8(System.Byte)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.WriteBigDecimalAsText(System.Int64,System.Int32)">
            <param name="value">To be added.</param>
            <param name="digits">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.WriteBool(System.Boolean)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.WriteDecimalAsTest(System.Int32)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.WriteHexAsText(System.UInt32,System.Int32)">
            <param name="value">To be added.</param>
            <param name="digits">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.WritePackedUInt32(System.UInt32)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.WriteScalar(System.Single)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.WriteScalarAsText(System.Single)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.WriteStream(SkiaSharp.SKStream,System.Int32)">
            <param name="input">To be added.</param>
            <param name="length">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.WriteText(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKXferMode">
            <summary>Defines the transfer modes in the drawing pipeline.</summary>
            <remarks>
                <para>The algebra for the modes uses the following symbols:</para>
                <list type="bullet">
                    <item>
                        <term>Sa, Sc  - source alpha and color</term>
                    </item>
                    <item>
                        <term>Da, Dc - destination alpha and color (before compositing)</term>
                    </item>
                </list>
                <para />
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKXferMode.Clear">
            <summary>Sets the color and alpha to zero.</summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.Color">
            <summary>
                <para />
            </summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.ColorBurn">
            <summary>
                <para />
            </summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.ColorDodge">
            <summary>
                <para />
            </summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.Darken">
            <summary>
                <para>[Sa + Da - Sa*Da, Sc*(1 - Da) + Dc*(1 - Sa) + min(Sc, Dc)]</para>
                <para />
            </summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.Difference">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.Dst">
            <summary>[Da, Dc] Destination alpha and destination color are kept.</summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.DstATop">
            <summary>[Sa, Dc * Sa + Sc * (1 - Da)]</summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.DstIn">
            <summary>[Da * Sa, Dc * Sa]</summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.DstOut">
            <summary>[Da * (1 - Sa), Dc * (1 - Sa)]</summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.DstOver">
            <summary>[Da + Sa * (1 - Da), Dc + Sc * (1 - Da)]</summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.Exclusion">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.HardLight">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.Hue">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.Lighten">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.Luminosity">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.Modulate">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.Multiply">
            <summary>[Sa * Da, Sc * Dc] </summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.Overlay">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.Plus">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.Saturation">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.Screen">
            <summary>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]  </summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.SoftLight">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.Src">
            <summary>[Sa, Sc] Source alpha and source color are copied.</summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.SrcATop">
            <summary>[Da, Sc * Da + Dc * (1 - Sa)]</summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.SrcIn">
            <summary>[Sa * Da, Sc * Da]</summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.SrcOut">
            <summary>[Sa * (1 - Da), Sc * (1 - Da)]</summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.SrcOver">
            <summary>[Sa + Da * (1 - Sa), Sc + Dc * (1 - Sa)]</summary>
        </member>
        <member name="F:SkiaSharp.SKXferMode.Xor">
            <summary>[Sa + Da - 2 * Sa * Da, Sc * (1 - Da) + Dc * (1 - Sa)]</summary>
        </member>
        <member name="T:SkiaSharp.SKZeroInitialized">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:SkiaSharp.SKZeroInitialized.No">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.SKZeroInitialized.Yes">
            <summary>To be added.</summary>
        </member>
    </members>
</doc>
